%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - MAST_TAB.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - MAST_TAB.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
/fPP true def
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
906 300 588 (TABLE OF CONTENTS) 588 SB
0 0 0 fC
/fm 256 def
587 2 906 359 B
1 F
n
300 500 335 (List of Figures) 335 SB
1907 500 43 (vi) 43 SB
300 600 320 (Code Listings) 320 SB
1892 600 58 (vii) 58 SB
300 700 196 (Abstract) 196 SB
1907 700 43 (ix) 43 SB
300 800 830 (PART I: THE VHDL LANGUAGE) 830 SB
/fm 256 def
829 2 300 859 B
1 F
n
300 900 1059 (Chapter 1: TOP LEVEL VHDL OVERVIEW) 1059 SB
1921 900 29 (1) 29 SB
450 1000 549 (1.0 VHDL Design units) 549 SB
1921 1000 29 (1) 29 SB
450 1100 226 (1.1 Entity) 226 SB
1921 1100 29 (1) 29 SB
450 1200 374 (1.2 Architecture) 374 SB
1921 1200 29 (3) 29 SB
450 1300 571 (1.2.1 Behavioral Models) 571 SB
1921 1300 29 (3) 29 SB
450 1400 546 (1.2.2 Structural Models) 546 SB
1921 1400 29 (4) 29 SB
450 1500 406 (1.3 Configuration) 406 SB
1921 1500 29 (5) 29 SB
450 1600 785 (1.4 Packages and Package Bodies) 785 SB
1921 1600 29 (6) 29 SB
450 1700 417 (1.4.1 Overloading) 417 SB
1921 1700 29 (7) 29 SB
300 1800 675 (Chapter 2: VHDL OBJECTS) 675 SB
1921 1800 29 (9) 29 SB
450 1900 440 (2.0 VHDL Objects) 440 SB
1921 1900 29 (9) 29 SB
450 2000 255 (2.1 Signals) 255 SB
1921 2000 29 (9) 29 SB
450 2100 476 (2.2 Signal Operators) 476 SB
1921 2100 29 (9) 29 SB
450 2200 653 (2.2.1 Signal Type Attributes) 653 SB
1921 2200 29 (9) 29 SB
450 2300 509 (2.2.2 Array Attributes) 509 SB
1892 2300 58 (11) 58 SB
450 2400 985 (2.2.3 Signal Attributes that Return a Value) 985 SB
1892 2400 58 (12) 58 SB
450 2500 992 (2.2.4 Signal Attributes that Return a Signal) 992 SB
1892 2500 58 (13) 58 SB
450 2600 419 (2.3 Signal Drivers) 419 SB
1892 2600 58 (14) 58 SB
450 2700 734 (2.4 Signal Resolution Functions) 734 SB
1892 2700 58 (14) 58 SB
450 2800 309 (2.5 Variables) 309 SB
1892 2800 58 (16) 58 SB
450 2900 316 (2.6 Constants) 316 SB
1892 2900 58 (16) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1188 3069 24 (ii) 24 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 293 (2.7 Generics) 293 SB
1892 300 58 (16) 58 SB
300 400 975 (Chapter 3: VHDL DATA STRUCTURES) 975 SB
1892 400 58 (17) 58 SB
450 500 403 (3.0 VHDL Types) 403 SB
1862 500 88 (  17) 88 SB
450 600 847 (3.1 Signals, Variables and Constants) 847 SB
1892 600 58 (17) 58 SB
450 700 299 (3.1.1 Signals) 299 SB
1892 700 58 (17) 58 SB
450 800 353 (3.1.2 Variables) 353 SB
1892 800 58 (17) 58 SB
450 900 360 (3.1.3 Constants) 360 SB
1892 900 58 (17) 58 SB
450 1000 388 (3.2 Scalar Types) 388 SB
1892 1000 58 (18) 58 SB
450 1100 294 (3.2.1 Integer) 294 SB
1892 1100 58 (18) 58 SB
450 1200 238 (3.2.2 Real) 238 SB
1892 1200 58 (18) 58 SB
450 1300 408 (3.2.3 Enumerated) 408 SB
1892 1300 58 (18) 58 SB
450 1400 325 (3.2.4 Physical) 325 SB
1892 1400 58 (19) 58 SB
450 1500 493 (3.3 Composite Types) 493 SB
1892 1500 58 (19) 58 SB
450 1600 288 (3.3.1 Arrays) 288 SB
1892 1600 58 (19) 58 SB
450 1700 323 (3.3.2 Records) 323 SB
1892 1700 58 (20) 58 SB
450 1800 299 (3.4 Subtypes) 299 SB
1892 1800 58 (20) 58 SB
450 1900 208 (3.5 Alias) 208 SB
1892 1900 58 (21) 58 SB
450 2000 579 (3.6 Unconstrained Types) 579 SB
1892 2000 58 (21) 58 SB
450 2100 373 (3.7 Overloading) 373 SB
1892 2100 58 (22) 58 SB
450 2200 641 (3.8 User Defined Attributes) 641 SB
1892 2200 58 (22) 58 SB
450 2300 297 (3.9 Generate) 297 SB
1892 2300 58 (22) 58 SB
450 2400 438 (3.10 Access Types) 438 SB
1892 2400 58 (22) 58 SB
450 2500 530 (3.11 Incomplete Types) 530 SB
1892 2500 58 (23) 58 SB
450 2600 360 (3.12 File Types) 360 SB
1892 2600 58 (23) 58 SB
300 2700 762 (Chapter 4: VHDL EXECUTION) 762 SB
1892 2700 58 (24) 58 SB
450 2800 610 (4.0 Concurrent Processing) 610 SB
1892 2800 58 (24) 58 SB
450 2900 764 (4.1 Transport and Inertial Delays) 764 SB
1892 2900 58 (25) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1182 3069 36 (iii) 36 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 613 (4.2 Concurrent Statements) 613 SB
1892 300 58 (25) 58 SB
450 400 593 (4.3 Sequential Processing) 593 SB
1892 400 58 (26) 58 SB
450 500 315 (4.4 Processes) 315 SB
1892 500 58 (26) 58 SB
450 600 583 (4.4.1 Sensitive Processes) 583 SB
1892 600 58 (27) 58 SB
450 700 701 (4.4.2 Non-Sensitive Processes) 701 SB
1892 700 58 (28) 58 SB
450 800 995 (4.4.3 Important Notes Regarding Synthesis) 995 SB
1892 800 58 (28) 58 SB
450 900 596 (4.5 Sequential Statements) 596 SB
1892 900 58 (29) 58 SB
450 1000 509 (4.5.1 IF-THEN-ELSE) 509 SB
1892 1000 58 (29) 58 SB
450 1100 490 (4.5.2 Case Statement) 490 SB
1892 1100 58 (30) 58 SB
450 1200 324 (4.5.3 Looping) 324 SB
1892 1200 58 (32) 58 SB
450 1300 495 (4.5.3.1 The For Loop) 495 SB
1892 1300 58 (32) 58 SB
450 1400 378 (4.5.3.2 The Whi) 378 SB
828 1400 177 (le Loop) 177 SB
1892 1400 58 (33) 58 SB
450 1500 270 (4.5.3.3 Exit) 270 SB
1892 1500 58 (33) 58 SB
450 1600 236 (4.6 Assert) 236 SB
1892 1600 58 (34) 58 SB
450 1700 482 (4.6.1 Timing Checks) 482 SB
1892 1700 58 (34) 58 SB
450 1800 200 (4.7 Wait) 200 SB
1892 1800 58 (35) 58 SB
450 1900 484 (4.7.1 Wait Examples) 484 SB
1892 1900 58 (35) 58 SB
450 2000 393 (4.8 Subprograms) 393 SB
1892 2000 58 (36) 58 SB
450 2100 356 (4.8.1 Functions) 356 SB
1892 2100 58 (36) 58 SB
450 2200 389 (4.8.2 Procedures) 389 SB
1892 2200 58 (37) 58 SB
300 2300 707 (PART II: VHDL EXAMPLES) 707 SB
0 0 0 fC
/fm 256 def
706 2 300 2359 B
1 F
n
300 2400 679 (Chapter 5: MUX EXAMPLE) 679 SB
1892 2400 58 (38) 58 SB
450 2500 758 (5.0 A Complete VHDL Example) 758 SB
1892 2500 58 (38) 58 SB
450 2600 581 (5.1 Behavioral 4-1 MUX) 581 SB
1892 2600 58 (38) 58 SB
450 2700 421 (5.1.1 MUX Entity) 421 SB
1892 2700 58 (38) 58 SB
450 2800 418 (5.1.2 Architecture) 418 SB
1892 2800 58 (39) 58 SB
450 2900 450 (5.1.3 Configuration) 450 SB
1892 2900 58 (39) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1184 3069 32 (iv) 32 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 581 (5.2 Behavioral 8-1 MUX) 581 SB
1892 300 58 (40) 58 SB
450 400 270 (5.2.1 Entity) 270 SB
1892 400 58 (40) 58 SB
450 500 418 (5.2.2 Architecture) 418 SB
1892 500 58 (41) 58 SB
450 600 450 (5.2.3 Configuration) 450 SB
1892 600 58 (42) 58 SB
450 700 548 (5.3 VHDL Testbenches) 548 SB
1892 700 58 (42) 58 SB
450 800 520 (5.3.1 MUX Testbench) 520 SB
1892 800 58 (43) 58 SB
300 900 857 (Chapter 6: AM2900 VHDL Example) 857 SB
1892 900 58 (46) 58 SB
450 1000 1133 (6.0 The AM2900 Bit- Sliced Pipelined Processor) 1133 SB
1892 1000 58 (46) 58 SB
450 1100 165 (6.1 I/O) 165 SB
1892 1100 58 (46) 58 SB
450 1200 319 (6.2 Execution) 319 SB
1892 1200 58 (47) 58 SB
450 1300 462 (6.2.1 Memory Load) 462 SB
1892 1300 58 (48) 58 SB
450 1400 363 (6.2.2 Execution) 363 SB
1892 1400 58 (48) 58 SB
450 1500 492 (6.2.2.1 Source Select) 492 SB
1892 1500 58 (49) 58 SB
450 1600 293 (6.2.2.2 ALU) 293 SB
1892 1600 58 (50) 58 SB
450 1700 777 (6.2.2.3 Destination Control Word) 777 SB
1892 1700 58 (52) 58 SB
450 1800 844 (6.2.2.4 The Next Instruction Control) 844 SB
1892 1800 58 (55) 58 SB
300 1900 847 (Chapter 7: TESTING THE AM2900) 847 SB
1892 1900 58 (58) 58 SB
450 2000 702 (7.0 The AM2900 Testbenches) 702 SB
1892 2000 58 (58) 58 SB
450 2100 515 (7.1 Load the AM2900) 515 SB
1892 2100 58 (58) 58 SB
450 2200 575 (7.2 Branch and Continue) 575 SB
1892 2200 58 (61) 58 SB
300 2300 791 (Chapter 8: AM2900 SYNTHESIS) 791 SB
1892 2300 58 (65) 58 SB
450 2400 871 (8.0 Coding the AM2900 for synthesis) 871 SB
1892 2400 58 (65) 58 SB
450 2500 526 (8.1 Multiple Processes) 526 SB
1892 2500 58 (65) 58 SB
450 2600 306 (8.2 Reduced ) 306 SB
756 2600 214 (Duplicity) 214 SB
1892 2600 58 (65) 58 SB
450 2700 600 (8.3 Variable Management) 600 SB
1892 2700 58 (65) 58 SB
450 2800 339 (8.4 The Result) 339 SB
1892 2800 58 (66) 58 SB
300 2900 662 (Chapter 9: CONCLUSIONS) 662 SB
1892 2900 58 (67) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1190 3069 20 (v) 20 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 257 (References) 257 SB
1892 300 58 (68) 58 SB
300 400 937 (Appendix A: AM2900 SOURCE CODE) 937 SB
300 500 725 (Appendix B: AM2900 Package) 725 SB
300 600 867 (Appendix C: AM2900 Test Bench #1) 867 SB
300 700 870 (Appendix D: AM2900 Test Bench #2) 870 SB
300 800 886 (Appendix E: AM2900 Synthesis Code) 886 SB
300 900 1006 (Appendix F: AM2900 TestBench #1 Result) 1006 SB
300 1000 1017 (Appendix G: AM2900 TestBench #2 Result) 1017 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1184 3069 32 (vi) 32 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1032 300 335 (List of Figures) 335 SB
0 0 0 fC
/fm 256 def
334 2 1032 359 B
1 F
n
450 400 526 (1. Simple NAND Gate) 526 SB
1921 400 29 (2) 29 SB
450 500 211 (2. RS-FF) 211 SB
1921 500 29 (4) 29 SB
450 600 287 (3. 4-1 MUX) 287 SB
1892 600 58 (38) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1178 3069 44 (vii) 44 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1040 300 320 (Code Listings) 320 SB
0 0 0 fC
/fm 256 def
319 2 1040 359 B
1 F
n
450 400 579 (1. FF ENTITY statement) 579 SB
1921 400 29 (2) 29 SB
450 500 485 (2. Nand Architecture) 485 SB
1921 500 29 (3) 29 SB
450 600 458 (3. RS Flip Flop Exa) 458 SB
908 600 113 (mple) 113 SB
1921 600 29 (4) 29 SB
450 700 687 (4. RS Flip Flop Configuration) 687 SB
1921 700 29 (5) 29 SB
450 800 403 (5. Parity Package) 403 SB
1921 800 29 (7) 29 SB
450 900 344 (6. Overloading) 344 SB
1921 900 29 (7) 29 SB
450 1000 472 (7. Signal Contention) 472 SB
1892 1000 58 (14) 58 SB
450 1100 709 (8. Sample Resolution Function) 709 SB
1892 1100 58 (15) 58 SB
450 1200 491 (9. Enumerated Types) 491 SB
1892 1200 58 (18) 58 SB
450 1300 437 (10. Physical Types) 437 SB
1892 1300 58 (19) 58 SB
450 1400 438 (11. Array Example) 438 SB
1892 1400 58 (19) 58 SB
450 1500 473 (12. Record Example) 473 SB
1892 1500 58 (20) 58 SB
450 1600 493 (13. Subtype Example) 493 SB
1892 1600 58 (20) 58 SB
450 1700 425 (14. Alias Example) 425 SB
1892 1700 58 (21) 58 SB
450 1800 579 (15. Unconstarined Types) 579 SB
1892 1800 58 (21) 58 SB
450 1900 409 (16. Access Types) 409 SB
1892 1900 58 (23) 58 SB
450 2000 610 (17. Concurrent Processing) 610 SB
1892 2000 58 (24) 58 SB
450 2100 681 (18. Transport Delay Example) 681 SB
1892 2100 58 (25) 58 SB
450 2200 563 (19. Process Equivalence) 563 SB
1892 2200 58 (27) 58 SB
450 2300 821 (20. Sensitive Process \(NAND gate\)) 821 SB
1892 2300 58 (27) 58 SB
450 2400 802 (21. Process Example \(D Flip Flop\)) 802 SB
1892 2400 58 (28) 58 SB
450 2500 29 (2) 29 SB
479 2500 782 (2. VHDL IF-THEN-ELSE Clause) 782 SB
1892 2500 58 (29) 58 SB
450 2600 653 (23. VHDL CASE Statement) 653 SB
1892 2600 58 (30) 58 SB
450 2700 663 (24. Case Statement Example) 663 SB
1892 2700 58 (31) 58 SB
450 2800 783 (25. Finite State Machine Example) 783 SB
1892 2800 58 (31) 58 SB
450 2900 553 (26. FOR Loop Example) 553 SB
1892 2900 58 (32) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1172 3069 56 (viii) 56 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 580 (27. While Loop Example) 580 SB
1892 300 58 (33) 58 SB
450 400 399 (28. Exit Example) 399 SB
1892 400 58 (34) 58 SB
450 500 542 (29. ASSERT Examples) 542 SB
1892 500 58 (35) 58 SB
450 600 506 (30. Function Example) 506 SB
1892 600 58 (37) 58 SB
450 700 539 (31. Procedure Example) 539 SB
1892 700 58 (37) 58 SB
450 800 469 (32. 4-1 MUX Entity) 469 SB
1892 800 58 (39) 58 SB
450 900 617 (33. 4-1 MUX Architecture) 617 SB
1892 900 58 (39) 58 SB
450 1000 649 (34. 4-1 MUX Configuration) 649 SB
1892 1000 58 (40) 58 SB
450 1100 469 (35. 8-1 MUX Entity) 469 SB
1892 1100 58 (40) 58 SB
450 1200 617 (36. 8-1 MUX Architecture) 617 SB
1892 1200 58 (42) 58 SB
450 1300 649 (37. 8-1 MUX Configuration) 649 SB
1892 1300 58 (42) 58 SB
450 1400 832 (38. The Complete 8-1 MUX VHDL) 832 SB
1892 1400 58 (45) 58 SB
450 1500 543 (39. AM2900 Execution) 543 SB
1892 1500 58 (47) 58 SB
450 1600 642 (40. AM2900 Memory Load) 642 SB
1892 1600 58 (48) 58 SB
450 1700 628 (41. AM2900 Source Select) 628 SB
1892 1700 58 (49) 58 SB
450 1800 429 (42. AM2900 ALU) 429 SB
1892 1800 58 (50) 58 SB
450 1900 815 (43. AM2900 Add/Subtract Routine) 815 SB
1892 1900 58 (51) 58 SB
450 2000 913 (44. AM2900 Destination Control Word) 913 SB
1892 2000 58 (55) 58 SB
450 2100 876 (45. AM2900 Next Instruction Control) 876 SB
1892 2100 58 (57) 58 SB
450 2200 622 (46. AM2900 Testbench #1) 622 SB
1892 2200 58 (61) 58 SB
450 2300 799 (47. AM2900 Branch and Continue) 799 SB
1892 2300 58 (64) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1183 3069 33 (ix) 33 SB
32 0 0 75 75 0 0 0 69 /Times-Bold /font29 ANSIFont font
811 282 777 (VHDL: An Introduction) 777 SB
0 0 0 fC
/fm 256 def
776 6 811 359 B
1 F
n
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
300 400 216 (Abstract) 216 SB
/fm 256 def
215 5 300 460 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 600 104 (The ) 140 SB
590 600 188 (VHSIC ) 224 SB
814 600 149 (\(Very ) 186 SB
1000 600 127 (High ) 164 SB
1164 600 157 (Speed ) 194 SB
1358 600 248 (Integrated ) 285 SB
1643 600 192 (Circuit\) ) 229 SB
1872 600 228 (Hardware) 228 SB
300 700 283 (Description ) 285 SB
585 700 239 (Language ) 241 SB
826 700 212 (\(VHDL\) ) 214 SB
1040 700 92 (has ) 94 SB
1134 700 199 (recently ) 201 SB
1335 700 194 (become ) 196 SB
1531 700 85 (the ) 87 SB
1618 700 201 (industry ) 203 SB
1821 700 211 (standard ) 213 SB
2034 700 66 (for) 66 SB
300 800 294 (switch-level ) 302 SB
602 800 230 (hardware ) 238 SB
840 800 243 (modeling. ) 251 SB
1091 800 15 ( ) 23 SB
1114 800 140 (What ) 148 SB
1262 800 97 (this ) 105 SB
1367 800 161 (means ) 170 SB
1537 800 60 (to ) 69 SB
1606 800 204 (students ) 213 SB
1819 800 62 (of ) 71 SB
1890 800 210 (electrical) 210 SB
300 900 297 (engineering, ) 313 SB
613 900 53 (is ) 69 SB
682 900 101 (that ) 118 SB
800 900 230 (hardware ) 247 SB
1047 900 282 (engineering ) 299 SB
1346 900 53 (is ) 70 SB
1416 900 128 (itself ) 145 SB
1561 900 239 (becoming ) 256 SB
1817 900 41 (a ) 58 SB
1875 900 161 (matter ) 178 SB
2053 900 47 (of) 47 SB
300 1000 229 (software. ) 234 SB
534 1000 15 ( ) 20 SB
554 1000 104 (The ) 110 SB
664 1000 166 (reason ) 172 SB
836 1000 81 (for ) 87 SB
923 1000 206 (VHDL's ) 212 SB
1135 1000 190 (success ) 196 SB
1331 1000 95 (can ) 101 SB
1432 1000 70 (be ) 76 SB
1508 1000 235 (attributed ) 241 SB
1749 1000 60 (to ) 66 SB
1815 1000 69 (its ) 75 SB
1890 1000 159 (ability ) 165 SB
2055 1000 45 (to) 45 SB
300 1100 157 (model ) 162 SB
462 1100 85 (the ) 90 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
552 1101 207 (behavior) 207 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
759 1100 15 ( ) 20 SB
779 1100 62 (of ) 67 SB
846 1100 41 (a ) 47 SB
893 1100 175 (circuit, ) 181 SB
1074 1100 88 (not ) 94 SB
1168 1100 98 (just ) 104 SB
1272 1100 85 (the ) 91 SB
1363 1100 303 (functionality ) 309 SB
1672 1100 62 (of ) 68 SB
1740 1100 61 (it. ) 67 SB
1807 1100 15 ( ) 21 SB
1828 1100 116 (This ) 122 SB
1950 1100 150 (allows) 150 SB
300 1200 174 (VHDL ) 193 SB
493 1200 187 (designs ) 206 SB
699 1200 60 (to ) 79 SB
778 1200 70 (be ) 90 SB
868 1200 230 (hardware ) 250 SB
1118 1200 310 (independent. ) 330 SB
1448 1200 15 ( ) 35 SB
1483 1200 56 (A ) 76 SB
1559 1200 174 (VHDL ) 194 SB
1753 1200 157 (model ) 177 SB
1930 1200 95 (can ) 115 SB
2045 1200 55 (be) 55 SB
300 1300 281 (constructed ) 286 SB
586 1300 116 (with ) 121 SB
707 1300 85 (the ) 90 SB
797 1300 215 (behavior ) 220 SB
1017 1300 243 (remaining ) 248 SB
1265 1300 222 (constant, ) 227 SB
1492 1300 85 (the ) 90 SB
1582 1300 115 (only ) 120 SB
1702 1300 177 (change ) 182 SB
1884 1300 141 (being ) 146 SB
2030 1300 70 (the) 70 SB
300 1400 92 (use ) 98 SB
398 1400 62 (of ) 68 SB
466 1400 210 (different ) 216 SB
682 1400 268 (technology ) 274 SB
956 1400 193 (specific ) 199 SB
1155 1400 243 (resolution ) 249 SB
1404 1400 241 (functions. ) 247 SB
1651 1400 15 ( ) 21 SB
1672 1400 104 (The ) 110 SB
1782 1400 87 (big ) 94 SB
1876 1400 170 (impact ) 177 SB
2053 1400 47 (of) 47 SB
300 1500 97 (this ) 110 SB
410 1500 53 (is ) 66 SB
476 1500 85 (the ) 98 SB
574 1500 159 (ability ) 172 SB
746 1500 60 (to ) 74 SB
820 1500 255 (re-procure ) 269 SB
1089 1500 128 (parts ) 142 SB
1231 1500 57 (at ) 71 SB
1302 1500 41 (a ) 55 SB
1357 1500 117 (later ) 131 SB
1488 1500 127 (date. ) 141 SB
1629 1500 15 ( ) 29 SB
1658 1500 94 (For ) 108 SB
1766 1500 232 (Example, ) 246 SB
2012 1500 48 (if ) 62 SB
2074 1500 26 (a) 26 SB
300 1600 234 (particular ) 253 SB
553 1600 146 (ASIC ) 165 SB
718 1600 262 (fabrication ) 281 SB
999 1600 190 (process ) 209 SB
1208 1600 217 (becomes ) 236 SB
1444 1600 229 (outdated, ) 248 SB
1692 1600 46 (it ) 65 SB
1757 1600 53 (is ) 72 SB
1829 1600 206 (possibly ) 226 SB
2055 1600 45 (to) 45 SB
300 1700 300 ("synthesize" ) 302 SB
602 1700 41 (a ) 43 SB
645 1700 111 (new ) 113 SB
758 1700 111 (gate ) 113 SB
871 1700 125 (level ) 127 SB
998 1700 164 (design ) 166 SB
1164 1700 124 (from ) 126 SB
1290 1700 85 (the ) 88 SB
1378 1700 133 (same ) 136 SB
1514 1700 256 (behavioral ) 259 SB
1773 1700 195 (models. ) 198 SB
1971 1700 15 ( ) 18 SB
1989 1700 111 (Both) 111 SB
300 1800 187 (designs ) 189 SB
489 1800 287 (functionally ) 289 SB
778 1800 226 (identical, ) 228 SB
1006 1800 88 (but ) 90 SB
1096 1800 227 (compiled ) 229 SB
1325 1800 103 (into ) 105 SB
1430 1800 210 (different ) 213 SB
1643 1800 146 (ASIC ) 149 SB
1792 1800 137 (lines. ) 140 SB
1932 1800 15 ( ) 18 SB
1950 1800 150 (Below) 150 SB
300 1900 1451 (are listed some of the advantages and disadvantages of VHDL:) 1451 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
300 2100 308 (Advantages-) 308 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3231 0 0 CB
300 2211 19 (\267) 19 SB
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 2200 104 (The ) 109 SB
484 2200 159 (ability ) 164 SB
648 2200 60 (to ) 66 SB
714 2200 125 (code ) 131 SB
845 2200 85 (the ) 91 SB
936 2200 215 (behavior ) 221 SB
1157 2200 62 (of ) 68 SB
1225 2200 41 (a ) 47 SB
1272 2200 174 (system ) 180 SB
1452 2200 98 (and ) 104 SB
1556 2200 92 (use ) 98 SB
1654 2200 230 (hardware ) 236 SB
1890 2200 210 (synthesis) 210 SB
375 2300 853 (tools to "synthesize" an actual circuit) 853 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3231 0 0 CB
300 2411 19 (\267) 19 SB
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 2400 1090 (Technology independent hardware descriptions) 1090 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3231 0 0 CB
300 2511 19 (\267) 19 SB
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 2500 662 (Fast switch level simulations) 662 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3231 0 0 CB
300 2611 19 (\267) 19 SB
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 2600 401 (Industry standard) 401 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (x) 21 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
300 300 376 (Disadvantages-) 376 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3231 0 0 CB
300 411 19 (\267) 19 SB
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 400 128 (Only ) 141 SB
516 400 41 (a ) 54 SB
570 400 165 (switch ) 178 SB
748 400 125 (level ) 138 SB
886 400 235 (language. ) 248 SB
1134 400 185 (Results ) 198 SB
1332 400 95 (can ) 108 SB
1440 400 70 (be ) 84 SB
1524 400 251 (inaccurate ) 265 SB
1789 400 127 (\(esp. ) 141 SB
1930 400 57 (at ) 71 SB
2001 400 99 (high) 99 SB
375 500 175 (speeds\)) 175 SB
32 0 0 42 42 0 0 0 42 /Symbol font
gs 319 3231 0 0 CB
300 611 19 (\267) 19 SB
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 600 1352 (Synthesis tools are not very robust or complete at this time) 1352 SB
375 800 1006 (The main issues discussed in this paper are:) 1006 SB
375 900 758 (\(i\) A brief introduction to VHDL) 758 SB
375 1000 961 (\(ii\) An introduction to VHDL testbenches) 961 SB
375 1100 98 (\(iii\) ) 120 SB
495 1100 56 (A ) 78 SB
573 1100 174 (VHDL ) 196 SB
769 1100 370 (implementation ) 392 SB
1161 1100 62 (of ) 84 SB
1245 1100 85 (the ) 107 SB
1352 1100 224 (AM2900 ) 247 SB
1599 1100 75 (bit ) 98 SB
1697 1100 149 (sliced ) 172 SB
1869 1100 231 (pipe-lined) 231 SB
450 1200 223 (processor) 223 SB
375 1300 939 (\(iv\) Sample testbenches for the AM2900) 939 SB
375 1400 954 (\(v\) An example synthesis of the AM2900) 954 SB
450 1600 95 (My ) 110 SB
560 1600 264 (experience ) 279 SB
839 1600 116 (with ) 131 SB
970 1600 174 (VHDL ) 190 SB
1160 1600 92 (has ) 108 SB
1268 1600 124 (been ) 140 SB
1408 1600 170 (coding ) 186 SB
1594 1600 203 (portions ) 219 SB
1813 1600 62 (of ) 78 SB
1891 1600 85 (the ) 101 SB
1992 1600 108 (F-22) 108 SB
300 1700 849 (Electronic Warfare System.  Shortly ) 850 SB
1150 1700 34 (I ) 35 SB
1185 1700 102 (will ) 103 SB
1288 1700 70 (be ) 71 SB
1359 1700 186 (starting ) 187 SB
1546 1700 91 (full ) 92 SB
1638 1700 174 (VHDL ) 175 SB
1813 1700 164 (design ) 165 SB
1978 1700 122 (using) 122 SB
300 1800 225 (synthesis ) 235 SB
535 1800 60 (to ) 70 SB
605 1800 197 (develop ) 208 SB
813 1800 184 (ASICs. ) 195 SB
1008 1800 15 ( ) 26 SB
1034 1800 34 (I ) 45 SB
1079 1800 123 (have ) 134 SB
1213 1800 108 (also ) 119 SB
1332 1800 124 (been ) 135 SB
1467 1800 210 (studying ) 221 SB
1688 1800 189 (VHDL, ) 200 SB
1888 1800 212 (including) 212 SB
300 1900 700 (development of all the EE126 ) 701 SB
1001 1900 199 (projects ) 200 SB
1201 1900 98 (and ) 99 SB
1300 1900 85 (the ) 86 SB
1386 1900 172 (EE126 ) 173 SB
1559 1900 143 (Basic ) 144 SB
1703 1900 246 (computer. ) 247 SB
1950 1900 15 ( ) 16 SB
1966 1900 86 (All ) 87 SB
2053 1900 47 (of) 47 SB
300 2000 134 (these ) 161 SB
461 2000 187 (designs ) 214 SB
675 2000 154 (which ) 181 SB
856 2000 34 (I ) 61 SB
917 2000 123 (have ) 150 SB
1067 2000 124 (been ) 151 SB
1218 2000 205 (working ) 232 SB
1450 2000 72 (on ) 99 SB
1549 2000 123 (have ) 151 SB
1700 2000 124 (been ) 152 SB
1852 2000 177 (written ) 205 SB
2057 2000 43 (in) 43 SB
300 2100 533 (Synthesizeable VHDL.) 533 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%Page: 11 11
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1183 3069 33 (xi) 33 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 11
% TrueType font name key:
%    MSTT31c17a = 45ffDTimes New RomanF0000003a000001900000
%    MSTT31c187 = 45ffDTimes New RomanF0000002a000001900000
%    MSTT31c194 = 45ffDTimes New RomanF0000004b000002bc0000
%    MSTT31c1a1 = 45ffDSymbolF0000002a000001900000
%    MSTT31c1ac = 45ffDTimes New RomanF0000003a000002bc0000
%    MSTT31c1b9 = 45ffDTimes New RomanF0000003a000001900001
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
