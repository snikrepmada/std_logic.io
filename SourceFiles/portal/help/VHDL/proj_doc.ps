%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - PROJ_DOC.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - PROJ_DOC.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
/fPP true def
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
0 0 0 fC
300 300 997 (PART I: SERIAL LOGIC ELEMENTS) 997 SB
0 0 0 fC
/fm 256 def
996 5 300 360 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 400 1059 (CHAPTER 1: SERIAL ARITHMETIC UNIT) 1059 SB
/fm 256 def
1058 2 300 459 B
1 F
n
300 500 831 (1.0 Serial Arithmetic Unit Summary) 831 SB
/fm 256 def
830 2 300 559 B
1 F
n
450 600 104 (The ) 108 SB
558 600 164 (design ) 168 SB
726 600 62 (of ) 66 SB
792 600 183 (circuits ) 187 SB
979 600 47 (fo) 47 SB
1026 600 34 (r ) 38 SB
1064 600 269 (performing ) 273 SB
1337 600 183 (various ) 187 SB
1524 600 255 (operations ) 259 SB
1783 600 72 (on ) 76 SB
1859 600 139 (serial ) 144 SB
2003 600 97 (data) 97 SB
300 700 53 (is ) 54 SB
354 700 175 (carried ) 176 SB
530 700 88 (out ) 89 SB
619 700 58 (in ) 59 SB
678 700 97 (this ) 98 SB
776 700 191 (project. ) 193 SB
969 700 15 ( ) 17 SB
986 700 104 (The ) 106 SB
1092 700 176 (project ) 178 SB
1270 700 207 (involves ) 209 SB
1479 700 340 (combinational ) 342 SB
1821 700 128 (logic ) 130 SB
1951 700 149 (design) 149 SB
300 800 662 (and the use of shift registers.) 662 SB
300 1000 717 (1.1 Arithmetic and Logic Units) 717 SB
/fm 256 def
716 2 300 1059 B
1 F
n
450 1100 84 (An ) 86 SB
536 1100 260 (Arithmetic ) 262 SB
798 1100 98 (and ) 101 SB
899 1100 147 (Logic ) 150 SB
1049 1100 116 (Unit ) 119 SB
1168 1100 170 (\(ALU\) ) 173 SB
1341 1100 53 (is ) 56 SB
1397 1100 41 (a ) 44 SB
1441 1100 160 (circuit ) 163 SB
1604 1100 101 (that ) 104 SB
1708 1100 221 (performs ) 224 SB
1932 1100 168 (various) 168 SB
300 1200 1270 (arithmetic and logic operations on two input operands. ) 1271 SB
1571 1200 189 (Typical ) 190 SB
1761 1200 155 (ALUs ) 156 SB
1917 1200 183 (perform) 183 SB
300 1300 160 (binary ) 167 SB
467 1300 255 (operations ) 262 SB
729 1300 120 (such ) 127 SB
856 1300 64 (as ) 71 SB
927 1300 114 (add, ) 121 SB
1048 1300 213 (subtract, ) 220 SB
1268 1300 155 (AND, ) 162 SB
1430 1300 111 (OR, ) 118 SB
1548 1300 154 (XOR; ) 161 SB
1709 1300 144 (unary ) 151 SB
1860 1300 240 (operations) 240 SB
300 1400 120 (such ) 125 SB
425 1400 64 (as ) 69 SB
494 1400 257 (increment, ) 262 SB
756 1400 269 (decrement, ) 274 SB
1030 1400 190 (transfer ) 195 SB
1225 1400 131 (input ) 136 SB
1361 1400 189 (directly ) 194 SB
1555 1400 60 (to ) 66 SB
1621 1400 177 (output; ) 183 SB
1804 1400 98 (and ) 104 SB
1908 1400 192 (constant) 192 SB
300 1500 255 (operations ) 257 SB
557 1500 120 (such ) 122 SB
679 1500 64 (as ) 66 SB
745 1500 161 (output ) 163 SB
908 1500 207 (constant ) 209 SB
1117 1500 44 (0 ) 46 SB
1163 1500 63 (or ) 65 SB
1228 1500 59 (1. ) 61 SB
1289 1500 15 ( ) 17 SB
1306 1500 104 (The ) 106 SB
1412 1500 175 (74181, ) 177 SB
1589 1500 175 (74281, ) 177 SB
1766 1500 98 (and ) 100 SB
1866 1500 160 (74381 ) 163 SB
2029 1500 71 (are) 71 SB
300 1600 231 (examples ) 232 SB
532 1600 62 (of ) 63 SB
595 1600 118 (MSI ) 120 SB
715 1600 155 (ALUs ) 157 SB
872 1600 101 (that ) 103 SB
975 1600 186 (operate ) 188 SB
1163 1600 72 (on ) 74 SB
1237 1600 44 (4 ) 46 SB
1283 1600 75 (bit ) 77 SB
1360 1600 186 (parallel ) 188 SB
1548 1600 127 (data. ) 129 SB
1677 1600 15 ( ) 17 SB
1694 1600 50 (It ) 52 SB
1746 1600 53 (is ) 55 SB
1801 1600 108 (also ) 110 SB
1911 1600 189 (possible) 189 SB
300 1700 60 (to ) 66 SB
366 1700 164 (design ) 171 SB
537 1700 139 (serial ) 146 SB
683 1700 155 (ALUs ) 162 SB
845 1700 81 (for ) 88 SB
933 1700 154 (which ) 161 SB
1094 1700 85 (the ) 92 SB
1186 1700 102 (two ) 109 SB
1295 1700 131 (input ) 138 SB
1433 1700 224 (operands ) 231 SB
1664 1700 98 (and ) 105 SB
1769 1700 85 (the ) 92 SB
1861 1700 161 (output ) 168 SB
2029 1700 71 (are) 71 SB
300 1800 157 (stored ) 161 SB
461 1800 58 (in ) 62 SB
523 1800 115 (shift ) 119 SB
642 1800 210 (registers ) 214 SB
856 1800 98 (and ) 102 SB
958 1800 245 (processed ) 249 SB
1207 1800 98 (one ) 102 SB
1309 1800 75 (bit ) 79 SB
1388 1800 57 (at ) 61 SB
1449 1800 41 (a ) 45 SB
1494 1800 130 (time. ) 134 SB
1628 1800 15 ( ) 19 SB
1647 1800 104 (The ) 108 SB
1755 1800 248 (advantage ) 252 SB
2007 1800 62 (of ) 67 SB
2074 1800 26 (a) 26 SB
300 1900 139 (serial ) 140 SB
440 1900 132 (ALU ) 133 SB
573 1900 53 (is ) 54 SB
627 1900 101 (that ) 102 SB
729 1900 115 (only ) 116 SB
845 1900 98 (one ) 99 SB
944 1900 127 (copy ) 128 SB
1072 1900 62 (of ) 63 SB
1135 1900 85 (the ) 86 SB
1221 1900 207 (circuitry ) 208 SB
1429 1900 81 (for ) 82 SB
1511 1900 98 (one ) 99 SB
1610 1900 132 (ALU ) 133 SB
1743 1900 75 (bit ) 76 SB
1819 1900 53 (is ) 55 SB
1874 1900 179 (needed ) 181 SB
2055 1900 45 (to) 45 SB
300 2000 190 (process ) 194 SB
494 2000 122 (n-bit ) 126 SB
620 2000 127 (data, ) 131 SB
751 2000 149 (rather ) 153 SB
904 2000 113 (than ) 117 SB
1021 2000 43 (n ) 47 SB
1068 2000 163 (copies ) 167 SB
1235 2000 81 (for ) 85 SB
1320 2000 41 (a ) 46 SB
1366 2000 186 (parallel ) 191 SB
1557 2000 148 (ALU; ) 153 SB
1710 2000 85 (the ) 90 SB
1800 2000 300 (disadvantage) 300 SB
300 2100 1235 (is that n clock cycles are required to process the data.) 1235 SB
300 2300 658 (1.1.1 The Serial ALU, Part I) 658 SB
/fm 256 def
657 2 300 2359 B
1 F
n
450 2400 104 (The ) 114 SB
564 2400 271 (assignment ) 281 SB
845 2400 53 (is ) 64 SB
909 2400 60 (to ) 71 SB
980 2400 164 (design ) 175 SB
1155 2400 41 (a ) 52 SB
1207 2400 194 (6-input, ) 205 SB
1412 2400 209 (2-output ) 220 SB
1632 2400 340 (combinational ) 351 SB
1983 2400 117 (ALU) 117 SB
300 2500 160 (circuit ) 167 SB
467 2500 101 (that ) 108 SB
575 2500 239 (processes ) 246 SB
821 2500 102 (two ) 109 SB
930 2500 123 (1-bit ) 130 SB
1060 2500 239 (operands. ) 247 SB
1307 2500 104 (The ) 112 SB
1419 2500 160 (circuit ) 168 SB
1587 2500 167 (should ) 175 SB
1762 2500 123 (have ) 131 SB
1893 2500 102 (two ) 110 SB
2003 2500 97 (data) 97 SB
300 2600 154 (inputs ) 160 SB
460 2600 56 (A ) 62 SB
522 2600 98 (and ) 104 SB
626 2600 68 (B, ) 74 SB
700 2600 41 (a ) 48 SB
748 2600 133 (carry ) 140 SB
888 2600 131 (input ) 138 SB
1026 2600 88 (CI, ) 95 SB
1121 2600 130 (three ) 137 SB
1258 2600 203 (function ) 210 SB
1468 2600 147 (select ) 154 SB
1622 2600 154 (inputs ) 161 SB
1783 2600 90 (F1, ) 97 SB
1880 2600 90 (F2, ) 97 SB
1977 2600 90 (F3, ) 97 SB
2074 2600 26 (a) 26 SB
300 2700 112 (data ) 126 SB
426 2700 161 (output ) 176 SB
602 2700 62 (S, ) 77 SB
679 2700 98 (and ) 113 SB
792 2700 41 (a ) 56 SB
848 2700 133 (carry ) 148 SB
996 2700 161 (output ) 176 SB
1172 2700 111 (CO. ) 126 SB
1298 2700 104 (The ) 119 SB
1417 2700 160 (circuit ) 175 SB
1592 2700 167 (should ) 182 SB
1774 2700 198 (perform ) 213 SB
1987 2700 113 (eight) 113 SB
300 2800 226 (functions ) 230 SB
530 2800 64 (as ) 68 SB
598 2800 165 (shown ) 169 SB
767 2800 58 (in ) 62 SB
829 2800 127 (table ) 131 SB
960 2800 59 (1. ) 64 SB
1024 2800 15 ( ) 20 SB
1044 2800 94 (For ) 99 SB
1143 2800 121 (each ) 126 SB
1269 2800 247 (operation, ) 252 SB
1521 2800 85 (the ) 90 SB
1611 2800 138 (value ) 143 SB
1754 2800 62 (of ) 67 SB
1821 2800 47 (S ) 52 SB
1873 2800 167 (should ) 172 SB
2045 2800 55 (be) 55 SB
300 2900 241 (computed ) 251 SB
551 2900 64 (as ) 74 SB
625 2900 181 (shown; ) 191 SB
816 2900 81 (for ) 91 SB
907 2900 85 (the ) 95 SB
1002 2900 245 (arithmetic ) 255 SB
1257 2900 255 (operations ) 266 SB
1523 2900 276 (\(increment, ) 287 SB
1810 2900 180 (negate, ) 191 SB
2001 2900 99 (add,) 99 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Roman
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 217 (subtract\) ) 218 SB
518 300 85 (the ) 86 SB
604 300 138 (value ) 139 SB
743 300 62 (of ) 64 SB
807 300 96 (CO ) 98 SB
905 300 167 (should ) 169 SB
1074 300 70 (be ) 72 SB
1146 300 241 (computed ) 243 SB
1389 300 64 (as ) 66 SB
1455 300 85 (the ) 87 SB
1542 300 133 (carry ) 135 SB
1677 300 124 (from ) 126 SB
1803 300 85 (the ) 87 SB
1890 300 210 (indicated) 210 SB
300 400 202 (addition.) 202 SB
450 600 180 (F1F2F3) 180 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
630 600 120 (        ) 120 SB
750 600 150 (          ) 150 SB
900 600 230 (Operation) 230 SB
1130 600 75 (     ) 75 SB
1200 600 150 (          ) 150 SB
1350 600 150 (          ) 150 SB
1500 600 137 (Name) 137 SB
0 0 0 fC
/fm 256 def
1186 2 450 659 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 713 177 (0   0   0) 177 SB
900 713 143 (S <- 0) 143 SB
1500 713 125 (Clear) 125 SB
450 813 177 (0   0   1) 177 SB
900 813 164 (S <- A') 164 SB
1500 813 294 (Complement) 294 SB
450 913 177 (0   1   0) 177 SB
900 913 338 (S <- A plus CI) 338 SB
1500 913 231 (Increment) 231 SB
450 1013 177 (0   1   1) 177 SB
900 1013 347 (S <- A' plus CI) 347 SB
1500 1013 164 (Negate) 164 SB
450 1113 177 (1   0   0) 177 SB
900 1113 152 (S <- B) 152 SB
1500 1113 247 (Transfer B) 247 SB
450 1213 222 (1   0   1   ) 222 SB
900 1213 346 (S <- A XOR B) 346 SB
1500 1213 320 (Exclusive OR) 320 SB
450 1313 177 (1   1   0) 177 SB
900 1313 501 (S <- A plus B plus CI) 501 SB
1500 1313 99 (Add) 99 SB
450 1413 177 (1   1   1) 177 SB
900 1413 510 (S <- A plus B' plus CI) 510 SB
1500 1413 192 (Subtract) 192 SB
750 1513 561 (Table 1. ALU Functions) 561 SB
300 1700 683 (1.1.2 The Assignment, Part II) 683 SB
/fm 256 def
682 2 300 1759 B
1 F
n
450 1800 104 (The ) 112 SB
562 1800 132 (ALU ) 140 SB
702 1800 62 (of ) 70 SB
772 1800 105 (part ) 113 SB
885 1800 49 (I, ) 57 SB
942 1800 95 (can ) 104 SB
1046 1800 70 (be ) 79 SB
1125 1800 121 (used ) 130 SB
1255 1800 60 (to ) 69 SB
1324 1800 182 (serially ) 191 SB
1515 1800 190 (process ) 199 SB
1714 1800 224 (operands ) 233 SB
1947 1800 62 (of ) 71 SB
2018 1800 82 (any) 82 SB
300 1900 171 (length. ) 175 SB
475 1900 15 ( ) 19 SB
494 1900 238 (Complete ) 242 SB
736 1900 85 (the ) 89 SB
825 1900 164 (design ) 168 SB
993 1900 62 (of ) 66 SB
1059 1900 85 (the ) 89 SB
1148 1900 174 (system ) 178 SB
1326 1900 58 (in ) 62 SB
1388 1900 162 (Figure ) 166 SB
1554 1900 59 (1, ) 63 SB
1617 1900 154 (which ) 158 SB
1775 1900 115 (uses ) 119 SB
1894 1900 102 (two ) 106 SB
2000 1900 100 (shift) 100 SB
300 2000 210 (registers ) 224 SB
524 2000 60 (to ) 74 SB
598 2000 116 (hold ) 130 SB
728 2000 44 (4 ) 58 SB
786 2000 75 (bit ) 89 SB
875 2000 224 (operands ) 238 SB
1113 2000 56 (A ) 70 SB
1183 2000 98 (and ) 112 SB
1295 2000 68 (B. ) 82 SB
1377 2000 15 ( ) 29 SB
1406 2000 104 (The ) 118 SB
1524 2000 174 (system ) 188 SB
1712 2000 167 (should ) 181 SB
1893 2000 123 (have ) 137 SB
2030 2000 70 (the) 70 SB
300 2100 683 (following inputs and Outputs:) 683 SB
300 2200 255 (F1, F2, F3:) 255 SB
600 2200 1113 (These three signals shall set the desired function) 1113 SB
300 2300 119 (B-In:) 119 SB
600 2300 262 (These four ) 263 SB
863 2300 173 (signals ) 174 SB
1037 2300 243 (determine ) 244 SB
1281 2300 85 (the ) 86 SB
1367 2300 161 (values ) 162 SB
1529 2300 62 (of ) 63 SB
1592 2300 85 (the ) 86 SB
1678 2300 53 (B ) 54 SB
1732 2300 187 (register ) 188 SB
1920 2300 80 (set ) 81 SB
2001 2300 72 (by ) 73 SB
2074 2300 26 (a) 26 SB
600 2400 300 (parallel load.) 300 SB
300 2500 133 (Load:) 133 SB
600 2500 1367 (This signal is used to load B-In into the B register and also ) 1367 SB
600 2600 1393 (should set the carry flip-flop with the proper initial carry for ) 1393 SB
600 2700 1163 (arithmetic operations as determined by F1, F2, F3.) 1163 SB
300 2800 153 (Clock:) 153 SB
600 2800 1436 (This signal controls the shifting of A and B and loading of the ) 1436 SB
600 2900 1438 (carry flip-flop for performing operations. The result should be ) 1438 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
600 300 1408 (contained in A, and B should be restored to its loaded value, ) 1408 SB
600 400 543 (after  four clock pulses.) 543 SB
300 500 191 (A-REG:) 191 SB
600 500 1421 (These four signals should show the contents of the A register.) 1421 SB
300 600 188 (B-REG:) 188 SB
600 600 1418 (These four signals should show the contents of the B register.) 1418 SB
300 700 54 (C:) 54 SB
600 700 1344 (This signal should show the contents of the carry flip-flop.) 1344 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 403 def /pp_bx2 378 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1575 1621 412 967 CB
1574 1620 412 967 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\ALU1.EPS
%%Title: 
%%CreationDate: Tue Mar 16 1993 6:39:34 PM
%%BoundingBox: 0 403 378 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
75 75 M 0 -149 599 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
75 375 M 0 -149 599 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
525 675 M 0 -148 149 0 0 148 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
824 75 M 0 -748 599 0 0 748 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
525 974 M 0 -299 598 0 0 299 3 D
0 p
10 1 1 lc lj ml
675 150 M 0 0 149 0 2 D
S
796 136 M 0 -28 -28 14 28 14 3 D
0 2 p
1424 225 M 75 0 0 150 -1574 0 0 -225 150 0 5 D
S
47 136 M 0 -28 -28 14 28 14 3 D
0 2 p
675 450 M 0 0 149 0 2 D
S
796 436 M 0 -27 -28 13 28 14 3 D
0 2 p
750 450 M 75 0 0 150 -750 0 0 -150 4 D
S
47 436 M 0 -27 -28 13 28 14 3 D
0 2 p
600 974 M 0 0 0 -150 2 D
S
587 852 M -27 0 14 28 13 -28 3 D
0 2 p
675 750 M 0 0 149 0 2 D
S
796 736 M 0 -28 -28 14 28 14 3 D
0 2 p
974 824 M 0 0 0 150 2 D
S
988 946 M 28 0 -14 -28 -14 28 3 D
0 2 p
18 w
10433 1000 div ml
375 1424 M 0 -600 899 0 2 D
S
1 w
1251 843 M -46 0 23 42 23 -42 3 D
0 2 p
18 w
824 1424 M 0 0 0 -150 2 D
S
1 w
801 1293 M -46 0 23 42 23 -42 3 D
0 2 p
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (ALU)0 52 0 0 0 0 98 0 1066 375 sb
0 (CONTROL)0 52 0 0 0 0 225 0 690 1106 sb
0 (Carry)0 52 0 0 0 0 108 0 535 731 sb
0 (A)0 52 0 0 0 0 35 0 355 75 sb
0 (4 bit shift register   )0 52 0 0 0 0 376 0 172 144 sb
0 (B)0 52 0 0 0 0 32 0 357 375 sb
0 (4 bit shift register    )0 52 0 0 0 0 388 0 172 443 sb
0 (Cout   )0 52 0 0 0 0 130 0 919 768 sb
0 (F1F2F3  )0 52 0 0 0 0 175 0 1184 768 sb
0 (  )0 52 0 0 0 0 25 0 1274 837 sb
0 (A  )0 52 0 0 0 0 59 0 862 75 sb
0 (B)0 52 0 0 0 0 32 0 862 394 sb
0 (Cin  )0 52 0 0 0 0 94 0 862 693 sb
0 (S  )0 52 0 0 0 0 51 0 1355 169 sb
0 (Switches  )0 52 0 0 0 0 197 0 147 1368 sb
0 (Figure 1. ALU Block Diagram    )0 52 0 0 0 0 638 0 436 1555 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 715 (1.2 The VHDL Solution, Part I) 715 SB
0 0 0 fC
/fm 256 def
714 2 300 359 B
1 F
n
450 400 318 (Representing ) 332 SB
782 400 69 (an ) 83 SB
865 400 260 (Arithmetic ) 274 SB
1139 400 98 (and ) 112 SB
1251 400 147 (Logic ) 161 SB
1412 400 116 (Unit ) 131 SB
1543 400 58 (in ) 73 SB
1616 400 174 (VHDL ) 189 SB
1805 400 53 (is ) 68 SB
1873 400 41 (a ) 56 SB
1929 400 171 (straight) 171 SB
300 500 197 (forward ) 206 SB
506 500 124 (task. ) 133 SB
639 500 15 ( ) 24 SB
663 500 104 (The ) 113 SB
776 500 125 (code ) 134 SB
910 500 53 (is ) 62 SB
972 500 41 (a ) 50 SB
1022 500 186 (straight ) 195 SB
1217 500 197 (forward ) 206 SB
1423 500 370 (implementation ) 379 SB
1802 500 62 (of ) 71 SB
1873 500 85 (the ) 95 SB
1968 500 132 (ALU.) 132 SB
300 600 104 (The ) 115 SB
415 600 226 (functions ) 237 SB
652 600 86 (are ) 97 SB
749 600 311 (implemented ) 322 SB
1071 600 72 (by ) 83 SB
1154 600 137 (using ) 148 SB
1302 600 41 (a ) 52 SB
1354 600 116 (case ) 128 SB
1482 600 235 (statement ) 247 SB
1729 600 148 (based ) 160 SB
1889 600 129 (upon ) 141 SB
2030 600 70 (the) 70 SB
300 700 504 (function select inputs.) 504 SB
300 900 822 (1.2.1 The ALU Part I VHDL Entity) 822 SB
/fm 256 def
821 2 300 959 B
1 F
n
450 1000 104 (The ) 108 SB
558 1000 164 (ALU's ) 168 SB
726 1000 215 (interface ) 219 SB
945 1000 53 (is ) 58 SB
1003 1000 311 (implemented ) 316 SB
1319 1000 64 (as ) 69 SB
1388 1000 186 (defined ) 191 SB
1579 1000 168 (above. ) 173 SB
1752 1000 15 ( ) 20 SB
1772 1000 104 (The ) 109 SB
1881 1000 219 (following) 219 SB
300 1100 478 (code is the interface:) 478 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 1267 375 (ENTITY alu_1 IS) 375 SB
300 1312 1275 (  PORT\(opcode       : IN    bit_vector\(2 DOWNTO 0\);) 1275 SB
300 1357 800 (       a            : IN    bit;) 800 SB
300 1402 800 (       b            : IN    bit;) 800 SB
300 1447 800 (       cin          : IN    bit;) 800 SB
300 1492 800 (       clock        : IN    bit;) 800 SB
300 1537 800 (       s            : OUT   bit;) 800 SB
300 1582 825 (       cout         : OUT   bit\);) 825 SB
300 1627 250 (END alu_1;) 250 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
826 1705 747 (Listing 1. ALU Entity Statement) 747 SB
300 1905 970 (1.2.2 The ALU Part I VHDL Architecture) 970 SB
/fm 256 def
969 2 300 1964 B
1 F
n
450 2005 104 (The ) 114 SB
564 2005 247 (Following ) 257 SB
821 2005 125 (code ) 135 SB
956 2005 53 (is ) 63 SB
1019 2005 85 (the ) 95 SB
1114 2005 174 (VHDL ) 184 SB
1298 2005 286 (architecture ) 297 SB
1595 2005 198 (solution ) 209 SB
1804 2005 81 (for ) 92 SB
1896 2005 85 (the ) 96 SB
1992 2005 108 (1-bit) 108 SB
300 2105 132 (ALU:) 132 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2272 925 (ARCHITECTURE behave_alu_1 OF alu_1 IS) 925 SB
300 2362 425 (BEGIN  --  behave) 425 SB
300 2407 225 (  PROCESS) 225 SB
300 2452 225 (    BEGIN) 225 SB
300 2497 1075 (      WAIT UNTIL clock'EVENT and clock='1';) 1075 SB
300 2542 500 (      CASE opcode IS) 500 SB
300 2587 1450 (        WHEN "000" =>                    --  clear, s <= 0) 1450 SB
300 2632 475 (          s <= '0';) 475 SB
300 2677 1600 (        WHEN "001" =>                    --  compliment, s <= a') 1600 SB
300 2722 550 (          s <= NOT\(a\);) 550 SB
300 2767 1650 (        WHEN "010" =>                    --  increment, s <= a+cin) 1650 SB
300 2812 625 (          s <= a XOR cin;) 625 SB
300 2857 700 (          cout <= a AND cin;) 700 SB
300 2902 1650 (        WHEN "011" =>                    --  negate, s <= a' + cin) 1650 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 750 (          s <= NOT\(a XOR cin\);) 750 SB
300 312 875 (          cout <= \(NOT\(a\)\) AND cin;) 875 SB
300 357 1575 (        WHEN "100" =>                    --  transfer b, s <= b) 1575 SB
300 402 425 (          s <= b;) 425 SB
300 447 1425 (        WHEN "101" =>                    --  XOR, a XOR b) 1425 SB
300 492 575 (          s <= a XOR b;) 575 SB
300 537 1525 (        WHEN "110" =>                    --  Add, a + b + cin) 1525 SB
300 582 825 (          s <= \(a XOR b\) XOR cin;) 825 SB
300 627 1325 (          cout <= \(a AND cin\) OR \(b AND \(a XOR cin\)\);) 1325 SB
300 672 1675 (        WHEN "111" =>                    --  Subtract, a + b' + cin) 1675 SB
300 717 950 (          s <= a XOR \(NOT\(b\)\) XOR cin;) 950 SB
300 762 1500 (          cout <= \(a AND cin\) OR \(\(NOT\(b\)\) AND \(a XOR cin\)\);) 1500 SB
300 807 550 (        WHEN OTHERS =>) 550 SB
300 852 1275 (      END CASE;                          --  opcode) 1275 SB
300 897 350 (  END PROCESS;) 350 SB
300 942 425 (END behave_alu_1;) 425 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
874 1020 651 (Listing 2. ALU Architecture) 651 SB
450 1220 104 (The ) 120 SB
570 1220 132 (ALU ) 148 SB
718 1220 286 (architecture ) 302 SB
1020 1220 53 (is ) 69 SB
1089 1220 311 (implemented ) 328 SB
1417 1220 64 (as ) 81 SB
1498 1220 41 (a ) 58 SB
1556 1220 174 (VHDL ) 191 SB
1747 1220 116 (case ) 133 SB
1880 1220 220 (statement) 220 SB
300 1320 1750 (sensitive to the function selects.  This interface is not purely combinational, ) 1751 SB
2051 1320 49 (as) 49 SB
300 1420 85 (the ) 89 SB
389 1420 145 (entire ) 149 SB
538 1420 190 (process ) 194 SB
732 1420 53 (is ) 57 SB
789 1420 215 (sensitive ) 219 SB
1008 1420 60 (to ) 64 SB
1072 1420 85 (the ) 89 SB
1161 1420 155 (clock. ) 159 SB
1320 1420 15 ( ) 19 SB
1339 1420 116 (This ) 120 SB
1459 1420 125 (code ) 129 SB
1588 1420 53 (is ) 57 SB
1645 1420 143 (going ) 147 SB
1792 1420 60 (to ) 64 SB
1856 1420 70 (be ) 75 SB
1931 1420 121 (used ) 126 SB
2057 1420 43 (in) 43 SB
300 1520 85 (the ) 106 SB
406 1520 113 (next ) 134 SB
540 1520 178 (section ) 199 SB
739 1520 60 (to ) 81 SB
820 1520 256 (implement ) 277 SB
1097 1520 41 (a ) 62 SB
1159 1520 109 (four ) 130 SB
1289 1520 75 (bit ) 97 SB
1386 1520 147 (ALU. ) 169 SB
1555 1520 15 ( ) 37 SB
1592 1520 116 (This ) 138 SB
1730 1520 125 (code ) 147 SB
1877 1520 92 (has ) 114 SB
1991 1520 109 (been) 109 SB
300 1620 283 (synthesized ) 284 SB
584 1620 103 (into ) 104 SB
688 1620 100 (LSI ) 102 SB
790 1620 147 (Logic ) 149 SB
939 1620 143 (100K ) 145 SB
1084 1620 146 (ASIC ) 148 SB
1232 1620 244 (primitives ) 246 SB
1478 1620 137 (using ) 139 SB
1617 1620 85 (the ) 87 SB
1704 1620 235 (Synopsys ) 237 SB
1941 1620 159 (VHDL) 159 SB
300 1720 1157 (Synthesis tool.  This code appears in Appendix G.) 1157 SB
300 1920 762 (1.2.3 The ALU Part I Test bench) 762 SB
0 0 0 fC
/fm 256 def
761 2 300 1979 B
1 F
n
450 2020 79 (To ) 82 SB
532 2020 96 (test ) 99 SB
631 2020 85 (the ) 88 SB
719 2020 106 (first ) 109 SB
828 2020 147 (ALU, ) 150 SB
978 2020 83 (we ) 86 SB
1064 2020 95 (can ) 98 SB
1162 2020 148 (easily ) 151 SB
1313 2020 109 (step ) 112 SB
1425 2020 191 (through ) 194 SB
1619 2020 71 (all ) 74 SB
1693 2020 85 (the ) 88 SB
1781 2020 177 (sixteen ) 180 SB
1961 2020 139 (cases.) 139 SB
300 2120 747 (This is shown below in listing 3.) 747 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2287 1800 (------------------------------------------------------------------------) 1800 SB
300 2332 175 (-------) 175 SB
300 2377 950 (--  EE126 Project #1, part I Testbench) 950 SB
300 2422 475 (--  by: Frank Bruno) 475 SB
300 2467 1800 (------------------------------------------------------------------------) 1800 SB
300 2512 175 (-------) 175 SB
300 2602 500 (ENTITY test_alu_1 IS) 500 SB
300 2692 375 (END test_alu_1;) 375 SB
300 2782 925 (ARCHITECTURE b_alu_1 OF test_alu_1 IS) 925 SB
300 2827 425 (  COMPONENT alu_1) 425 SB
300 2872 1275 (  PORT\(opcode       : IN    bit_vector\(2 DOWNTO 0\);) 1275 SB
300 2917 800 (       a            : IN    bit;) 800 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 800 (       b            : IN    bit;) 800 SB
300 312 800 (       cin          : IN    bit;) 800 SB
300 357 800 (       clock        : IN    bit;) 800 SB
300 402 800 (       s            : OUT   bit;) 800 SB
300 447 825 (       cout         : OUT   bit\);) 825 SB
300 492 400 (  END COMPONENT;) 400 SB
300 582 1025 (  SIGNAL opcode : bit_vector\(2 DOWNTO 0\);) 1025 SB
300 627 425 (  SIGNAL a : bit;) 425 SB
300 672 425 (  SIGNAL b : bit;) 425 SB
300 717 475 (  SIGNAL cin : bit;) 475 SB
300 762 425 (  SIGNAL s : bit;) 425 SB
300 807 500 (  SIGNAL cout : bit;) 500 SB
300 852 525 (  SIGNAL clock : bit;) 525 SB
300 897 450 (BEGIN  --  b_alu_1) 450 SB
300 942 275 (  u1: alu_1) 275 SB
300 987 700 (  PORT MAP\(opcode => opcode,) 700 SB
300 1032 450 (           a => a,) 450 SB
300 1077 450 (           b => b,) 450 SB
300 1122 550 (           cin => cin,) 550 SB
300 1167 650 (           clock => clock,) 650 SB
300 1212 450 (           s => s,) 450 SB
300 1257 625 (           cout => cout\);) 625 SB
300 1347 250 (clock_gen:) 250 SB
300 1392 175 (PROCESS) 175 SB
300 1437 175 (  BEGIN) 175 SB
300 1482 725 (    clock <= '0' AFTER 40 ns;) 725 SB
300 1527 475 (    WAIT FOR 40 ns;) 475 SB
300 1572 725 (    clock <= '1' AFTER 40 ns;) 725 SB
300 1617 475 (    WAIT FOR 40 ns;) 475 SB
300 1662 300 (END PROCESS;) 300 SB
300 1752 175 (PROCESS) 175 SB
300 1797 800 (  VARIABLE state : integer := 0;) 800 SB
300 1842 650 (  VARIABLE jump : integer;) 650 SB
300 1887 175 (  BEGIN) 175 SB
300 1932 1050 (    WAIT UNTIL clock'EVENT AND clock ='1';) 1050 SB
300 1977 425 (    CASE state IS) 425 SB
300 2022 375 (      WHEN 0 =>) 375 SB
300 2067 425 (        a <= '0';) 425 SB
300 2112 425 (        b <= '0';) 425 SB
300 2157 475 (        cin <= '0';) 475 SB
300 2202 450 (        jump := 1;) 450 SB
300 2247 475 (        state := 1;) 475 SB
300 2292 375 (      WHEN 1 =>) 375 SB
300 2337 600 (        opcode <= "000";) 600 SB
300 2382 475 (        state := 2;) 475 SB
300 2427 375 (      WHEN 2 =>) 375 SB
300 2472 600 (        opcode <= "001";) 600 SB
300 2517 475 (        state := 3;) 475 SB
300 2562 375 (      WHEN 3 =>) 375 SB
300 2607 600 (        opcode <= "010";) 600 SB
300 2652 475 (        state := 4;) 475 SB
300 2697 375 (      WHEN 4 =>) 375 SB
300 2742 600 (        opcode <= "011";) 600 SB
300 2787 475 (        state := 5;) 475 SB
300 2832 375 (      WHEN 5 =>) 375 SB
300 2877 600 (        opcode <= "100";) 600 SB
300 2922 475 (        state := 6;) 475 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 375 (      WHEN 6 =>) 375 SB
300 312 600 (        opcode <= "101";) 600 SB
300 357 475 (        state := 7;) 475 SB
300 402 375 (      WHEN 7 =>) 375 SB
300 447 600 (        opcode <= "110";) 600 SB
300 492 475 (        state := 8;) 475 SB
300 537 375 (      WHEN 8 =>) 375 SB
300 582 600 (        opcode <= "111";) 600 SB
300 627 700 (        state := \(8 + jump\);) 700 SB
300 672 375 (      WHEN 9 =>) 375 SB
300 717 425 (        a <= '0';) 425 SB
300 762 425 (        b <= '0';) 425 SB
300 807 500 (        cin  <= '1';) 500 SB
300 852 450 (        jump := 2;) 450 SB
300 897 475 (        state := 1;) 475 SB
300 942 400 (      WHEN 10 =>) 400 SB
300 987 425 (        a <= '0';) 425 SB
300 1032 425 (        b <= '1';) 425 SB
300 1077 475 (        cin <= '0';) 475 SB
300 1122 450 (        jump := 3;) 450 SB
300 1167 475 (        state := 1;) 475 SB
300 1212 400 (      WHEN 11 =>) 400 SB
300 1257 475 (        cin <= '1';) 475 SB
300 1302 450 (        jump := 4;) 450 SB
300 1347 475 (        state := 1;) 475 SB
300 1392 400 (      WHEN 12 =>) 400 SB
300 1437 425 (        a <= '1';) 425 SB
300 1482 425 (        b <= '0';) 425 SB
300 1527 475 (        cin <= '0';) 475 SB
300 1572 450 (        jump := 5;) 450 SB
300 1617 475 (        state := 1;) 475 SB
300 1662 400 (      WHEN 13 =>) 400 SB
300 1707 475 (        cin <= '1';) 475 SB
300 1752 450 (        jump := 6;) 450 SB
300 1797 475 (        state := 1;) 475 SB
300 1842 400 (      WHEN 15 =>) 400 SB
300 1887 425 (        b <= '1';) 425 SB
300 1932 475 (        cin <= '0';) 475 SB
300 1977 450 (        jump := 7;) 450 SB
300 2022 475 (        state := 1;) 475 SB
300 2067 400 (      WHEN 16 =>) 400 SB
300 2112 475 (        cin <= '1';) 475 SB
300 2157 450 (        jump := 8;) 450 SB
300 2202 475 (        state := 1;) 475 SB
300 2292 500 (      WHEN OTHERS =>) 500 SB
300 2337 325 (    END CASE;) 325 SB
300 2382 300 (END PROCESS;) 300 SB
300 2427 300 (END b_alu_1;) 300 SB
300 2517 950 (CONFIGURATION config1 OF test_alu_1 IS) 950 SB
300 2562 275 (FOR b_alu_1) 275 SB
300 2607 375 (  FOR u1: alu_1) 375 SB
300 2652 650 (    USE ENTITY work.alu_1;) 650 SB
300 2697 250 (  END FOR;) 250 SB
300 2742 200 (END FOR;) 200 SB
300 2787 300 (END config1;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
874 2865 651 (Listing 3. ALU I Test bench) 651 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 779 (1.3 The VHDL Solution to Part II) 779 SB
0 0 0 fC
/fm 256 def
778 2 300 359 B
1 F
n
450 400 151 (Using ) 161 SB
611 400 85 (the ) 95 SB
706 400 132 (ALU ) 143 SB
849 400 187 (derived ) 198 SB
1047 400 58 (in ) 69 SB
1116 400 105 (part ) 116 SB
1232 400 49 (I, ) 60 SB
1292 400 46 (it ) 57 SB
1349 400 53 (is ) 64 SB
1413 400 204 (possible ) 215 SB
1628 400 60 (to ) 71 SB
1699 400 154 (create ) 165 SB
1864 400 41 (a ) 52 SB
1916 400 184 (variable) 184 SB
300 500 156 (length ) 171 SB
471 500 132 (ALU ) 147 SB
618 500 72 (by ) 87 SB
705 500 137 (using ) 152 SB
857 500 102 (two ) 117 SB
974 500 115 (shift ) 130 SB
1104 500 210 (registers ) 225 SB
1329 500 98 (and ) 113 SB
1442 500 177 (control ) 192 SB
1634 500 143 (logic. ) 158 SB
1792 500 15 ( ) 30 SB
1822 500 104 (The ) 119 SB
1941 500 159 (VHDL) 159 SB
300 600 556 (implementation follows.) 556 SB
300 800 841 (1.3.1 The ALU Part II VHDL Entity) 841 SB
/fm 256 def
840 2 300 859 B
1 F
n
450 900 1399 (The VHDL entity statement for the 4 bit serial ALU follows:) 1399 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 1067 375 (ENTITY alu_2 IS) 375 SB
300 1112 1300 (  PORT\(op code       : IN    bit_vector\(2 DOWNTO 0\);) 1300 SB
300 1157 1275 (       bin          : IN    bit_vector\(3 DOWNTO 0\);) 1275 SB
300 1202 800 (       load         : IN    bit;) 800 SB
300 1247 800 (       clock        : IN    bit;) 800 SB
300 1292 1350 (       areg         : BUFFER   bit_vector\(3 DOWNTO 0\);) 1350 SB
300 1337 1350 (       breg         : BUFFER   bit_vector\(3 DOWNTO 0\);) 1350 SB
300 1382 900 (       carry        : BUFFER   bit\);) 900 SB
300 1427 250 (END alu_2;) 250 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
800 1505 800 (Listing 4. ALU II Entity Statement) 800 SB
300 1705 989 (1.3.2 The ALU Part II VHDL Architecture) 989 SB
/fm 256 def
988 2 300 1764 B
1 F
n
450 1805 104 (The ) 105 SB
555 1805 174 (VHDL ) 175 SB
730 1805 286 (architecture ) 287 SB
1017 1805 53 (is ) 54 SB
1071 1805 148 (based ) 149 SB
1220 1805 129 (upon ) 130 SB
1350 1805 85 (the ) 86 SB
1436 1805 132 (ALU ) 133 SB
1569 1805 105 (part ) 106 SB
1675 1805 34 (I ) 35 SB
1710 1805 168 (above. ) 169 SB
1879 1805 15 ( ) 16 SB
1895 1805 165 (Below ) 167 SB
2062 1805 38 (is) 38 SB
300 1905 536 (the actual VHDL code:) 536 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2017 925 (ARCHITECTURE behave_alu_2 OF alu_2 IS) 925 SB
300 2107 575 (BEGIN  --  behave_alu_2) 575 SB
300 2197 225 (  PROCESS) 225 SB
300 2242 525 (    VARIABLE a : bit;) 525 SB
300 2287 525 (    VARIABLE b : bit;) 525 SB
300 2332 575 (    VARIABLE cin : bit;) 575 SB
300 2377 525 (    VARIABLE s : bit;) 525 SB
300 2422 600 (    VARIABLE cout : bit;) 600 SB
300 2512 550 (    BEGIN  --  PROCESS) 550 SB
300 2557 1075 (    WAIT UNTIL clock'EVENT and clock = '1';) 1075 SB
300 2602 600 (    IF \(load = '1'\) THEN) 600 SB
300 2647 450 (      breg <= bin;) 450 SB
300 2692 525 (      areg <= "0000";) 525 SB
300 2737 200 (    ELSE) 200 SB
300 2782 475 (      a := areg\(0\);) 475 SB
300 2827 625 (      areg\(0\) <= areg\(1\);) 625 SB
300 2872 625 (      areg\(1\) <= areg\(2\);) 625 SB
300 2917 625 (      areg\(2\) <= areg\(3\);) 625 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 475 (      b := breg\(0\);) 475 SB
300 312 625 (      breg\(0\) <= breg\(1\);) 625 SB
300 357 625 (      breg\(1\) <= breg\(2\);) 625 SB
300 402 625 (      breg\(2\) <= breg\(3\);) 625 SB
300 447 475 (      breg\(3\) <= b;) 475 SB
300 492 475 (      cin := carry;) 475 SB
300 537 450 (    CASE opcode IS) 450 SB
300 582 1400 (      WHEN "000" =>                    --  clear, s <= 0) 1400 SB
300 627 425 (        s := '0';) 425 SB
300 672 1550 (      WHEN "001" =>                    --  compliment, s <= a') 1550 SB
300 717 500 (        s := NOT\(a\);) 500 SB
300 762 1600 (      WHEN "010" =>                    --  increment, s <= a+cin) 1600 SB
300 807 575 (        s := a XOR cin;) 575 SB
300 852 650 (        cout := a AND cin;) 650 SB
300 897 1600 (      WHEN "011" =>                    --  negate, s <= a' + cin) 1600 SB
300 942 700 (        s := NOT\(a XOR cin\);) 700 SB
300 987 825 (        cout := \(NOT\(a\)\) AND cin;) 825 SB
300 1032 1525 (      WHEN "100" =>                    --  transfer b, s <= b) 1525 SB
300 1077 375 (        s := b;) 375 SB
300 1122 1375 (      WHEN "101" =>                    --  XOR, a XOR b) 1375 SB
300 1167 525 (        s := a XOR b;) 525 SB
300 1212 1475 (      WHEN "110" =>                    --  Add, a + b + cin) 1475 SB
300 1257 775 (        s := \(a XOR b\) XOR cin;) 775 SB
300 1302 1275 (        cout := \(a AND cin\) OR \(b AND \(a XOR cin\)\);) 1275 SB
300 1347 1625 (      WHEN "111" =>                    --  Subtract, a + b' + cin) 1625 SB
300 1392 900 (        s := a XOR \(NOT\(b\)\) XOR cin;) 900 SB
300 1437 1450 (        cout := \(a AND cin\) OR \(\(NOT\(b\)\) AND \(a XOR cin\)\);) 1450 SB
300 1482 500 (      WHEN OTHERS =>) 500 SB
300 1527 1225 (    END CASE;                          --  opcode) 1225 SB
300 1572 425 (    areg\(3\) <= s;) 425 SB
300 1617 450 (    carry <= cout;) 450 SB
300 1662 275 (    END IF;) 275 SB
300 1707 350 (  END PROCESS;) 350 SB
300 1797 425 (END behave_alu_2;) 425 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
848 1875 704 (Listing 5. ALU II Architecture) 704 SB
450 2075 104 (The ) 105 SB
555 2075 153 (above ) 154 SB
709 2075 125 (code ) 126 SB
835 2075 279 (implements ) 280 SB
1115 2075 85 (the ) 86 SB
1201 2075 132 (ALU ) 133 SB
1334 2075 98 (and ) 100 SB
1434 2075 53 (is ) 55 SB
1489 2075 148 (based ) 150 SB
1639 2075 129 (upon ) 131 SB
1770 2075 85 (the ) 87 SB
1857 2075 132 (ALU ) 134 SB
1991 2075 109 (from) 109 SB
300 2175 105 (part ) 119 SB
419 2175 49 (I. ) 64 SB
483 2175 15 ( ) 30 SB
513 2175 50 (It ) 65 SB
578 2175 106 (was ) 121 SB
699 2175 195 (decided ) 210 SB
909 2175 101 (that ) 116 SB
1025 2175 58 (in ) 73 SB
1098 2175 41 (a ) 56 SB
1154 2175 166 (simple ) 181 SB
1335 2175 116 (case ) 131 SB
1466 2175 120 (such ) 135 SB
1601 2175 64 (as ) 79 SB
1680 2175 97 (this ) 112 SB
1792 2175 101 (that ) 116 SB
1908 2175 34 (I ) 49 SB
1957 2175 143 (would) 143 SB
300 2275 1234 (implement the ALU as a flat model, no structure to it.) 1234 SB
300 2475 955 (1.3.3 The ALU Part II VHDL Test bench) 955 SB
0 0 0 fC
/fm 256 def
954 2 300 2534 B
1 F
n
450 2575 321 (It was shown ) 322 SB
772 2575 58 (in ) 59 SB
831 2575 105 (part ) 106 SB
937 2575 34 (I ) 35 SB
972 2575 101 (that ) 102 SB
1074 2575 85 (the ) 86 SB
1160 2575 134 (basic ) 135 SB
1295 2575 132 (ALU ) 133 SB
1428 2575 189 (worked ) 190 SB
1618 2575 224 (properly. ) 225 SB
1843 2575 15 ( ) 16 SB
1859 2575 241 (Therefore,) 241 SB
300 2675 1158 (to test this ALU, we will try a couple of operands.) 1158 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1800 (------------------------------------------------------------------------) 1800 SB
300 312 175 (-------) 175 SB
300 357 975 (--  EE126 Project #1, part II Testbench) 975 SB
300 402 475 (--  by: Frank Bruno) 475 SB
300 447 1800 (------------------------------------------------------------------------) 1800 SB
300 492 175 (-------) 175 SB
300 582 500 (ENTITY test_alu_2 IS) 500 SB
300 672 375 (END test_alu_2;) 375 SB
300 762 925 (ARCHITECTURE b_alu_2 OF test_alu_2 IS) 925 SB
300 807 425 (  COMPONENT alu_2) 425 SB
300 852 1325 (    PORT\(opcode       : IN    bit_vector\(2 DOWNTO 0\);) 1325 SB
300 897 1325 (         bin          : IN    bit_vector\(3 DOWNTO 0\);) 1325 SB
300 942 850 (         load         : IN    bit;) 850 SB
300 987 850 (         clock        : IN    bit;) 850 SB
300 1032 1400 (         areg         : BUFFER   bit_vector\(3 DOWNTO 0\);) 1400 SB
300 1077 1400 (         breg         : BUFFER   bit_vector\(3 DOWNTO 0\);) 1400 SB
300 1122 950 (         carry        : BUFFER   bit\);) 950 SB
300 1167 400 (  END COMPONENT;) 400 SB
300 1212 1025 (  SIGNAL opcode : bit_vector\(2 DOWNTO 0\);) 1025 SB
300 1257 950 (  SIGNAL bin : bit_vector\(3 DOWNTO 0\);) 950 SB
300 1302 500 (  SIGNAL load : bit;) 500 SB
300 1347 975 (  SIGNAL areg : bit_vector\(3 DOWNTO 0\);) 975 SB
300 1392 975 (  SIGNAL breg : bit_vector\(3 DOWNTO 0\);) 975 SB
300 1437 525 (  SIGNAL clock : bit;) 525 SB
300 1482 525 (  SIGNAL carry : bit;) 525 SB
300 1527 450 (BEGIN  --  b_alu_2) 450 SB
300 1572 275 (  u1: alu_2) 275 SB
300 1617 700 (  PORT MAP\(opcode => opcode,) 700 SB
300 1662 550 (           bin => bin,) 550 SB
300 1707 600 (           load => load,) 600 SB
300 1752 650 (           clock => clock,) 650 SB
300 1797 600 (           areg => areg,) 600 SB
300 1842 600 (           breg => breg,) 600 SB
450 1887 475 (   carry => carry\);) 475 SB
300 1977 250 (clock_gen:) 250 SB
300 2022 175 (PROCESS) 175 SB
300 2067 175 (  BEGIN) 175 SB
300 2112 725 (    clock <= '0' AFTER 40 ns;) 725 SB
300 2157 475 (    WAIT FOR 40 ns;) 475 SB
300 2202 725 (    clock <= '1' AFTER 40 ns;) 725 SB
300 2247 475 (    WAIT FOR 40 ns;) 475 SB
300 2292 300 (END PROCESS;) 300 SB
300 2382 175 (PROCESS) 175 SB
300 2427 800 (  VARIABLE state : integer := 0;) 800 SB
300 2472 175 (  BEGIN) 175 SB
300 2517 1050 (    WAIT UNTIL clock'EVENT AND clock ='1';) 1050 SB
300 2562 425 (    CASE state IS) 425 SB
300 2607 375 (      WHEN 0 =>) 375 SB
450 2652 300 (load <= '1';) 300 SB
450 2697 350 (bin <= "1010";) 350 SB
300 2742 600 (        opcode <= "000";) 600 SB
300 2787 475 (        state := 1;) 475 SB
300 2832 375 (      WHEN 1 =>) 375 SB
450 2877 300 (load <= '0';) 300 SB
300 2922 475 (        state := 2;) 475 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 11 11
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 375 (      WHEN 2 =>) 375 SB
300 312 475 (        state := 3;) 475 SB
300 357 375 (      WHEN 3 =>) 375 SB
300 402 475 (        state := 4;) 475 SB
300 447 375 (      WHEN 4 =>) 375 SB
300 492 475 (        state := 5;) 475 SB
300 537 375 (      WHEN 5 =>) 375 SB
300 582 600 (        opcode <= "110";) 600 SB
300 627 475 (        state := 6;) 475 SB
300 672 500 (      WHEN OTHERS =>) 500 SB
300 717 325 (    END CASE;) 325 SB
300 762 300 (END PROCESS;) 300 SB
300 852 300 (END b_alu_2;) 300 SB
300 942 950 (CONFIGURATION config2 OF test_alu_2 IS) 950 SB
300 987 275 (FOR b_alu_2) 275 SB
300 1032 375 (  FOR u1: alu_2) 375 SB
300 1077 650 (    USE ENTITY work.alu_2;) 650 SB
300 1122 250 (  END FOR;) 250 SB
300 1167 200 (END FOR;) 200 SB
300 1212 300 (END config2;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
872 1290 655 (Listing 6. ALU II Testbench) 655 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 12 12
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 1128 (CHAPTER 2. SERIAL BINARY MULTIPLIER) 1128 SB
0 0 0 fC
/fm 256 def
1127 2 300 359 B
1 F
n
300 400 869 (2.0 Serial Binary Multiplier Summary) 869 SB
/fm 256 def
868 2 300 459 B
1 F
n
450 500 116 (This ) 127 SB
577 500 176 (project ) 187 SB
764 500 200 (requires ) 211 SB
975 500 85 (the ) 96 SB
1071 500 164 (design ) 175 SB
1246 500 62 (of ) 73 SB
1319 500 41 (a ) 52 SB
1371 500 109 (four ) 121 SB
1492 500 75 (bit ) 87 SB
1579 500 236 (multiplier ) 248 SB
1827 500 137 (using ) 149 SB
1976 500 124 (serial) 124 SB
300 600 1728 (techniques.  It provides exposure to shift registers and control logic design.) 1728 SB
300 800 1025 (2.1 The Serial Binary Multiplier Assignment) 1025 SB
/fm 256 def
1024 2 300 859 B
1 F
n
450 900 116 (This ) 117 SB
567 900 176 (project ) 177 SB
744 900 53 (is ) 54 SB
798 900 60 (to ) 61 SB
859 900 164 (design ) 165 SB
1024 900 26 (a) 26 SB
1050 900 15 ( ) 16 SB
1066 900 139 (serial ) 140 SB
1206 900 236 (multiplier ) 237 SB
1443 900 60 (to ) 61 SB
1504 900 124 (form ) 126 SB
1630 900 85 (the ) 87 SB
1717 900 128 (eight ) 130 SB
1847 900 75 (bit ) 77 SB
1924 900 176 (product) 176 SB
300 1000 62 (of ) 82 SB
382 1000 102 (two ) 122 SB
504 1000 109 (four ) 129 SB
633 1000 75 (bit ) 95 SB
728 1000 239 (operands. ) 259 SB
987 1000 15 ( ) 36 SB
1023 1000 106 (Use ) 127 SB
1150 1000 69 (an ) 90 SB
1240 1000 366 ("add-and-shift" ) 387 SB
1627 1000 234 (algorithm ) 255 SB
1882 1000 58 (in ) 79 SB
1961 1000 139 (which) 139 SB
300 1100 243 (individual ) 250 SB
550 1100 109 (four ) 116 SB
666 1100 75 (bit ) 82 SB
748 1100 225 (additions ) 232 SB
980 1100 86 (are ) 93 SB
1073 1100 253 (performed ) 260 SB
1333 1100 197 (serially. ) 204 SB
1537 1100 104 (The ) 112 SB
1649 1100 160 (circuit ) 168 SB
1817 1100 167 (should ) 175 SB
1992 1100 108 (have) 108 SB
300 1200 755 (the following inputs and outputs:) 755 SB
300 1300 375 (MULTIPLIER -) 375 SB
750 1300 15 ( ) 15 SB
900 1300 1137 (These four signals are used to set the value of the) 1137 SB
900 1400 236 (multiplier.) 236 SB
300 1500 450 (MULTIPLICAND-) 450 SB
900 1500 1137 (These four signals are used to set the value of the) 1137 SB
900 1600 300 (multiplicand.) 300 SB
300 1700 134 (INIT-) 134 SB
900 1700 1040 (This signal initializes the multiplier for a new) 1040 SB
900 1800 938 (multiplication. Setting this signal will cle) 938 SB
1838 1800 130 (ar the) 130 SB
900 1900 1126 (product register, load the operands, and initialize) 1126 SB
900 2000 469 (the control circuitry.) 469 SB
300 2100 214 (CLOCK-) 214 SB
900 2100 1102 (This signal is used to actually perform the serial) 1102 SB
900 2200 1145 (multiplication. A worst case multiplication should) 1145 SB
900 2300 692 (require about 20 clock pulses.) 692 SB
300 2400 180 (DONE-) 180 SB
900 2400 1183 (This signal, reset by INIT, should be high when the) 1183 SB
900 2500 609 (multiplication is complete.) 609 SB
300 2600 290 (PRODUCT-) 290 SB
900 2600 782 (These signals display the product.) 782 SB
450 2700 220 (Circuitry ) 223 SB
673 2700 167 (should ) 170 SB
843 2700 70 (be ) 73 SB
916 2700 211 (included ) 214 SB
1130 2700 101 (that ) 104 SB
1234 2700 102 (will ) 105 SB
1339 2700 184 (shorten ) 188 SB
1527 2700 85 (the ) 89 SB
1616 2700 237 (execution ) 241 SB
1857 2700 115 (time ) 119 SB
1976 2700 124 (when) 124 SB
300 2800 130 (there ) 138 SB
438 2800 86 (are ) 94 SB
532 2800 138 (zeros ) 146 SB
678 2800 58 (in ) 66 SB
744 2800 85 (the ) 93 SB
837 2800 251 (multiplier. ) 259 SB
1096 2800 15 ( ) 24 SB
1120 2800 174 (Briefly ) 183 SB
1303 2800 196 (indicate ) 205 SB
1508 2800 114 (how ) 123 SB
1631 2800 85 (the ) 94 SB
1725 2800 160 (circuit ) 169 SB
1894 2800 142 (could ) 151 SB
2045 2800 55 (be) 55 SB
300 2900 859 (extended to multiply 16 bit operands.) 859 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 13 13
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 1152 (2.2 VHDL solution to the Serial Binary Multiplier) 1152 SB
0 0 0 fC
/fm 256 def
1151 2 300 359 B
1 F
n
450 400 104 (The ) 107 SB
557 400 174 (VHDL ) 177 SB
734 400 198 (solution ) 201 SB
935 400 60 (to ) 63 SB
998 400 85 (the ) 88 SB
1086 400 205 (problem ) 208 SB
1294 400 101 (that ) 104 SB
1398 400 106 (was ) 109 SB
1507 400 175 (chosen ) 178 SB
1685 400 53 (is ) 56 SB
1741 400 98 (one ) 101 SB
1842 400 154 (which ) 158 SB
2000 400 100 (uses) 100 SB
300 500 85 (the ) 89 SB
389 500 187 (Booth's ) 191 SB
580 500 234 (algorithm ) 238 SB
818 500 81 (for ) 85 SB
903 500 139 (serial ) 143 SB
1046 500 346 (multiplication. ) 350 SB
1396 500 15 ( ) 20 SB
1416 500 116 (This ) 121 SB
1537 500 165 (allows ) 170 SB
1707 500 71 (all ) 76 SB
1783 500 85 (the ) 90 SB
1873 500 177 (criteria ) 182 SB
2055 500 45 (to) 45 SB
300 600 70 (be ) 75 SB
375 600 115 (met. ) 120 SB
495 600 15 ( ) 20 SB
515 600 187 (Booth's ) 192 SB
707 600 234 (algorithm ) 239 SB
946 600 53 (is ) 58 SB
1004 600 116 (very ) 121 SB
1125 600 118 (easy ) 123 SB
1248 600 60 (to ) 65 SB
1313 600 256 (implement ) 261 SB
1574 600 137 (using ) 143 SB
1717 600 229 (software. ) 235 SB
1952 600 15 ( ) 21 SB
1973 600 127 (Since) 127 SB
300 700 1605 (VHDL software turns into hardware, it seemed to be the ideal choice.) 1605 SB
300 900 1110 (2.2.1 The Serial Binary Multiplier VHDL Entity) 1110 SB
/fm 256 def
1109 2 300 959 B
1 F
n
450 1000 104 (The ) 112 SB
562 1000 268 (Multipliers ) 276 SB
838 1000 215 (interface ) 224 SB
1062 1000 53 (is ) 62 SB
1124 1000 186 (defined ) 195 SB
1319 1000 168 (above, ) 177 SB
1496 1000 26 (a) 26 SB
1522 1000 72 (nd ) 81 SB
1603 1000 85 (the ) 94 SB
1697 1000 223 (ENTITY ) 232 SB
1929 1000 171 (follows) 171 SB
300 1100 1533 (the definition as written.  The following code defines the interface:) 1533 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 1267 350 (ENTITY mult IS) 350 SB
300 1312 1375 (  PORT\(multiplier      : IN     bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1357 1375 (       multiplicand    : IN     bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1402 900 (       clock           : IN     bit;) 900 SB
300 1447 900 (       init            : IN     bit;) 900 SB
300 1492 1375 (       ac              : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1537 1375 (       qout            : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1582 1325 (       sc              : BUFFER integer range 0 to 4;) 1325 SB
300 1627 1375 (       qr              : BUFFER bit_vector\(4 DOWNTO 0\);) 1375 SB
300 1672 1375 (       br              : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1717 925 (       done            : OUT    bit\);) 925 SB
300 1762 225 (END mult;) 225 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
733 1840 933 (Listing 7. Serial Binary Multiplier Entity) 933 SB
300 2040 1258 (2.2.2 The Serial Binary Multiplier VHDL Architecture) 1258 SB
/fm 256 def
1257 2 300 2099 B
1 F
n
450 2140 104 (The ) 122 SB
572 2140 301 (Architecture ) 319 SB
891 2140 81 (for ) 100 SB
991 2140 85 (the ) 104 SB
1095 2140 139 (serial ) 158 SB
1253 2140 236 (multiplier ) 255 SB
1508 2140 53 (is ) 72 SB
1580 2140 148 (based ) 167 SB
1747 2140 129 (upon ) 148 SB
1895 2140 85 (the ) 104 SB
1999 2140 101 (case) 101 SB
300 2240 250 (statement. ) 263 SB
563 2240 15 ( ) 28 SB
591 2240 104 (The ) 117 SB
708 2240 162 (CASE ) 175 SB
883 2240 235 (statement ) 248 SB
1131 2240 53 (is ) 66 SB
1197 2240 126 (ideal ) 139 SB
1336 2240 81 (for ) 94 SB
1430 2240 112 (this, ) 125 SB
1555 2240 64 (as ) 77 SB
1632 2240 169 (booths ) 182 SB
1814 2240 234 (algorithm ) 248 SB
2062 2240 38 (is) 38 SB
300 2340 256 (essentially ) 258 SB
558 2340 41 (a ) 43 SB
601 2340 247 (sequential ) 249 SB
850 2340 234 (algorithm ) 236 SB
1086 2340 116 (with ) 118 SB
1204 2340 128 (logic ) 130 SB
1334 2340 60 (to ) 62 SB
1396 2340 125 (steer ) 127 SB
1523 2340 85 (the ) 87 SB
1610 2340 218 (direction ) 221 SB
1831 2340 62 (of ) 65 SB
1896 2340 85 (the ) 88 SB
1984 2340 116 (case.) 116 SB
300 2440 1177 (Below is the ARCHITECTURE with explanations:) 1177 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2607 875 (ARCHITECTURE behave_mult OF mult IS) 875 SB
300 2697 425 (BEGIN  --  behave) 425 SB
300 2787 275 (  multiply:) 275 SB
300 2832 225 (  PROCESS) 225 SB
300 2877 1050 (    VARIABLE state : integer range 0 to 3;) 1050 SB
300 2922 1125 (    VARIABLE status : bit_vector\(3 DOWNTO 0\);) 1125 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 14 14
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1125 (    VARIABLE result : bit_vector\(3 DOWNTO 0\);) 1125 SB
300 312 550 (    VARIABLE as : bit;) 550 SB
300 357 1075 (    VARIABLE temp : bit_vector\(3 DOWNTO 0\);) 1075 SB
300 447 225 (    BEGIN) 225 SB
300 492 1075 (      WAIT UNTIL clock'EVENT and clock='1';) 1075 SB
300 537 650 (      IF \(init = '0'\) THEN) 650 SB
300 582 525 (        ac <= "0000";) 525 SB
300 627 675 (        br <= multiplicand;) 675 SB
300 672 925 (        qr\(4 DOWNTO 1\) <= multiplier;) 925 SB
300 717 525 (        ac <= "0000";) 525 SB
300 762 400 (        sc <= 4;) 400 SB
300 807 525 (        qr\(0\) <= '0';) 525 SB
300 852 500 (        done <= '0';) 500 SB
300 897 475 (        state := 0;) 475 SB
300 942 250 (      ELSE) 250 SB
300 987 525 (        CASE state IS) 525 SB
300 1032 475 (          WHEN 0 =>) 475 SB
300 1077 850 (            CASE qr\(1 DOWNTO 0\) IS) 850 SB
300 1122 650 (              WHEN "01" =>) 650 SB
300 1167 750 (                ac <= ac + br;) 750 SB
300 1212 650 (              WHEN "10" =>) 650 SB
300 1257 750 (                ac <= ac - br;) 750 SB
300 1302 700 (              WHEN OTHERS =>) 700 SB
300 1347 1475 (            END CASE;                    --  qr\(1 DOWNTO 0\)) 1475 SB
300 1392 575 (            state := 1;) 575 SB
300 1437 475 (          WHEN 1 =>) 475 SB
300 1482 675 (            qr\(0\) <= qr\(1\);) 675 SB
300 1527 675 (            qr\(1\) <= qr\(2\);) 675 SB
300 1572 675 (            qr\(2\) <= qr\(3\);) 675 SB
300 1617 675 (            qr\(3\) <= qr\(4\);) 675 SB
300 1662 675 (            qr\(4\) <= ac\(0\);) 675 SB
300 1707 675 (            ac\(0\) <= ac\(1\);) 675 SB
300 1752 675 (            ac\(1\) <= ac\(2\);) 675 SB
300 1797 675 (            ac\(2\) <= ac\(3\);) 675 SB
300 1842 625 (            sc <= sc - 1;) 625 SB
300 1887 575 (            state := 2;) 575 SB
300 1932 475 (          WHEN 2 =>) 475 SB
300 1977 700 (            IF \(sc = 0\) THEN) 700 SB
300 2022 625 (              state := 3;) 625 SB
300 2067 400 (            ELSE) 400 SB
300 2112 625 (              state := 0;) 625 SB
300 2157 475 (            END IF;) 475 SB
300 2202 475 (          WHEN 3 =>) 475 SB
300 2247 600 (            done <= '1';) 600 SB
300 2292 875 (            qout <= qr\(4 DOWNTO 1\);) 875 SB
300 2337 575 (            state := 0;) 575 SB
300 2382 600 (          WHEN others =>) 600 SB
300 2472 1250 (        END CASE;                        --  state) 1250 SB
300 2517 325 (      END IF;) 325 SB
300 2562 350 (  END PROCESS;) 350 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
659 2640 1081 (Listing 8. Serial Binary Multiplier Architecture) 1081 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 15 15
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 608 (2.2.3 Initialization Section) 608 SB
0 0 0 fC
/fm 256 def
607 2 300 359 B
1 F
n
450 400 104 (The ) 118 SB
568 400 300 (initialization ) 314 SB
882 400 178 (section ) 192 SB
1074 400 53 (is ) 67 SB
1141 400 179 (needed ) 193 SB
1334 400 60 (to ) 74 SB
1408 400 165 (ensure ) 180 SB
1588 400 101 (that ) 116 SB
1704 400 85 (the ) 100 SB
1804 400 210 (registers ) 225 SB
2029 400 71 (are) 71 SB
300 500 182 (cleared ) 185 SB
485 500 162 (before ) 165 SB
650 500 83 (we ) 86 SB
736 500 141 (begin ) 144 SB
880 500 85 (the ) 88 SB
968 500 331 (multiplication ) 334 SB
1302 500 247 (operation. ) 250 SB
1552 500 15 ( ) 18 SB
1570 500 116 (This ) 119 SB
1689 500 53 (is ) 56 SB
1745 500 116 (very ) 119 SB
1864 500 236 (important,) 236 SB
300 600 81 (for ) 82 SB
382 600 48 (if ) 49 SB
431 600 97 (this ) 98 SB
529 600 53 (is ) 54 SB
583 600 88 (not ) 90 SB
673 600 142 (done, ) 144 SB
817 600 83 (we ) 85 SB
902 600 102 (will ) 104 SB
1006 600 123 (have ) 125 SB
1131 600 88 (old ) 90 SB
1221 600 161 (values ) 163 SB
1384 600 58 (in ) 60 SB
1444 600 85 (the ) 87 SB
1531 600 210 (registers ) 212 SB
1743 600 154 (which ) 156 SB
1899 600 102 (will ) 104 SB
2003 600 97 (give) 97 SB
300 700 1274 (us incorrect results. Below is the code for initialization:) 1274 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 867 650 (      IF \(init = '0'\) THEN) 650 SB
300 912 525 (        ac <= "0000";) 525 SB
300 957 675 (        br <= multiplicand;) 675 SB
300 1002 925 (        qr\(4 DOWNTO 1\) <= multiplier;) 925 SB
300 1047 525 (        ac <= "0000";) 525 SB
300 1092 400 (        sc <= 4;) 400 SB
300 1137 525 (        qr\(0\) <= '0';) 525 SB
300 1182 500 (        done <= '0';) 500 SB
300 1227 475 (        state := 0;) 475 SB
300 1272 250 (      ELSE) 250 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
589 1350 1222 (Listing 9. Serial Binary Multiplier Initialization Code) 1222 SB
300 1550 553 (2.2.2 Booth's Algorithm) 553 SB
/fm 256 def
552 2 300 1609 B
1 F
n
450 1650 96 (We ) 98 SB
548 1650 95 (can ) 97 SB
645 1650 90 (see ) 92 SB
737 1650 85 (the ) 87 SB
824 1650 246 (remainder ) 249 SB
1073 1650 62 (of ) 65 SB
1138 1650 85 (the ) 88 SB
1226 1650 190 (process ) 193 SB
1419 1650 53 (is ) 56 SB
1475 1650 41 (a ) 44 SB
1519 1650 341 (representation ) 344 SB
1863 1650 62 (of ) 65 SB
1928 1650 172 (Booth's) 172 SB
300 1750 249 (algorithm. ) 252 SB
552 1750 15 ( ) 18 SB
570 1750 189 (Briefly, ) 192 SB
762 1750 129 (Case ) 132 SB
894 1750 44 (0 ) 47 SB
941 1750 266 (determines ) 269 SB
1210 1750 85 (the ) 88 SB
1298 1750 138 (value ) 141 SB
1439 1750 154 (which ) 157 SB
1596 1750 53 (is ) 56 SB
1652 1750 169 (loaded ) 172 SB
1824 1750 103 (into ) 107 SB
1931 1750 85 (the ) 89 SB
2020 1750 80 (AC) 80 SB
300 1850 202 (register. ) 210 SB
510 1850 15 ( ) 23 SB
533 1850 129 (Case ) 138 SB
671 1850 44 (1 ) 53 SB
724 1850 221 (performs ) 230 SB
954 1850 85 (the ) 94 SB
1048 1850 152 (actual ) 161 SB
1209 1850 186 (shifting ) 195 SB
1404 1850 60 (to ) 69 SB
1473 1850 85 (the ) 94 SB
1567 1850 161 (values ) 170 SB
1737 1850 62 (of ) 71 SB
1808 1850 95 (AC ) 104 SB
1912 1850 98 (and ) 107 SB
2019 1850 81 (QR) 81 SB
300 1950 879 (registers.  Case 2 determines whether ) 880 SB
1180 1950 83 (we ) 84 SB
1264 1950 123 (have ) 124 SB
1388 1950 254 (completed ) 255 SB
1643 1950 85 (the ) 86 SB
1729 1950 249 (algorithm. ) 250 SB
1979 1950 52 (If ) 53 SB
2032 1950 68 (we) 68 SB
300 2050 1762 (have, we go to case 3, which will put us back into state 0 to start over again.) 1762 SB
300 2250 1006 (2.3 The Serial Binary Multiplier Test bench) 1006 SB
/fm 256 def
1005 2 300 2309 B
1 F
n
450 2350 56 (A ) 61 SB
511 2350 166 (simple ) 171 SB
682 2350 96 (test ) 101 SB
783 2350 152 (bench ) 157 SB
940 2350 60 (to ) 65 SB
1005 2350 96 (test ) 101 SB
1106 2350 85 (the ) 90 SB
1196 2350 331 (multiplication ) 336 SB
1532 2350 62 (of ) 67 SB
1599 2350 102 (two ) 107 SB
1706 2350 211 (numbers ) 216 SB
1922 2350 178 (appears) 178 SB
300 2450 156 (below:) 156 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2562 1800 (------------------------------------------------------------------------) 1800 SB
300 2607 175 (-------) 175 SB
300 2652 950 (--  EE126 Project #1, part I Testbench) 950 SB
300 2697 475 (--  by: Frank Bruno) 475 SB
300 2742 1800 (------------------------------------------------------------------------) 1800 SB
300 2787 175 (-------) 175 SB
300 2877 475 (ENTITY test_mult IS) 475 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 16 16
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 350 (END test_mult;) 350 SB
300 357 875 (ARCHITECTURE b_mult OF test_mult IS) 875 SB
300 402 400 (  COMPONENT mult) 400 SB
300 447 1375 (  PORT\(multiplier      : IN     bit_vector\(3 DOWNTO 0\);) 1375 SB
300 492 1375 (       multiplicand    : IN     bit_vector\(3 DOWNTO 0\);) 1375 SB
300 537 900 (       clock           : IN     bit;) 900 SB
300 582 900 (       init            : IN     bit;) 900 SB
300 627 1375 (       ac              : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 672 1375 (       qout            : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 717 1325 (       sc              : BUFFER integer range 0 to 4;) 1325 SB
300 762 1375 (       qr              : BUFFER bit_vector\(4 DOWNTO 0\);) 1375 SB
300 807 1375 (       br              : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 852 925 (       done            : OUT    bit\);) 925 SB
300 897 400 (  END COMPONENT;) 400 SB
300 942 1125 (  SIGNAL multiplier : bit_vector\(3 DOWNTO 0\);) 1125 SB
300 987 1175 (  SIGNAL multiplicand : bit_vector\(3 DOWNTO 0\);) 1175 SB
300 1032 525 (  SIGNAL clock : bit;) 525 SB
300 1077 500 (  SIGNAL init : bit;) 500 SB
300 1122 925 (  SIGNAL ac : bit_vector\(3 DOWNTO 0\);) 925 SB
300 1167 975 (  SIGNAL qout : bit_vector\(3 DOWNTO 0\);) 975 SB
300 1212 500 (  SIGNAL done : bit;) 500 SB
300 1257 875 (  SIGNAL sc : integer range 0 to 4;) 875 SB
300 1302 925 (  SIGNAL qr : bit_vector\(4 DOWNTO 0\);) 925 SB
300 1347 925 (  SIGNAL br : bit_vector\(3 DOWNTO 0\);) 925 SB
300 1437 425 (BEGIN  --  b_mult) 425 SB
300 1482 250 (  u1: mult) 250 SB
300 1527 900 (  PORT MAP\(multiplier => multiplier,) 900 SB
300 1572 1025 (           multiplicand  => multiplicand,) 1025 SB
300 1617 650 (           clock => clock,) 650 SB
300 1662 600 (           init => init,) 600 SB
300 1707 500 (           ac => ac,) 500 SB
300 1752 600 (           qout => qout,) 600 SB
300 1797 500 (           sc => sc,) 500 SB
300 1842 500 (           qr => qr,) 500 SB
300 1887 500 (           br => br,) 500 SB
300 1932 625 (           done => done\);) 625 SB
300 2022 250 (clock_gen:) 250 SB
300 2067 175 (PROCESS) 175 SB
300 2112 175 (  BEGIN) 175 SB
300 2157 725 (    clock <= '0' AFTER 40 ns;) 725 SB
300 2202 475 (    WAIT FOR 40 ns;) 475 SB
300 2247 725 (    clock <= '1' AFTER 40 ns;) 725 SB
300 2292 475 (    WAIT FOR 40 ns;) 475 SB
300 2337 300 (END PROCESS;) 300 SB
300 2427 175 (PROCESS) 175 SB
300 2472 800 (  VARIABLE state : integer := 0;) 800 SB
300 2517 175 (  BEGIN) 175 SB
300 2562 1050 (    WAIT UNTIL clock'EVENT AND clock ='1';) 1050 SB
300 2607 425 (    CASE state IS) 425 SB
300 2652 375 (      WHEN 0 =>) 375 SB
450 2697 300 (init <= '0';) 300 SB
450 2742 525 (multiplier <= "1011";) 525 SB
300 2787 775 (        multiplicand <= "1001";) 775 SB
300 2832 475 (        state := 1;) 475 SB
300 2877 375 (      WHEN 1 =>) 375 SB
300 2922 500 (        init <= '1';) 500 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 17 17
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 700 (        IF \(done = '1'\) THEN) 700 SB
300 312 575 (          init  <= '0';) 575 SB
300 357 775 (          multiplier <= "0111";) 775 SB
300 402 825 (          multiplicand <= "0101";) 825 SB
300 447 525 (          state := 2;) 525 SB
300 492 375 (        END IF;) 375 SB
300 537 375 (      WHEN 2 =>) 375 SB
300 582 525 (        init  <= '1';) 525 SB
300 627 475 (        state := 3;) 475 SB
300 672 375 (      WHEN 3 =>) 375 SB
300 717 700 (        IF \(done = '1'\) THEN) 700 SB
300 762 575 (          init  <= '0';) 575 SB
300 807 775 (          multiplier <= "1011";) 775 SB
300 852 850 (          multiplicand  <= "0110";) 850 SB
300 897 525 (          state := 4;) 525 SB
300 942 375 (        END IF;) 375 SB
300 987 375 (      WHEN 4 =>) 375 SB
300 1032 525 (        init  <= '1';) 525 SB
300 1077 475 (        state := 5;) 475 SB
300 1122 500 (      WHEN OTHERS =>) 500 SB
300 1167 325 (    END CASE;) 325 SB
300 1212 300 (END PROCESS;) 300 SB
300 1302 275 (END b_mult;) 275 SB
300 1392 900 (CONFIGURATION c_mult OF test_mult IS) 900 SB
300 1437 250 (FOR b_mult) 250 SB
300 1482 350 (  FOR u1: mult) 350 SB
300 1527 625 (    USE ENTITY work.mult;) 625 SB
300 1572 250 (  END FOR;) 250 SB
300 1617 200 (END FOR;) 200 SB
300 1662 275 (END c_mult;) 275 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
669 1740 1061 (Listing 10. Serial Binary Multiplier Testbench) 1061 SB
300 1940 1216 (2.4 The Serial Binary Multiplier Synthesized Results) 1216 SB
0 0 0 fC
/fm 256 def
1215 2 300 1999 B
1 F
n
450 2040 1602 (The synthesized code for the Serial multiplier appears in Appendix L.) 1602 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 18 18
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
0 0 0 fC
300 300 945 (PART II COMPUTING ELEMENTS) 945 SB
0 0 0 fC
/fm 256 def
944 5 300 360 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 400 943 (CHAPTER 3. A SIMPLE PROCESSOR) 943 SB
/fm 256 def
942 2 300 459 B
1 F
n
300 500 779 (3.0 A Simple Processor Summary) 779 SB
/fm 256 def
778 2 300 559 B
1 F
n
450 600 56 (A ) 64 SB
514 600 166 (simple ) 175 SB
689 600 238 (processor ) 247 SB
936 600 81 (for ) 90 SB
1026 600 109 (four ) 118 SB
1144 600 75 (bit ) 84 SB
1228 600 224 (operands ) 233 SB
1461 600 53 (is ) 62 SB
1523 600 219 (designed ) 228 SB
1751 600 58 (in ) 67 SB
1818 600 97 (this ) 106 SB
1924 600 176 (project.) 176 SB
300 700 104 (The ) 114 SB
414 700 238 (processor ) 248 SB
662 700 92 (has ) 102 SB
764 700 109 (four ) 119 SB
883 700 123 (4-bit ) 133 SB
1016 700 225 (registers, ) 236 SB
1252 700 41 (a ) 52 SB
1304 700 188 (number ) 199 SB
1503 700 62 (of ) 73 SB
1576 700 123 (8-bit ) 134 SB
1710 700 296 (instructions, ) 307 SB
2017 700 83 (and) 83 SB
300 800 1794 (memory for a 16 instruction program. A sample program is a multiply routine.) 1794 SB
300 1000 1029 (3.1 Simple Processor Functional Description) 1029 SB
/fm 256 def
1028 2 300 1059 B
1 F
n
450 1100 116 (This ) 121 SB
571 1100 178 (section ) 183 SB
754 1100 135 (gives ) 140 SB
894 1100 85 (the ) 90 SB
984 1100 270 (description ) 275 SB
1259 1100 62 (of ) 68 SB
1327 1100 41 (a ) 47 SB
1374 1100 137 (small ) 143 SB
1517 1100 253 (processor. ) 259 SB
1776 1100 15 ( ) 21 SB
1797 1100 162 (Figure ) 168 SB
1965 1100 44 (2 ) 50 SB
2015 1100 53 (is ) 59 SB
2074 1100 26 (a) 26 SB
300 1200 143 (block ) 152 SB
452 1200 201 (diagram ) 210 SB
662 1200 62 (of ) 71 SB
733 1200 85 (the ) 94 SB
827 1200 238 (processor ) 247 SB
1074 1200 64 (as ) 73 SB
1147 1200 46 (it ) 55 SB
1202 1200 158 (would ) 167 SB
1369 1200 170 (appear ) 179 SB
1548 1200 60 (to ) 69 SB
1617 1200 41 (a ) 50 SB
1667 1200 311 (programmer. ) 320 SB
1987 1200 15 ( ) 24 SB
2011 1200 89 (The) 89 SB
300 1300 238 (processor ) 260 SB
560 1300 92 (has ) 114 SB
674 1300 71 (all ) 93 SB
767 1300 85 (the ) 107 SB
874 1300 292 (rudimentary ) 314 SB
1188 1300 218 (elements ) 240 SB
1428 1300 62 (of ) 84 SB
1512 1300 41 (a ) 63 SB
1575 1300 246 (computer, ) 268 SB
1843 1300 88 (but ) 111 SB
1954 1300 46 (it ) 69 SB
2023 1300 77 (has) 77 SB
300 1400 271 (insufficient ) 272 SB
572 1400 197 (features ) 198 SB
770 1400 60 (to ) 61 SB
831 1400 137 (serve ) 138 SB
969 1400 58 (in ) 59 SB
1028 1400 97 (any ) 98 SB
1126 1400 213 (practical ) 214 SB
1340 1400 222 (capacity. ) 223 SB
1563 1400 15 ( ) 16 SB
1579 1400 104 (The ) 105 SB
1684 1400 207 (machine ) 208 SB
1892 1400 92 (has ) 93 SB
1985 1400 115 (three) 115 SB
300 1500 177 (classes ) 181 SB
481 1500 62 (of ) 66 SB
547 1500 296 (instructions: ) 300 SB
847 1500 187 (register ) 191 SB
1038 1500 296 (instructions, ) 301 SB
1339 1500 171 (branch ) 176 SB
1515 1500 296 (instructions, ) 301 SB
1816 1500 98 (and ) 103 SB
1919 1500 181 (halt-I/O) 181 SB
300 1600 281 (instructions.) 281 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Roman
%%Page: 19 19
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 484 def /pp_bx2 324 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1350 1284 525 267 CB
1349 1283 525 267 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\PROCESS1.EPS
%%Title: 
%%CreationDate: Sun Apr 18 1993 2:58:27 PM
%%BoundingBox: 0 484 324 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 112 M 0 -599 299 0 0 599 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
0 1012 M 0 -149 299 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
450 262 M 0 -299 299 0 0 299 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
525 712 M 0 -149 149 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
450 1012 M 0 -149 299 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
899 112 M 0 -449 449 0 0 449 3 D
0 p
10 1 1 lc lj ml
0 262 M 0 0 300 0 2 D
S
0 412 M 0 0 300 0 2 D
S
0 562 M 0 0 300 0 2 D
S
%%ChangeFont: Times-Roman
[62 0 0 -76 0 0] /Times-Roman/Times-RomanWE sf
0 (R)0 68 0 0 0 0 41 0 106 149 sb
0 (0)0 68 0 0 0 0 31 0 163 149 sb
0 (R)0 68 0 0 0 0 41 0 106 300 sb
0 (1)0 68 0 0 0 0 31 0 163 300 sb
0 (R)0 68 0 0 0 0 41 0 106 451 sb
0 (2)0 68 0 0 0 0 31 0 163 451 sb
0 (R)0 68 0 0 0 0 41 0 106 602 sb
0 (3)0 68 0 0 0 0 31 0 163 602 sb
%%ChangeFont: Times-Roman
[63 0 0 -75 0 0] /Times-Roman/Times-RomanWE sf
0 (4 bits)0 67 0 0 0 0 138 0 497 169 sb
0 (ALU)0 67 0 0 0 0 128 0 524 375 sb
0 (Program)0 67 0 0 0 0 216 0 997 187 sb
0 (Memory)0 67 0 0 0 0 216 0 998 263 sb
0 (16 words, 8 bits/word)0 67 0 0 0 0 549 0 799 0 sb
0 (C)0 67 0 0 0 0 42 0 575 750 sb
0 (Carry bit)0 67 0 0 0 0 225 0 466 637 sb
0 (Input)0 67 0 0 0 0 133 0 71 1049 sb
0 (4 Signals)0 67 0 0 0 0 233 0 12 1200 sb
0 (Output)0 67 0 0 0 0 175 0 495 1049 sb
0 (4 Signals)0 67 0 0 0 0 233 0 462 1200 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
776 1584 847 (Figure 2. Simple Processor Structure) 847 SB
300 1784 609 (3.1.1 Register Instructions) 609 SB
0 0 0 fC
/fm 256 def
608 2 300 1843 B
1 F
n
450 1884 207 (Register ) 233 SB
683 1884 281 (instructions ) 307 SB
990 1884 198 (perform ) 224 SB
1214 1884 69 (an ) 95 SB
1309 1884 232 (operation ) 258 SB
1567 1884 72 (on ) 98 SB
1665 1884 85 (the ) 111 SB
1776 1884 102 (two ) 129 SB
1905 1884 195 (registers) 195 SB
300 1984 222 (specified ) 227 SB
527 1984 72 (by ) 77 SB
604 1984 47 (S ) 52 SB
656 1984 98 (and ) 103 SB
759 1984 72 (D. ) 78 SB
837 1984 15 ( ) 21 SB
858 1984 104 (The ) 110 SB
968 1984 202 (notation ) 208 SB
1176 1984 85 (\(S\) ) 91 SB
1267 1984 192 (denotes ) 198 SB
1465 1984 85 (the ) 91 SB
1556 1984 207 (contents ) 213 SB
1769 1984 62 (of ) 68 SB
1837 1984 85 (the ) 91 SB
1928 1984 172 (register) 172 SB
300 2084 222 (specified ) 226 SB
526 2084 72 (by ) 76 SB
602 2084 62 (S. ) 66 SB
668 2084 56 (A ) 60 SB
728 2084 203 (function ) 207 SB
935 2084 222 (specified ) 227 SB
1162 2084 72 (by ) 77 SB
1239 2084 89 (OP ) 94 SB
1333 2084 98 (and ) 103 SB
1436 2084 93 (CC ) 98 SB
1534 2084 53 (is ) 58 SB
1592 2084 253 (performed ) 258 SB
1850 2084 72 (on ) 77 SB
1927 2084 85 (\(S\) ) 90 SB
2017 2084 83 (and) 83 SB
300 2184 95 (\(D\) ) 98 SB
398 2184 98 (and ) 102 SB
500 2184 85 (the ) 89 SB
589 2184 142 (result ) 146 SB
735 2184 157 (stored ) 161 SB
896 2184 58 (in ) 62 SB
958 2184 110 (\(D\). ) 114 SB
1072 2184 15 ( ) 19 SB
1091 2184 89 (OP ) 93 SB
1184 2184 216 (specifies ) 220 SB
1404 2184 98 (one ) 102 SB
1506 2184 62 (of ) 66 SB
1572 2184 85 (the ) 89 SB
1661 2184 255 (operations ) 259 SB
1920 2184 98 (and ) 102 SB
2022 2184 78 (CC) 78 SB
300 2284 200 (controls ) 204 SB
504 2284 85 (the ) 89 SB
593 2284 195 (carry-in ) 199 SB
792 2284 75 (bit ) 79 SB
871 2284 121 (used ) 125 SB
996 2284 58 (in ) 62 SB
1058 2284 85 (the ) 89 SB
1147 2284 247 (operation. ) 251 SB
1398 2284 15 ( ) 19 SB
1417 2284 104 (The ) 108 SB
1525 2284 232 (meanings ) 236 SB
1761 2284 62 (of ) 66 SB
1827 2284 89 (OP ) 93 SB
1920 2284 98 (and ) 102 SB
2022 2284 78 (CC) 78 SB
300 2384 86 (are ) 99 SB
399 2384 197 (detailed ) 210 SB
609 2384 58 (in ) 71 SB
680 2384 169 (Tables ) 182 SB
862 2384 44 (2 ) 57 SB
919 2384 98 (and ) 111 SB
1030 2384 59 (3. ) 72 SB
1102 2384 15 ( ) 28 SB
1130 2384 104 (The ) 118 SB
1248 2384 161 (values ) 175 SB
1423 2384 62 (of ) 76 SB
1499 2384 39 (C) 39 SB
1538 2397 19 (I) 19 SB
1557 2384 15 ( ) 29 SB
1586 2384 81 (for ) 95 SB
1681 2384 121 (each ) 135 SB
1816 2384 232 (operation ) 246 SB
2062 2384 38 (is) 38 SB
300 2484 272 (determined ) 273 SB
573 2484 72 (by ) 73 SB
646 2484 93 (CC ) 94 SB
740 2484 64 (as ) 65 SB
805 2484 180 (shown. ) 181 SB
986 2484 15 ( ) 16 SB
1002 2484 54 (C ) 55 SB
1057 2484 53 (is ) 54 SB
1111 2484 85 (the ) 86 SB
1197 2484 207 (contents ) 208 SB
1405 2484 62 (of ) 63 SB
1468 2484 85 (the ) 86 SB
1554 2484 133 (carry ) 134 SB
1688 2484 202 (flip-flop ) 203 SB
1891 2484 165 (shown ) 166 SB
2057 2484 43 (in) 43 SB
300 2584 429 (the block diagram.) 429 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 20 20
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
900 300 74 (OP) 74 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
974 300 90 (      ) 90 SB
1050 300 201 (Function) 201 SB
0 0 0 fC
/fm 256 def
350 2 900 359 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
900 400 58 (00) 58 SB
1050 400 172 (\(S\) + C) 172 SB
1222 413 34 (I ) 34 SB
1256 400 147 (-> \(D\)) 147 SB
900 500 58 (01) 58 SB
1050 500 315 (\(S\) + \(D\) + C) 315 SB
1365 513 34 (I ) 34 SB
1399 500 147 (-> \(D\)) 147 SB
900 600 58 (10) 58 SB
1050 600 287 (\(D\) - \(S\) - C) 287 SB
1337 613 19 (I) 19 SB
1356 600 171 (' -> \(D\)) 171 SB
780 713 840 ( Table 2. Basic Register Instructions) 840 SB
1050 900 78 (CC) 78 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1128 900 75 (     ) 75 SB
1200 900 39 (C) 39 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1239 913 19 (I) 19 SB
/fm 256 def
188 2 1050 959 B
1 F
n
/fm 256 def
18 2 1239 972 B
1 F
n
1050 1000 58 (00) 58 SB
1200 1000 29 (0) 29 SB
1050 1100 58 (01) 58 SB
1200 1100 29 (1) 29 SB
1050 1200 58 (10) 58 SB
1200 1200 39 (C) 39 SB
1050 1300 58 (11) 58 SB
1200 1300 48 (C') 48 SB
990 1400 420 (Table 3. Carry Bit) 420 SB
450 1500 207 (Register ) 210 SB
660 1500 281 (instructions ) 284 SB
944 1500 108 (also ) 111 SB
1055 1500 144 (cause ) 147 SB
1202 1500 85 (the ) 88 SB
1290 1500 54 (C ) 57 SB
1347 1500 202 (flip-flop ) 205 SB
1552 1500 60 (to ) 63 SB
1615 1500 70 (be ) 73 SB
1688 1500 184 (loaded. ) 188 SB
1876 1500 15 ( ) 19 SB
1895 1500 54 (C ) 58 SB
1953 1500 147 (equals) 147 SB
300 1600 44 (1 ) 48 SB
348 1600 238 (whenever ) 242 SB
590 1600 69 (an ) 73 SB
663 1600 202 (addition ) 206 SB
869 1600 244 (overflows ) 248 SB
1117 1600 63 (or ) 67 SB
1184 1600 139 (when ) 143 SB
1327 1600 41 (a ) 46 SB
1373 1600 270 (subtraction ) 275 SB
1648 1600 122 (does ) 127 SB
1775 1600 88 (not ) 93 SB
1868 1600 201 (produce ) 206 SB
2074 1600 26 (a) 26 SB
300 1700 197 (borrow. ) 208 SB
508 1700 15 ( ) 26 SB
534 1700 86 (No ) 97 SB
631 1700 133 (other ) 144 SB
775 1700 262 (commands ) 273 SB
1048 1700 145 (affect ) 156 SB
1204 1700 85 (the ) 96 SB
1300 1700 54 (C ) 65 SB
1365 1700 217 (flip-flop. ) 228 SB
1593 1700 15 ( ) 26 SB
1619 1700 146 (Table ) 157 SB
1776 1700 44 (5 ) 56 SB
1832 1700 135 (gives ) 147 SB
1979 1700 121 (some) 121 SB
300 1800 761 (examples of register instructions.) 761 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 740 def /pp_bx2 288 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1200 217 600 1967 CB
1199 216 600 1967 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\REGISTER.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 7:24:58 PM
%%BoundingBox: 0 740 288 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 67 M 0 -149 1198 0 0 149 3 D
0 p
10 1 1 lc lj ml
300 67 M 0 0 0 150 2 D
S
600 67 M 0 0 0 150 2 D
S
899 67 M 0 0 0 150 2 D
S
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (  7         6        5          4        3        2        1        0)0 52 0 0 0 0 942 0 0 0 sb
0 (OP)0 52 0 0 0 0 61 0 113 112 sb
0 (CC)0 52 0 0 0 0 64 0 411 112 sb
0 (S)0 52 0 0 0 0 26 0 734 112 sb
0 (D)0 52 0 0 0 0 35 0 1029 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore882 2217 635 (Table 4. Register Bit Fields) 635 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 2417 150 (          ) 150 SB
600 2417 323 (MNEMONIC) 323 SB
923 2417 135 (         ) 135 SB
1050 2417 150 (          ) 150 SB
1200 2417 327 (OPERATION) 327 SB
1527 2417 135 (         ) 135 SB
1650 2417 158 (CODE) 158 SB
1808 2417 150 (          ) 150 SB
1950 2417 150 (          ) 150 SB
0 0 0 fC
/fm 256 def
1649 2 450 2476 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 2517 188 (CLEAR) 188 SB
900 2517 68 (R2) 68 SB
1200 2517 335 (R2 - R2 -> R2) 335 SB
1650 2517 277 (10 01 10 10) 277 SB
450 2617 338 (INCREMENT) 338 SB
900 2617 68 (R3) 68 SB
1200 2617 310 (R3 + 1 -> R3) 310 SB
1650 2617 277 (00 01 11 11) 277 SB
450 2717 227 (ROTATE) 227 SB
900 2717 68 (R1) 68 SB
1200 2717 349 (R1 + R1 -> R1) 349 SB
1650 2717 277 (01 00 01 01) 277 SB
450 2817 125 (ADD) 125 SB
750 2817 83 (R1,) 83 SB
900 2817 68 (R0) 68 SB
1200 2817 349 (R1 + R0 -> R0) 349 SB
1650 2817 277 (01 00 01 00) 277 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 21 21
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
450 300 414 (SUBTRACT  R2,) 414 SB
900 300 68 (R0) 68 SB
1200 300 335 (R0 - R2 -> R0) 335 SB
1650 300 277 (10 01 10 00) 277 SB
450 400 171 (MOVE) 171 SB
750 400 83 (R3,) 83 SB
900 400 68 (R2) 68 SB
1200 400 218 (R3 -> R2) 218 SB
1650 400 277 (00 00 11 10) 277 SB
743 500 914 (Table 5. Extended Register Instructions) 914 SB
300 700 582 (3.1.2 Branch Instructions) 582 SB
0 0 0 fC
/fm 256 def
581 2 300 759 B
1 F
n
450 800 180 (Branch ) 205 SB
655 800 285 (Instructions ) 310 SB
965 800 144 (cause ) 169 SB
1134 800 41 (a ) 66 SB
1200 800 171 (branch ) 196 SB
1396 800 60 (to ) 86 SB
1482 800 85 (the ) 111 SB
1593 800 222 (specified ) 248 SB
1841 800 190 (address ) 216 SB
2057 800 43 (in) 43 SB
300 900 258 (instruction ) 263 SB
563 900 203 (memory ) 209 SB
772 900 48 (if ) 54 SB
826 900 39 (C) 39 SB
865 913 19 (I) 19 SB
884 900 15 ( ) 21 SB
905 900 53 (is ) 59 SB
964 900 139 (equal ) 145 SB
1109 900 60 (to ) 66 SB
1175 900 59 (1. ) 65 SB
1240 900 15 ( ) 21 SB
1261 900 168 (Again, ) 174 SB
1435 900 39 (C) 39 SB
1474 913 19 (I) 19 SB
1493 900 15 ( ) 21 SB
1514 900 53 (is ) 59 SB
1573 900 186 (defined ) 192 SB
1765 900 72 (by ) 78 SB
1843 900 108 (CC, ) 114 SB
1957 900 143 (unless) 143 SB
300 1000 93 (CC ) 94 SB
394 1000 48 (= ) 49 SB
443 1000 59 (0, ) 60 SB
503 1000 154 (which ) 155 SB
658 1000 219 (indicates ) 220 SB
878 1000 187 (another ) 189 SB
1067 1000 258 (instruction ) 260 SB
1327 1000 143 (class. ) 145 SB
1472 1000 15 ( ) 17 SB
1489 1000 116 (This ) 118 SB
1607 1000 135 (gives ) 137 SB
1744 1000 66 (us ) 68 SB
1812 1000 130 (three ) 132 SB
1944 1000 156 (branch) 156 SB
300 1100 1652 (instructions: unconditional, conditional on C and, and conditional on C'.) 1652 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 740 def /pp_bx2 288 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1200 217 600 1267 CB
1199 216 600 1267 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\BRANCH.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 7:28:23 PM
%%BoundingBox: 0 740 288 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 67 M 0 -149 1198 0 0 149 3 D
0 p
10 1 1 lc lj ml
300 67 M 0 0 0 150 2 D
S
600 67 M 0 0 0 150 2 D
S
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (  7         6        5          4        3        2        1        0)0 52 0 0 0 0 942 0 0 0 sb
0 (11)0 52 0 0 0 0 48 0 121 112 sb
0 (CC)0 52 0 0 0 0 64 0 411 112 sb
0 (ADDR)0 52 0 0 0 0 136 0 818 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore765 1517 870 (Table 6. Branch Instruction Bit Fields) 870 SB
300 1717 705 (3.1.3 Halt and I/O Instructions) 705 SB
0 0 0 fC
/fm 256 def
704 2 300 1776 B
1 F
n
450 1817 113 (Halt ) 131 SB
581 1817 98 (and ) 116 SB
697 1817 310 (Input/Output ) 328 SB
1025 1817 281 (instructions ) 299 SB
1324 1817 86 (are ) 104 SB
1428 1817 213 (obtained ) 232 SB
1660 1817 139 (when ) 158 SB
1818 1817 180 (OP=11 ) 199 SB
2017 1817 83 (and) 83 SB
300 1917 199 (CC=00, ) 205 SB
505 1917 64 (as ) 70 SB
575 1917 165 (shown ) 171 SB
746 1917 58 (in ) 64 SB
810 1917 146 (Table ) 152 SB
962 1917 59 (7. ) 66 SB
1028 1917 15 ( ) 22 SB
1050 1917 52 (If ) 59 SB
1109 1917 85 (the ) 92 SB
1201 1917 49 (L ) 56 SB
1257 1917 75 (bit ) 82 SB
1339 1917 53 (is ) 60 SB
1399 1917 95 (set, ) 102 SB
1501 1917 113 (then ) 120 SB
1621 1917 85 (the ) 92 SB
1713 1917 258 (instruction ) 265 SB
1978 1917 122 (loads) 122 SB
300 2017 1325 (\(inputs\) the data from the switch register into the register ) 1326 SB
1626 2017 222 (specified ) 223 SB
1849 2017 72 (by ) 73 SB
1922 2017 72 (D. ) 73 SB
1995 2017 15 ( ) 16 SB
2011 2017 89 (The) 89 SB
300 2117 56 (H ) 62 SB
362 2117 75 (bit ) 81 SB
443 2117 216 (specifies ) 222 SB
665 2117 101 (that ) 107 SB
772 2117 85 (the ) 91 SB
863 2117 207 (machine ) 213 SB
1076 2117 53 (is ) 60 SB
1136 2117 60 (to ) 67 SB
1203 2117 100 (halt ) 107 SB
1310 2117 120 (after ) 127 SB
1437 2117 237 (execution ) 244 SB
1681 2117 62 (of ) 69 SB
1750 2117 85 (the ) 92 SB
1842 2117 258 (instruction.) 258 SB
300 2217 152 (When ) 153 SB
453 2217 85 (the ) 86 SB
539 2217 207 (machine ) 208 SB
747 2217 138 (halts, ) 139 SB
886 2217 85 (the ) 86 SB
972 2217 187 (register ) 188 SB
1160 2217 222 (specified ) 223 SB
1383 2217 72 (by ) 73 SB
1456 2217 57 (D ) 59 SB
1515 2217 53 (is ) 55 SB
1570 2217 235 (displayed ) 237 SB
1807 2217 58 (in ) 60 SB
1867 2217 85 (the ) 87 SB
1954 2217 146 (output) 146 SB
300 2317 165 (signal. ) 177 SB
477 2317 15 ( ) 27 SB
504 2317 128 (Note ) 140 SB
644 2317 101 (that ) 113 SB
757 2317 117 (both ) 129 SB
886 2317 49 (L ) 61 SB
947 2317 98 (and ) 110 SB
1057 2317 56 (H ) 68 SB
1125 2317 112 (may ) 124 SB
1249 2317 70 (be ) 83 SB
1332 2317 139 (equal ) 152 SB
1484 2317 60 (to ) 73 SB
1557 2317 113 (one, ) 126 SB
1683 2317 154 (which ) 167 SB
1850 2317 167 (causes ) 180 SB
2030 2317 70 (the) 70 SB
300 2417 1215 (register to be loaded and then displayed in the lights.) 1215 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 740 def /pp_bx2 288 def /pp_by2 792 defgs 1200 217 600 2584 CB
1199 216 600 2584 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\HALT.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 7:30:36 PM
%%BoundingBox: 0 740 288 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 67 M 0 -149 1198 0 0 149 3 D
0 p
10 1 1 lc lj ml
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (  7         6        5        4        3        2        1        0)0 52 0 0 0 0 918 0 0 0 sb
600 67 M 0 0 0 150 2 D
S
750 67 M 0 0 0 150 2 D
S
899 67 M 0 0 0 150 2 D
S
0 (1100)0 52 0 0 0 0 95 0 242 112 sb
0 (L)0 52 0 0 0 0 29 0 658 112 sb
0 (H)0 52 0 0 0 0 35 0 804 112 sb
0 (D)0 52 0 0 0 0 35 0 1029 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore811 2834 778 (Table 7. Halt and I/O Instructions) 778 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 22 22
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 628 (3.1.4 Simple Computer I/O) 628 SB
0 0 0 fC
/fm 256 def
627 2 300 359 B
1 F
n
450 400 1249 (The Following IO is required for the simple computer:) 1249 SB
300 600 176 (RESET) 176 SB
750 600 712 (Initializes control and clear PC) 712 SB
300 700 182 (START) 182 SB
750 700 720 (Starts program execution at PC) 720 SB
300 800 171 (INCPC) 171 SB
750 800 1064 (Increments the PC when the machine is halted) 1064 SB
300 900 167 (INSTR) 167 SB
750 900 862 (Eight signals to specify an instruction) 862 SB
300 1000 159 (LOAD) 159 SB
750 1000 825 (Loads MEMORY\(PC\) with INSTR) 825 SB
300 1100 87 (SW) 87 SB
750 1100 952 (Four signals which act as toggle switches) 952 SB
300 1200 293 (DATA OUT) 293 SB
750 1200 563 (Displays RD at all times) 563 SB
300 1300 205 (PC OUT) 205 SB
750 1300 553 (Displays PC at all times) 553 SB
300 1500 1411 (3.2 A VHDL implementation of the EE126 Simple Computer) 1411 SB
/fm 256 def
1410 2 300 1559 B
1 F
n
450 1600 104 (The ) 107 SB
557 1600 153 (above ) 156 SB
713 1600 234 (definition ) 237 SB
950 1600 62 (of ) 65 SB
1015 1600 41 (a ) 44 SB
1059 1600 166 (simple ) 169 SB
1228 1600 159 (digital ) 162 SB
1390 1600 231 (computer ) 234 SB
1624 1600 53 (is ) 57 SB
1681 1600 60 (to ) 64 SB
1745 1600 70 (be ) 74 SB
1819 1600 175 (carried ) 179 SB
1998 1600 102 (over) 102 SB
300 1700 103 (into ) 107 SB
407 1700 41 (a ) 45 SB
452 1700 174 (VHDL ) 179 SB
631 1700 223 (program. ) 228 SB
859 1700 15 ( ) 20 SB
879 1700 96 (We ) 101 SB
980 1700 102 (will ) 107 SB
1087 1700 182 (include ) 187 SB
1274 1700 41 (a ) 46 SB
1320 1700 101 (few ) 106 SB
1426 1700 130 (extra ) 135 SB
1561 1700 173 (signals ) 178 SB
1739 1700 58 (in ) 63 SB
1802 1700 85 (the ) 90 SB
1892 1700 208 (ENTITY) 208 SB
300 1800 952 (statement to allow monitoring of internal ) 953 SB
1253 1800 268 (conditions. ) 269 SB
1522 1800 15 ( ) 16 SB
1538 1800 94 (For ) 95 SB
1633 1800 240 (synthesis, ) 241 SB
1874 1800 83 (we ) 84 SB
1958 1800 142 (divide) 142 SB
300 1900 85 (the ) 87 SB
387 1900 166 (simple ) 168 SB
555 1900 231 (computer ) 233 SB
788 1900 103 (into ) 105 SB
893 1900 41 (a ) 43 SB
936 1900 238 (processor ) 240 SB
1176 1900 98 (and ) 100 SB
1276 1900 41 (a ) 43 SB
1319 1900 203 (memory ) 205 SB
1524 1900 220 (segment. ) 222 SB
1746 1900 15 ( ) 17 SB
1763 1900 116 (This ) 118 SB
1881 1900 165 (allows ) 168 SB
2049 1900 51 (us) 51 SB
300 2000 1541 (to only compile the actual processing section, without the memory.) 1541 SB
300 2200 748 (3.2.1 Simple Computer Memory) 748 SB
/fm 256 def
747 2 300 2259 B
1 F
n
450 2300 104 (The ) 118 SB
568 2300 203 (memory ) 217 SB
785 2300 178 (section ) 192 SB
977 2300 62 (of ) 76 SB
1053 2300 85 (the ) 100 SB
1153 2300 166 (simple ) 181 SB
1334 2300 231 (computer ) 246 SB
1580 2300 53 (is ) 68 SB
1648 2300 186 (defined ) 201 SB
1849 2300 171 (below. ) 186 SB
2035 2300 15 ( ) 30 SB
2065 2300 35 (It) 35 SB
300 2400 1312 (allows us to define simple arrays to hold the instructions.) 1312 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2567 1800 (------------------------------------------------------------------------) 1800 SB
300 2612 175 (-------) 175 SB
300 2657 1175 (--  Simple processor from EE126, memory segment) 1175 SB
300 2702 475 (--  By: Frank Bruno) 475 SB
300 2747 575 (--  for Professor Chang) 575 SB
300 2792 1800 (------------------------------------------------------------------------) 1800 SB
300 2837 175 (-------) 175 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 23 23
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 525 (USE work.alu_pkg.ALL;) 525 SB
300 312 675 (USE work.bv_arithmetic.ALL;) 675 SB
300 402 575 (ENTITY simple_memory IS) 575 SB
300 447 1225 (  PORT\(instr         : IN bit_vector\(7 DOWNTO 0\);) 1225 SB
300 492 1200 (       pc            : IN integer range 0 to 15;) 1200 SB
300 537 750 (       load          : IN bit;) 750 SB
300 582 750 (       clock         : IN bit;) 750 SB
300 627 1225 (       current_mem   : OUT bit_vector\(7 DOWNTO 0\)) 1225 SB
300 672 225 (       \);) 225 SB
300 717 450 (END simple_memory;) 450 SB
300 807 1250 (ARCHITECTURE behave_simple_mem OF simple_memory IS) 1250 SB
300 852 925 (  SIGNAL memory : bit_8\(15 DOWNTO 0\);) 925 SB
300 942 700 (BEGIN  --  behave_simple_mem) 700 SB
300 1032 475 (  PROCESS\(pc, load\)) 475 SB
300 1122 225 (    BEGIN) 225 SB
300 1212 1800 (------------------------------------------------------------------------) 1800 SB
300 1257 175 (-------) 175 SB
300 1302 900 (--  on a load event, load the memory) 900 SB
300 1347 1800 (------------------------------------------------------------------------) 1800 SB
300 1392 175 (-------) 175 SB
300 1437 650 (      IF \(load = '1'\) THEN) 650 SB
300 1482 700 (        memory\(pc\) <= instr;) 700 SB
300 1527 325 (      END IF;) 325 SB
300 1617 1800 (------------------------------------------------------------------------) 1800 SB
300 1662 175 (-------) 175 SB
300 1707 1500 (--  let the program know the current memory pointed to by PC) 1500 SB
300 1752 1800 (------------------------------------------------------------------------) 1800 SB
300 1797 175 (-------) 175 SB
300 1842 800 (      current_mem <= memory\(pc\);) 800 SB
300 1932 350 (  END PROCESS;) 350 SB
300 2022 550 (END behave_simple_mem;) 550 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
667 2100 1065 (Listing 11. Simple Computer Memory Section) 1065 SB
300 2300 863 (3.2.2 Simple Computer VHDL Entity) 863 SB
0 0 0 fC
/fm 256 def
862 2 300 2359 B
1 F
n
450 2400 104 (The ) 120 SB
570 2400 166 (simple ) 182 SB
752 2400 231 (computer ) 248 SB
1000 2400 223 (ENTITY ) 240 SB
1240 2400 180 (defines ) 197 SB
1437 2400 85 (the ) 102 SB
1539 2400 92 (I/O ) 109 SB
1648 2400 60 (to ) 77 SB
1725 2400 85 (the ) 102 SB
1827 2400 189 (system. ) 206 SB
2033 2400 15 ( ) 32 SB
2065 2400 35 (It) 35 SB
300 2500 498 (appears in full below:) 498 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2667 475 (ENTITY processor IS) 475 SB
300 2712 900 (  PORT\(carry           : BUFFER bit;) 900 SB
300 2757 1375 (       out_reg         : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 2802 1375 (       pc_out          : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 2847 1275 (       input           : IN bit_vector\(3 DOWNTO 0\);) 1275 SB
300 2892 800 (       clock           : IN bit;) 800 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 24 24
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 800 (       reset           : IN bit;) 800 SB
300 312 800 (       inc_pc          : IN bit;) 800 SB
300 357 1275 (       instr           : IN bit_vector\(7 DOWNTO 0\);) 1275 SB
300 402 800 (       load            : IN bit;) 800 SB
300 447 775 (       start           : IN bit) 775 SB
300 492 225 (       \);) 225 SB
300 537 350 (END processor;) 350 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
755 615 889 (Listing 12. Simple Computer ENTITY) 889 SB
300 815 1011 (3.2.3 Simple Computer VHDL Architecture) 1011 SB
0 0 0 fC
/fm 256 def
1010 2 300 874 B
1 F
n
450 915 104 (The ) 106 SB
556 915 166 (simple ) 168 SB
724 915 231 (computer ) 233 SB
957 915 286 (architecture ) 288 SB
1245 915 53 (is ) 55 SB
1300 915 41 (a ) 44 SB
1344 915 211 (complex ) 214 SB
1558 915 162 (CASE ) 165 SB
1723 915 235 (statement ) 238 SB
1961 915 139 (which) 139 SB
300 1015 190 (handles ) 202 SB
502 1015 71 (all ) 83 SB
585 1015 62 (of ) 74 SB
659 1015 85 (the ) 97 SB
756 1015 166 (simple ) 178 SB
934 1015 231 (computer ) 243 SB
1177 1015 296 (instructions. ) 308 SB
1485 1015 15 ( ) 28 SB
1513 1015 50 (It ) 63 SB
1576 1015 190 (handles ) 203 SB
1779 1015 225 (decoding ) 238 SB
2017 1015 83 (and) 83 SB
300 1115 1158 (actual execution.  The architecture appears below:) 1158 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 1227 1075 (ARCHITECTURE process_behave OF processor IS) 1075 SB
300 1272 625 (  COMPONENT simple_memory) 625 SB
300 1317 1275 (    PORT\(instr         : IN bit_vector\(7 DOWNTO 0\);) 1275 SB
300 1362 1250 (         pc            : IN integer range 0 to 15;) 1250 SB
300 1407 800 (         load          : IN bit;) 800 SB
300 1452 800 (         clock         : IN bit;) 800 SB
300 1497 1300 (         current_mem   : OUT bit_vector\( 7 DOWNTO 0\)) 1300 SB
300 1542 275 (         \);) 275 SB
300 1587 400 (  END COMPONENT;) 400 SB
300 1632 900 (  SIGNAL pc : integer range 0 to 15;) 900 SB
300 1677 925 (  SIGNAL rs : bit_vector\(3 DOWNTO 0\);) 925 SB
300 1722 925 (  SIGNAL rd : bit_vector\(3 DOWNTO 0\);) 925 SB
300 1767 925 (  SIGNAL r : bit_4_array\(3 DOWNTO 0\);) 925 SB
300 1812 675 (  SIGNAL halt : bit := '1';) 675 SB
300 1857 1150 (  SIGNAL current_mem : bit_vector\(7 DOWNTO 0\);) 1150 SB
300 1947 625 (BEGIN  --  process_behave) 625 SB
300 2037 475 (  u1: simple_memory) 475 SB
300 2082 650 (  PORT MAP\(instr => instr,) 650 SB
300 2127 500 (           pc => pc,) 500 SB
300 2172 600 (           load => load,) 600 SB
300 2217 650 (           clock => clock,) 650 SB
300 2262 975 (           current_mem => current_mem\);) 975 SB
300 2352 300 (  output_pc:) 300 SB
300 2397 325 (  PROCESS\(pc\)) 325 SB
300 2442 225 (    BEGIN) 225 SB
300 2487 675 (    pc_out <= itobv\(pc, 4\);) 675 SB
300 2532 350 (  END PROCESS;) 350 SB
300 2622 175 (  main:) 175 SB
300 2667 225 (  PROCESS) 225 SB
300 2712 1175 (    VARIABLE state : integer range 0 to 6 := 0;) 1175 SB
300 2757 1100 (    VARIABLE reg_num : integer range 0 to 3;) 1100 SB
300 2802 550 (    VARIABLE ci : bit;) 550 SB
300 2847 1025 (    VARIABLE reg1 : integer range 0 to 3;) 1025 SB
300 2892 1025 (    VARIABLE reg2 : integer range 0 to 3;) 1025 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 25 25
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1100 (    VARIABLE temp_ci : integer range 0 to 1;) 1100 SB
300 312 775 (    VARIABLE temp_i1 : integer;) 775 SB
300 357 775 (    VARIABLE temp_i2 : integer;) 775 SB
300 402 800 (    VARIABLE temp_out : integer;) 800 SB
300 447 1125 (    VARIABLE status : bit_vector\(3 DOWNTO 0\);) 1125 SB
300 492 1125 (    VARIABLE output : bit_vector\(3 DOWNTO 0\);) 1125 SB
300 537 1100 (    VARIABLE final : bit_vector\(3 DOWNTO 0\);) 1100 SB
300 582 525 (    VARIABLE v : bit;) 525 SB
300 627 550 (    VARIABLE v2 : bit;) 550 SB
300 672 725 (    VARIABLE inter : integer;) 725 SB
300 762 225 (    BEGIN) 225 SB
300 807 1125 (      WAIT UNTIL clock'EVENT and clock = '1';) 1125 SB
300 852 700 (      IF \(inc_pc = '1'\) THEN) 700 SB
300 897 525 (        pc <= pc + 1;) 525 SB
300 942 325 (      END IF;) 325 SB
300 1032 675 (      IF \(start = '1'\) THEN) 675 SB
300 1077 500 (        halt <= '0';) 500 SB
300 1122 325 (      END IF;) 325 SB
300 1212 675 (      IF \(reset = '1'\) THEN) 675 SB
300 1257 400 (        pc <= 0;) 400 SB
300 1302 500 (        halt <= '1';) 500 SB
300 1347 325 (      END IF;) 325 SB
300 1437 500 (      out_reg <= rd;) 500 SB
300 1482 650 (      IF \(halt = '0'\) THEN) 650 SB
300 1527 475 (      CASE state IS) 475 SB
300 1572 1575 (        WHEN 0 =>                        --  decode instruction) 1575 SB
300 1617 1300 (          IF \(current_mem\(7 DOWNTO 4\) = "1100"\) THEN) 1300 SB
300 1662 575 (            state := 1;) 575 SB
300 1707 1325 (          ELSIF \(current_mem\(7 DOWNTO 6\) = "11"\) THEN) 1325 SB
300 1752 575 (            state := 3;) 575 SB
300 1797 1075 (            CASE current_mem\(5 DOWNTO 4\) IS) 1075 SB
300 1842 600 (            WHEN "00" =>) 600 SB
300 1887 600 (              ci := '0';) 600 SB
300 1932 600 (            WHEN "01" =>) 600 SB
300 1977 600 (              ci := '1';) 600 SB
300 2022 600 (            WHEN "10" =>) 600 SB
300 2067 650 (              ci := carry;) 650 SB
300 2112 600 (            WHEN "11" =>) 600 SB
300 2157 775 (              ci := NOT\(carry\);) 775 SB
300 2202 1700 (          END CASE;                      --  current_mem\(5 DOWNTO 4\)) 1700 SB
300 2247 350 (          ELSE) 350 SB
300 2292 575 (            state := 4;) 575 SB
300 2337 1075 (            CASE current_mem\(5 DOWNTO 4\) IS) 1075 SB
300 2382 600 (            WHEN "00" =>) 600 SB
300 2427 600 (              ci := '0';) 600 SB
300 2472 600 (            WHEN "01" =>) 600 SB
300 2517 600 (              ci := '1';) 600 SB
300 2562 600 (            WHEN "10" =>) 600 SB
300 2607 650 (              ci := carry;) 650 SB
300 2652 600 (            WHEN "11" =>) 600 SB
300 2697 775 (              ci := NOT\(carry\);) 775 SB
300 2742 1700 (          END CASE;                      --  current_mem\(5 DOWNTO 4\)) 1700 SB
300 2787 425 (          END IF;) 425 SB
300 2832 1375 (        WHEN 1 =>                        --  halt & i/o) 1375 SB
300 2877 1000 (          IF \(current_mem\(3\) = '1'\) THEN) 1000 SB
300 2922 600 (            rd <= input;) 600 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 26 26
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 425 (          END IF;) 425 SB
300 312 525 (          state := 2;) 525 SB
300 357 425 (        WHEN 2 =>) 425 SB
300 402 1000 (          IF \(current_mem\(3\) = '1'\) THEN) 1000 SB
300 447 1350 (            reg_num := bvtoi\(current_mem\(1 DOWNTO 0\)\);) 1350 SB
300 492 725 (            r\(reg_num\) <= rd;) 725 SB
300 537 425 (          END IF;) 425 SB
300 582 1000 (          IF \(current_mem\(2\) = '1'\) THEN) 1000 SB
300 627 1300 (            rd <= r\(bvtoi\(current_mem\(1 DOWNTO 0\)\)\);) 1300 SB
300 672 600 (            halt <= '1';) 600 SB
300 717 425 (          END IF;) 425 SB
300 762 675 (          IF \(pc = 15\) THEN) 675 SB
300 807 525 (            pc  <= 0;) 525 SB
300 852 350 (          ELSE) 350 SB
300 897 625 (            pc <= pc + 1;) 625 SB
300 942 425 (          END IF;) 425 SB
300 987 525 (          state := 0;) 525 SB
300 1032 425 (        WHEN 3 =>) 425 SB
300 1077 700 (          IF \(ci = '1'\) THEN) 700 SB
300 1122 1225 (            pc <= bvtoi\(current_mem\(3 DOWNTO 0\)\);) 1225 SB
300 1167 350 (          ELSE) 350 SB
300 1212 725 (            IF \(pc = 15\) THEN) 725 SB
300 1257 550 (              pc <= 0;) 550 SB
300 1302 400 (            ELSE) 400 SB
300 1347 675 (              pc <= pc + 1;) 675 SB
300 1392 475 (            END IF;) 475 SB
300 1437 425 (          END IF;) 425 SB
300 1482 525 (          state := 6;) 525 SB
300 1527 425 (        WHEN 4 =>) 425 SB
300 1572 1400 (          reg1 := bvtoi\(current_mem\(3 DOWNTO 2\)\);--  \(s\)) 1400 SB
300 1617 1400 (          reg2 := bvtoi\(current_mem\(1 DOWNTO 0\)\);--  \(d\)) 1400 SB
300 1662 600 (          rs <= r\(reg1\);) 600 SB
300 1707 600 (          rd <= r\(reg2\);) 600 SB
300 1752 525 (          state := 5;) 525 SB
300 1797 425 (        WHEN 5 =>) 425 SB
300 1842 700 (          IF \(ci = '0'\) THEN) 700 SB
300 1887 625 (            temp_ci := 0;) 625 SB
300 1932 350 (          ELSE) 350 SB
300 1977 625 (            temp_ci := 1;) 625 SB
300 2022 425 (          END IF;) 425 SB
300 2067 800 (          temp_i1 := sbvtoi\(rs\);) 800 SB
300 2112 1025 (          CASE current_mem\(7 DOWNTO 6\) IS) 1025 SB
300 2157 600 (            WHEN "00" =>) 600 SB
300 2202 1100 (              temp_out := temp_i1 + temp_ci;) 1100 SB
300 2247 1375 (              IF \(temp_out < -16 OR temp_out > 15\) THEN) 1375 SB
300 2292 725 (                carry <= '1';) 725 SB
300 2337 1650 (              ELSIF \(\(temp_out >= 0\) AND \(temp_i1 < temp_ci\)\) THEN) 1650 SB
300 2382 725 (                carry <= '1';) 725 SB
300 2427 450 (              ELSE) 450 SB
300 2472 725 (                carry <= '0';) 725 SB
300 2517 525 (              END IF;) 525 SB
300 2562 600 (            WHEN "01" =>) 600 SB
300 2607 900 (              temp_i2 := sbvtoi\(rd\);) 900 SB
300 2652 1400 (              temp_out := \(temp_i1 + temp_i2\) + temp_ci;) 1400 SB
300 2697 1375 (              IF \(temp_out < -16 OR temp_out > 15\) THEN) 1375 SB
300 2742 725 (                carry <= '1';) 725 SB
300 2787 1600 (              ELSIF \(\(temp_out >= 0\) AND \(\(temp_i1 < temp_i2\) OR) 1600 SB
300 2832 1575 (                \(temp_i1 < temp_ci\) OR temp_i2 < temp_ci\)\) THEN) 1575 SB
300 2877 725 (                carry <= '1';) 725 SB
300 2922 450 (              ELSE) 450 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 27 27
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 725 (                carry <= '0';) 725 SB
300 312 525 (              END IF;) 525 SB
300 357 600 (            WHEN "10" =>) 600 SB
300 402 875 (              IF \(temp_ci = 0\) THEN) 875 SB
300 447 725 (                temp_ci := 1;) 725 SB
300 492 450 (              ELSE) 450 SB
300 537 725 (                temp_ci := 0;) 725 SB
300 582 525 (              END IF;) 525 SB
300 627 900 (              temp_i2 := sbvtoi\(rd\);) 900 SB
300 672 1025 (              inter := temp_i2 - temp_i1;) 1025 SB
300 717 1050 (              temp_out := inter - temp_ci;) 1050 SB
300 762 1600 (              IF \(\(temp_i2 < temp_i1\) OR \(inter < temp_ci\)\) THEN) 1600 SB
300 807 725 (                carry <= '1';) 725 SB
300 852 450 (              ELSE) 450 SB
300 897 725 (                carry <= '0';) 725 SB
300 942 525 (              END IF;) 525 SB
300 987 650 (            WHEN OTHERS =>) 650 SB
300 1032 1700 (          END CASE;                      --  current_mem\(7 DOWNTO 6\)) 1700 SB
300 1077 1000 (          r\(reg2\) <= itobv\(temp_out, 4\);) 1000 SB
300 1122 675 (          IF \(pc = 15\) THEN) 675 SB
300 1167 525 (            pc  <= 0;) 525 SB
300 1212 350 (          ELSE) 350 SB
300 1257 625 (            pc <= pc + 1;) 625 SB
300 1302 425 (          END IF;) 425 SB
300 1347 525 (          state := 0;) 525 SB
300 1392 425 (        WHEN 6 =>) 425 SB
300 1437 525 (          state := 0;) 525 SB
300 1482 1250 (      END CASE;                          --  state) 1250 SB
300 1527 325 (      END IF;) 325 SB
300 1572 350 (  END PROCESS;) 350 SB
300 1617 475 (END process_behave;) 475 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
716 1695 967 (Listing 13. Simple Computer Architecture) 967 SB
300 1895 869 (3.2.4 Simple Computer Configuration) 869 SB
0 0 0 fC
/fm 256 def
868 2 300 1954 B
1 F
n
450 1995 104 (The ) 110 SB
560 1995 166 (simple ) 172 SB
732 1995 155 (compu) 155 SB
887 1995 76 (ter ) 82 SB
969 1995 320 (configuration ) 326 SB
1295 1995 139 (binds ) 145 SB
1440 1995 85 (the ) 91 SB
1531 1995 203 (memory ) 209 SB
1740 1995 216 (structure ) 223 SB
1963 1995 60 (to ) 67 SB
2030 1995 70 (the) 70 SB
300 2095 1072 (architecture and entity of the simple computer.) 1072 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2262 1150 (CONFIGURATION config_processor OF processor IS) 1150 SB
300 2307 500 (  FOR process_behave) 500 SB
300 2352 625 (    FOR u1: simple_memory) 625 SB
300 2397 900 (      USE ENTITY work.simple_memory;) 900 SB
300 2442 300 (    END FOR;) 300 SB
300 2487 250 (  END FOR;) 250 SB
300 2532 525 (END config_processor;) 525 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
700 2610 999 (Listing 14. Simple Computer Configuration) 999 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 28 28
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 803 (3.2.5 Simple Computer Test bench) 803 SB
0 0 0 fC
/fm 256 def
802 2 300 359 B
1 F
n
450 400 104 (The ) 105 SB
555 400 175 (Simple ) 176 SB
731 400 231 (computer ) 232 SB
963 400 271 (assignment ) 272 SB
1235 400 180 (defines ) 182 SB
1417 400 41 (a ) 43 SB
1460 400 177 (sample ) 179 SB
1639 400 208 (program ) 210 SB
1849 400 60 (to ) 62 SB
1911 400 189 (multiply) 189 SB
300 500 102 (two ) 113 SB
413 500 220 (unsigned ) 231 SB
644 500 109 (four ) 120 SB
764 500 75 (bit ) 86 SB
850 500 226 (numbers. ) 237 SB
1087 500 15 ( ) 26 SB
1113 500 104 (The ) 116 SB
1229 500 208 (program ) 220 SB
1449 500 53 (is ) 65 SB
1514 500 211 (included ) 223 SB
1737 500 171 (below, ) 183 SB
1920 500 98 (and ) 110 SB
2030 500 70 (the) 70 SB
300 600 802 (results are included in appendix O.) 802 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 767 1800 (------------------------------------------------------------------------) 1800 SB
300 812 175 (-------) 175 SB
300 857 775 (--  Simple processor from EE126) 775 SB
300 902 475 (--  By: Frank Bruno) 475 SB
300 947 575 (--  for Professor Chang) 575 SB
300 992 1800 (------------------------------------------------------------------------) 1800 SB
300 1037 175 (-------) 175 SB
300 1127 525 (USE work.alu_pkg.ALL;) 525 SB
300 1172 675 (USE work.bv_arithmetic.ALL;) 675 SB
300 1262 600 (ENTITY processor_test IS) 600 SB
300 1352 475 (END processor_test;) 475 SB
300 1442 1150 (ARCHITECTURE process_test OF processor_test IS) 1150 SB
300 1487 525 (  COMPONENT processor) 525 SB
300 1532 900 (  PORT\(carry           : BUFFER bit;) 900 SB
300 1577 1375 (       out_reg         : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1622 1375 (       pc_out          : BUFFER bit_vector\(3 DOWNTO 0\);) 1375 SB
300 1667 1275 (       input           : IN bit_vector\(3 DOWNTO 0\);) 1275 SB
300 1712 800 (       clock           : IN bit;) 800 SB
300 1757 800 (       reset           : IN bit;) 800 SB
300 1802 800 (       inc_pc          : IN bit;) 800 SB
300 1847 1275 (       instr           : IN bit_vector\(7 DOWNTO 0\);) 1275 SB
300 1892 800 (       load            : IN bit;) 800 SB
300 1937 775 (       start           : IN bit) 775 SB
300 1982 225 (       \);) 225 SB
300 2027 400 (  END COMPONENT;) 400 SB
300 2072 525 (  SIGNAL carry : bit;) 525 SB
300 2117 1050 (  SIGNAL out_reg : bit_vector\(3 DOWNTO 0\);) 1050 SB
300 2162 1025 (  SIGNAL pc_out : bit_vector\(3 DOWNTO 0\);) 1025 SB
300 2207 1000 (  SIGNAL input : bit_vector\(3 DOWNTO 0\);) 1000 SB
300 2252 525 (  SIGNAL clock : bit;) 525 SB
300 2297 525 (  SIGNAL reset : bit;) 525 SB
300 2342 550 (  SIGNAL inc_pc : bit;) 550 SB
300 2387 1000 (  SIGNAL instr : bit_vector\(7 DOWNTO 0\);) 1000 SB
300 2432 500 (  SIGNAL load : bit;) 500 SB
300 2477 525 (  SIGNAL start : bit;) 525 SB
300 2567 575 (BEGIN  --  process_test) 575 SB
300 2612 375 (  u1: processor) 375 SB
300 2657 650 (  PORT MAP\(carry => carry,) 650 SB
300 2702 750 (           out_reg => out_reg,) 750 SB
300 2747 700 (           pc_out => pc_out,) 700 SB
300 2792 650 (           input => input,) 650 SB
300 2837 650 (           clock => clock,) 650 SB
300 2882 650 (           reset => reset,) 650 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 29 29
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 700 (           inc_pc => inc_pc,) 700 SB
300 312 650 (           instr => instr,) 650 SB
300 357 600 (           load => load,) 600 SB
300 402 675 (           start => start\);) 675 SB
300 492 250 (clock_gen:) 250 SB
300 537 175 (PROCESS) 175 SB
300 582 175 (  BEGIN) 175 SB
300 627 725 (    clock <= '0' AFTER 40 ns;) 725 SB
300 672 475 (    WAIT FOR 40 ns;) 475 SB
300 717 725 (    clock <= '1' AFTER 40 ns;) 725 SB
300 762 475 (    WAIT FOR 40 ns;) 475 SB
300 807 300 (END PROCESS;) 300 SB
300 897 225 (  PROCESS) 225 SB
300 942 900 (    VARIABLE t_state : integer := 0;) 900 SB
300 1032 225 (    BEGIN) 225 SB
300 1077 1125 (      WAIT until clock'event and clock = '1';) 1125 SB
300 1122 525 (      CASE t_state IS) 525 SB
300 1167 1550 (        WHEN 0 =>                        --  set up for a load) 1550 SB
300 1212 575 (          reset <= '1';) 575 SB
300 1257 600 (          inc_pc <= '0';) 600 SB
300 1302 550 (          load <= '0';) 550 SB
300 1347 575 (          start <= '0';) 575 SB
300 1392 1450 (        WHEN 1 =>                        --  start loading) 1450 SB
300 1437 575 (          reset <= '0';) 575 SB
300 1482 550 (          load <= '1';) 550 SB
300 1527 600 (          inc_pc <= '1';) 600 SB
300 1572 750 (          instr <= "11001101";) 750 SB
300 1617 425 (        WHEN 2 =>) 425 SB
300 1662 750 (          instr <= "10010000";) 750 SB
300 1707 425 (        WHEN 3 =>) 425 SB
300 1752 750 (          instr <= "10000100";) 750 SB
300 1797 425 (        WHEN 4 =>) 425 SB
300 1842 750 (          instr <= "11001001";) 750 SB
300 1887 425 (        WHEN 5 =>) 425 SB
300 1932 750 (          instr <= "10011010";) 750 SB
300 1977 425 (        WHEN 6 =>) 425 SB
300 2022 750 (          instr <= "10011111";) 750 SB
300 2067 425 (        WHEN 7 =>) 425 SB
300 2112 750 (          instr <= "00010000";) 750 SB
300 2157 425 (        WHEN 8 =>) 425 SB
300 2202 750 (          instr <= "11101011";) 750 SB
300 2247 425 (        WHEN 9 =>) 425 SB
300 2292 750 (          instr <= "01000110";) 750 SB
300 2337 450 (        WHEN 10 =>) 450 SB
300 2382 750 (          instr <= "00101111";) 750 SB
300 2427 450 (        WHEN 11 =>) 450 SB
300 2472 750 (          instr <= "11010110";) 750 SB
300 2517 450 (        WHEN 12 =>) 450 SB
300 2562 750 (          instr <= "11000111";) 750 SB
300 2607 450 (        WHEN 13 =>) 450 SB
300 2652 750 (          instr <= "11000110";) 750 SB
300 2697 450 (        WHEN 14 =>) 450 SB
300 2742 750 (          instr <= "11010000";) 750 SB
300 2787 450 (        WHEN 15 =>) 450 SB
300 2832 550 (          load <= '0';) 550 SB
300 2877 600 (          inc_pc <= '0';) 600 SB
300 2922 575 (          reset <= '1';) 575 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 30 30
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 450 (        WHEN 16 =>) 450 SB
300 312 575 (          reset <= '0';) 575 SB
300 357 1250 (        WHEN 17 =>                       --  begin) 1250 SB
300 402 575 (          start <= '1';) 575 SB
300 447 650 (          input <= "0010";) 650 SB
300 492 450 (        WHEN 18 =>) 450 SB
300 537 575 (          start <= '0';) 575 SB
300 582 450 (        WHEN 23 =>) 450 SB
300 627 600 (          start  <= '1';) 600 SB
300 672 650 (          input <= "0111";) 650 SB
300 717 450 (        WHEN 24 =>) 450 SB
300 762 575 (          start <= '0';) 575 SB
300 807 475 (        WHEN 220 =>) 475 SB
300 852 575 (          start <= '1';) 575 SB
300 897 550 (        WHEN others =>) 550 SB
300 942 575 (          start <= '0';) 575 SB
300 987 1250 (      END CASE;                          --  state) 1250 SB
300 1032 725 (      t_state := t_state + 1;) 725 SB
300 1077 350 (  END PROCESS;) 350 SB
300 1122 425 (END process_test;) 425 SB
300 1212 1350 (CONFIGURATION process_test_config OF processor_test IS) 1350 SB
300 1257 450 (  FOR process_test) 450 SB
300 1302 525 (    FOR u1: processor) 525 SB
300 1347 800 (      USE ENTITY work.processor;) 800 SB
300 1392 1050 (    END FOR;                            --) 1050 SB
300 1437 1050 (  END FOR;                              --) 1050 SB
300 1482 600 (END process_test_config;) 600 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
571 1560 1258 (Listing 15. Simple Computer Multiplication Testbench) 1258 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 31 31
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 962 (CHAPTER 4. THE BASIC COMPUTER) 962 SB
0 0 0 fC
/fm 256 def
961 2 300 359 B
1 F
n
300 400 811 (4.0 The Basic Computer Definition) 811 SB
/fm 256 def
810 2 300 459 B
1 F
n
450 500 104 (The ) 116 SB
566 500 143 (Basic ) 155 SB
721 500 244 (Computer ) 256 SB
977 500 53 (is ) 65 SB
1042 500 85 (the ) 97 SB
1139 500 106 (first ) 118 SB
1257 500 101 (real ) 114 SB
1371 500 208 (example ) 221 SB
1592 500 62 (of ) 75 SB
1667 500 41 (a ) 54 SB
1721 500 183 (general ) 196 SB
1917 500 183 (purpose) 183 SB
300 600 159 (digital ) 163 SB
463 600 189 (system. ) 193 SB
656 600 15 ( ) 19 SB
675 600 104 (The ) 109 SB
784 600 134 (basic ) 139 SB
923 600 231 (computer ) 236 SB
1159 600 53 (is ) 58 SB
1217 600 192 (capable ) 197 SB
1414 600 62 (of ) 67 SB
1481 600 236 (executing ) 241 SB
1722 600 231 (programs ) 236 SB
1958 600 142 (stored) 142 SB
300 700 58 (in ) 72 SB
372 700 69 (its ) 83 SB
455 700 218 (memory. ) 232 SB
687 700 15 ( ) 29 SB
716 700 104 (The ) 118 SB
834 700 134 (basic ) 148 SB
982 700 231 (computer ) 245 SB
1227 700 92 (has ) 106 SB
1333 700 73 (4k ) 87 SB
1420 700 62 (of ) 76 SB
1496 700 73 (16 ) 87 SB
1583 700 75 (bit ) 89 SB
1672 700 218 (memory, ) 232 SB
1904 700 67 (so ) 82 SB
1986 700 114 (quite) 114 SB
300 800 211 (complex ) 221 SB
521 800 231 (programs ) 241 SB
762 800 95 (can ) 105 SB
867 800 70 (be ) 80 SB
947 800 267 (developed. ) 277 SB
1224 800 15 ( ) 25 SB
1249 800 104 (The ) 114 SB
1363 800 234 (following ) 244 SB
1607 800 201 (sections ) 211 SB
1818 800 112 (give ) 123 SB
1941 800 41 (a ) 52 SB
1993 800 107 (brief) 107 SB
300 900 228 (overview ) 231 SB
531 900 62 (of ) 66 SB
597 900 85 (the ) 89 SB
686 900 134 (basic ) 138 SB
824 900 246 (computer. ) 250 SB
1074 900 15 ( ) 19 SB
1093 900 94 (For ) 98 SB
1191 900 132 (more ) 136 SB
1327 900 197 (detailed ) 201 SB
1528 900 296 (information, ) 300 SB
1828 900 160 (please ) 164 SB
1992 900 108 (refer) 108 SB
300 1000 60 (to ) 70 SB
370 1000 185 (chapter ) 195 SB
565 1000 44 (5 ) 54 SB
619 1000 58 (in ) 68 SB
687 1000 244 (Computer ) 254 SB
941 1000 183 (System ) 193 SB
1134 1000 286 (Architecture) 286 SB
1420 1000 30 (, ) 40 SB
1460 1000 82 (M. ) 93 SB
1553 1000 172 (Morris ) 183 SB
1736 1000 165 (Mano, ) 176 SB
1912 1000 188 (Prentice) 188 SB
/fm 256 def
732 2 687 1059 B
1 F
n
300 1100 112 (Hall.) 112 SB
300 1300 745 (4.1 Basic Computer Instructions) 745 SB
/fm 256 def
744 2 300 1359 B
1 F
n
450 1400 104 (The ) 122 SB
572 1400 134 (basic ) 152 SB
724 1400 231 (computer ) 249 SB
973 1400 258 (instruction ) 276 SB
1249 1400 80 (set ) 98 SB
1347 1400 53 (is ) 71 SB
1418 1400 139 (made ) 158 SB
1576 1400 72 (up ) 91 SB
1667 1400 62 (of ) 81 SB
1748 1400 130 (three ) 149 SB
1897 1400 137 (types ) 156 SB
2053 1400 47 (of) 47 SB
300 1500 296 (instructions: ) 309 SB
609 1500 203 (memory ) 216 SB
825 1500 229 (reference ) 242 SB
1067 1500 296 (instructions, ) 309 SB
1376 1500 187 (register ) 200 SB
1576 1500 229 (reference ) 243 SB
1819 1500 281 (instructions,) 281 SB
300 1600 672 (and input/output instructions.) 672 SB
300 1800 863 (4.1.1 Memory Reference Instructions) 863 SB
/fm 256 def
862 2 300 1859 B
1 F
n
450 1900 56 (A ) 65 SB
515 1900 203 (memory ) 212 SB
727 1900 229 (reference ) 238 SB
965 1900 258 (instruction ) 268 SB
1233 1900 115 (uses ) 125 SB
1358 1900 44 (1 ) 54 SB
1412 1900 75 (bit ) 85 SB
1497 1900 60 (to ) 70 SB
1567 1900 243 (determine ) 253 SB
1820 1900 200 (whether ) 210 SB
2030 1900 70 (the) 70 SB
300 2000 258 (instruction ) 272 SB
572 2000 53 (is ) 67 SB
639 2000 146 (direct ) 160 SB
799 2000 63 (or ) 77 SB
876 2000 189 (indirect ) 203 SB
1079 2000 261 (addressing ) 275 SB
1354 2000 157 (mode, ) 171 SB
1525 2000 44 (3 ) 59 SB
1584 2000 98 (bits ) 113 SB
1697 2000 60 (to ) 75 SB
1772 2000 243 (determine ) 258 SB
2030 2000 70 (the) 70 SB
300 2100 247 (operation, ) 254 SB
554 2100 98 (and ) 105 SB
659 2100 73 (12 ) 80 SB
739 2100 98 (bits ) 105 SB
844 2100 60 (to ) 67 SB
911 2100 243 (determine ) 250 SB
1161 2100 85 (the ) 92 SB
1253 2100 205 (address. ) 212 SB
1465 2100 15 ( ) 23 SB
1488 2100 104 (The ) 112 SB
1600 2100 166 (format ) 174 SB
1774 2100 81 (for ) 89 SB
1863 2100 41 (a ) 49 SB
1912 2100 188 (memory) 188 SB
300 2200 928 (reference instruction appears in Table 8.) 928 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 740 def /pp_bx2 288 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1200 217 600 2367 CB
1199 216 600 2367 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\MEMREF.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 7:40:41 PM
%%BoundingBox: 0 740 288 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 67 M 0 -149 1198 0 0 149 3 D
0 p
10 1 1 lc lj ml
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (15)0 52 0 0 0 0 48 0 9 0 sb
0 (13)0 52 0 0 0 0 48 0 159 0 sb
0 (11)0 52 0 0 0 0 48 0 309 0 sb
0 (9)0 52 0 0 0 0 24 0 473 0 sb
0 (7)0 52 0 0 0 0 24 0 623 0 sb
0 (5)0 52 0 0 0 0 24 0 773 0 sb
0 (3)0 52 0 0 0 0 24 0 923 0 sb
0 (1)0 52 0 0 0 0 24 0 1072 0 sb
0 (0)0 52 0 0 0 0 24 0 1147 0 sb
75 67 M 0 0 0 150 2 D
S
300 67 M 0 0 0 150 2 D
S
0 (I)0 52 0 0 0 0 16 0 28 112 sb
0 (OP)0 52 0 0 0 0 61 0 151 112 sb
0 (ADDR)0 52 0 0 0 0 136 0 668 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore654 2617 1092 (Table 8. Memory Reference Instruction Format) 1092 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 32 32
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
450 300 104 (The ) 109 SB
559 300 146 (seven ) 151 SB
710 300 203 (memory ) 208 SB
918 300 229 (reference ) 234 SB
1152 300 281 (instructions ) 286 SB
1438 300 86 (are ) 91 SB
1529 300 139 (listed ) 144 SB
1673 300 156 (below ) 161 SB
1834 300 58 (in ) 63 SB
1897 300 169 (Tables ) 174 SB
2071 300 29 (9) 29 SB
300 400 171 (and 10.) 171 SB
600 500 176 (Symbol) 176 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
776 500 135 (         ) 135 SB
900 500 461 (Binary Code\(15:12\)) 461 SB
1361 500 150 (          ) 150 SB
1500 500 268 (Description) 268 SB
0 0 0 fC
/fm 256 def
1167 2 600 559 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
600 600 125 (AND) 125 SB
900 600 116 (0000) 116 SB
1350 600 617 (AND memory word to AC) 617 SB
600 700 125 (ADD) 125 SB
900 700 116 (0001) 116 SB
1350 700 617 (ADD memory word to AC) 617 SB
600 800 117 (LDA) 117 SB
900 800 116 (0010) 116 SB
1350 800 540 (Load AC from memory) 540 SB
600 900 108 (STA) 108 SB
900 900 116 (0011) 116 SB
1350 900 523 (Store AC into memory) 523 SB
600 1000 122 (BUN) 122 SB
900 1000 116 (0100) 116 SB
1350 1000 535 (Branch unconditionally) 535 SB
600 1100 111 (BSA) 111 SB
900 1100 116 (0101) 116 SB
1350 1100 722 (Branch and save return address) 722 SB
600 1200 86 (ISZ) 86 SB
900 1200 116 (0110) 116 SB
1350 1200 603 (Increment and skip if zero) 603 SB
652 1300 1095 (Table 9. Direct Memory Reference Instructions) 1095 SB
600 1500 176 (Symbol) 176 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
776 1500 135 (         ) 135 SB
900 1500 461 (Binary Code\(15:12\)) 461 SB
1361 1500 150 (          ) 150 SB
1500 1500 268 (Description) 268 SB
/fm 256 def
1167 2 600 1559 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
600 1600 125 (AND) 125 SB
900 1600 116 (1000) 116 SB
1350 1600 617 (AND memory word to AC) 617 SB
600 1700 125 (ADD) 125 SB
900 1700 116 (1001) 116 SB
1350 1700 617 (ADD memory word to AC) 617 SB
600 1800 117 (LDA) 117 SB
900 1800 116 (1010) 116 SB
1350 1800 540 (Load AC from memory) 540 SB
600 1900 108 (STA) 108 SB
900 1900 116 (1011) 116 SB
1350 1900 523 (Store AC into memory) 523 SB
600 2000 122 (BUN) 122 SB
900 2000 116 (1100) 116 SB
1350 2000 535 (Branch unconditionally) 535 SB
600 2100 111 (BSA) 111 SB
900 2100 116 (1101) 116 SB
1350 2100 722 (Branch and save return address) 722 SB
600 2200 86 (ISZ) 86 SB
900 2200 116 (1110) 116 SB
1350 2200 603 (Increment and skip if zero) 603 SB
621 2300 1158 (Table 10. Indirect Memory Reference Instructions) 1158 SB
300 2500 858 (4.1.2 Register Reference Instructions) 858 SB
/fm 256 def
857 2 300 2559 B
1 F
n
450 2600 207 (Register ) 215 SB
665 2600 229 (reference ) 237 SB
902 2600 281 (instructions ) 289 SB
1191 2600 92 (use ) 100 SB
1291 2600 71 (all ) 79 SB
1370 2600 73 (16 ) 81 SB
1451 2600 98 (bits ) 106 SB
1557 2600 60 (to ) 68 SB
1625 2600 157 (define ) 165 SB
1790 2600 69 (an ) 78 SB
1868 2600 232 (operation.) 232 SB
300 2700 107 (Bits ) 108 SB
408 2700 73 (15 ) 74 SB
482 2700 273 (DOWNTO ) 274 SB
756 2700 73 (12 ) 74 SB
830 2700 86 (are ) 87 SB
917 2700 175 (always ) 176 SB
1093 2700 80 (set ) 81 SB
1174 2700 60 (to ) 61 SB
1235 2700 146 (0111. ) 147 SB
1382 2700 15 ( ) 16 SB
1398 2700 146 (Table ) 147 SB
1545 2700 73 (11 ) 74 SB
1619 2700 107 (lists ) 108 SB
1727 2700 85 (the ) 87 SB
1814 2700 75 (bit ) 77 SB
1891 2700 141 (fields ) 143 SB
2034 2700 66 (for) 66 SB
300 2800 1724 (the register reference instructions and Table 12 lists the actual instructions.) 1724 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 33 33
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 740 def /pp_bx2 288 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1200 217 600 267 CB
1199 216 600 267 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\REGREF.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 7:41:51 PM
%%BoundingBox: 0 740 288 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 67 M 0 -149 1198 0 0 149 3 D
0 p
10 1 1 lc lj ml
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (15)0 52 0 0 0 0 48 0 9 0 sb
0 (13)0 52 0 0 0 0 48 0 159 0 sb
0 (11)0 52 0 0 0 0 48 0 309 0 sb
0 (9)0 52 0 0 0 0 24 0 473 0 sb
0 (7)0 52 0 0 0 0 24 0 623 0 sb
0 (5)0 52 0 0 0 0 24 0 773 0 sb
0 (3)0 52 0 0 0 0 24 0 923 0 sb
0 (1)0 52 0 0 0 0 24 0 1072 0 sb
0 (0)0 52 0 0 0 0 24 0 1147 0 sb
300 67 M 0 0 0 150 2 D
S
0 (0111)0 52 0 0 0 0 95 0 92 112 sb
0 (Type)0 52 0 0 0 0 98 0 691 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
642 517 1116 (Table 11. Register Reference Instruction Format) 1116 SB
600 717 176 (Symbol) 176 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
776 717 135 (         ) 135 SB
900 717 461 (Binary Code\(11:00\)) 461 SB
1361 717 150 (          ) 150 SB
1500 717 268 (Description) 268 SB
0 0 0 fC
/fm 256 def
1167 2 600 776 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
600 817 114 (CLA) 114 SB
900 817 348 (100000000000) 348 SB
1350 817 220 (Clear AC) 220 SB
600 917 108 (CLE) 108 SB
900 917 348 (010000000000) 348 SB
1350 917 175 (Clear E) 175 SB
600 1017 132 (CMA) 132 SB
900 1017 348 (001000000000) 348 SB
1350 1017 378 (Compliment AC) 378 SB
600 1117 126 (CME) 126 SB
900 1117 348 (000100000000) 348 SB
1350 1117 333 (Compliment E) 333 SB
600 1217 97 (CIR) 97 SB
900 1217 348 (000010000000) 348 SB
1350 1217 574 (Circulate right E and AC) 574 SB
600 1317 92 (CIL) 92 SB
900 1317 348 (000001000000) 348 SB
1350 1317 543 (Circulate left E and AC) 543 SB
600 1417 100 (INC) 100 SB
900 1417 348 (000000100000) 348 SB
1350 1417 326 (Increment AC) 326 SB
600 1517 105 (SPA) 105 SB
900 1517 290 (0000000100) 290 SB
1190 1517 58 (00) 58 SB
1350 1517 444 (Skip if AC positive) 444 SB
600 1617 115 (SNA) 115 SB
900 1617 348 (000000001000) 348 SB
1350 1617 456 (Skip if AC negative) 456 SB
600 1717 108 (SZA) 108 SB
900 1717 348 (000000000100) 348 SB
1350 1717 363 (Skip if AC zero) 363 SB
600 1817 102 (SZE) 102 SB
900 1817 348 (000000000010) 348 SB
1350 1817 371 (Skip if E is zero) 371 SB
600 1917 110 (HLT) 110 SB
900 1917 348 (000000000001) 348 SB
1350 1917 342 (Halt Computer) 342 SB
720 2017 960 (Table 12. Register Reference Instructions) 960 SB
300 2217 712 (4.1.3 Input/Output Instructions) 712 SB
/fm 256 def
711 2 300 2276 B
1 F
n
450 2317 135 (Input ) 146 SB
596 2317 98 (and ) 109 SB
705 2317 161 (output ) 172 SB
877 2317 281 (instructions ) 292 SB
1169 2317 142 (allow ) 153 SB
1322 2317 85 (the ) 96 SB
1418 2317 231 (computer ) 242 SB
1660 2317 60 (to ) 71 SB
1731 2317 215 (interface ) 227 SB
1958 2317 60 (to ) 72 SB
2030 2317 70 (the) 70 SB
300 2417 181 (outside ) 189 SB
489 2417 164 (world. ) 172 SB
661 2417 15 ( ) 23 SB
684 2417 202 (Without ) 210 SB
894 2417 134 (these ) 142 SB
1036 2417 296 (instructions, ) 305 SB
1341 2417 85 (the ) 94 SB
1435 2417 231 (computer ) 240 SB
1675 2417 158 (would ) 167 SB
1842 2417 70 (be ) 79 SB
1921 2417 179 (useless.) 179 SB
300 2517 146 (Table ) 161 SB
461 2517 73 (13 ) 88 SB
549 2517 160 (shows ) 175 SB
724 2517 85 (the ) 100 SB
824 2517 92 (I/O ) 107 SB
931 2517 258 (instruction ) 273 SB
1204 2517 166 (format ) 181 SB
1385 2517 98 (and ) 113 SB
1498 2517 146 (Table ) 161 SB
1659 2517 73 (14 ) 88 SB
1747 2517 160 (shows ) 175 SB
1922 2517 85 (the ) 101 SB
2023 2517 77 (I/O) 77 SB
300 2617 281 (instructions.) 281 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 34 34
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 740 def /pp_bx2 288 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1200 217 600 267 CB
1199 216 600 267 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\IOINS.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 7:42:18 PM
%%BoundingBox: 0 740 288 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
0 67 M 0 -149 1198 0 0 149 3 D
0 p
10 1 1 lc lj ml
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (15)0 52 0 0 0 0 48 0 9 0 sb
0 (13)0 52 0 0 0 0 48 0 159 0 sb
0 (11)0 52 0 0 0 0 48 0 309 0 sb
0 (9)0 52 0 0 0 0 24 0 473 0 sb
0 (7)0 52 0 0 0 0 24 0 623 0 sb
0 (5)0 52 0 0 0 0 24 0 773 0 sb
0 (3)0 52 0 0 0 0 24 0 923 0 sb
0 (1)0 52 0 0 0 0 24 0 1072 0 sb
0 (0)0 52 0 0 0 0 24 0 1147 0 sb
300 67 M 0 0 0 150 2 D
S
0 (Type)0 52 0 0 0 0 98 0 691 112 sb
0 (1111)0 52 0 0 0 0 95 0 92 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
715 517 970 (Table 13. Input/Output Instruction Format) 970 SB
600 717 176 (Symbol) 176 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
776 717 135 (         ) 135 SB
900 717 432 (Binary Code\(11:0\)) 432 SB
1332 717 30 (  ) 30 SB
1350 717 268 (Description) 268 SB
0 0 0 fC
/fm 256 def
1017 2 600 776 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
600 817 93 (INP) 93 SB
900 817 348 (100000000000) 348 SB
1350 817 502 (Input character to AC) 502 SB
600 917 119 (OUT) 119 SB
900 917 348 (010000000000) 348 SB
1350 917 605 (Output character from AC) 605 SB
600 1017 92 (SKI) 92 SB
900 1017 348 (001000000000) 348 SB
1350 1017 410 (Skip on input flag) 410 SB
600 1117 115 (SKO) 115 SB
900 1117 348 (000100000000) 348 SB
1350 1117 440 (Skip on output flag) 440 SB
600 1217 103 (ION) 103 SB
900 1217 348 (000010000000) 348 SB
1350 1217 272 (Interrupt on) 272 SB
600 1317 92 (IOF) 92 SB
900 1317 348 (000001000000) 348 SB
1350 1317 280 (Interrupt off) 280 SB
793 1417 814 (Table 14. Input/Output Instructions) 814 SB
300 1617 1090 (4.2 The VHDL Solution to the Basic Computer) 1090 SB
/fm 256 def
1089 2 300 1676 B
1 F
n
450 1717 242 (Chapter 5 ) 243 SB
693 1717 58 (in ) 59 SB
752 1717 244 (Computer ) 245 SB
997 1717 183 (System ) 184 SB
1181 1717 301 (Architecture ) 302 SB
1483 1717 165 (details ) 166 SB
1649 1717 71 (all ) 72 SB
1721 1717 296 (instructions. ) 297 SB
2018 1717 15 ( ) 16 SB
2034 1717 66 (By) 66 SB
300 1817 137 (using ) 144 SB
444 1817 134 (these ) 142 SB
586 1817 180 (details, ) 188 SB
774 1817 46 (it ) 54 SB
828 1817 53 (is ) 61 SB
889 1817 204 (possible ) 212 SB
1101 1817 60 (to ) 68 SB
1169 1817 226 (construct ) 234 SB
1403 1817 41 (a ) 49 SB
1452 1817 174 (VHDL ) 182 SB
1634 1817 157 (model ) 165 SB
1799 1817 81 (for ) 89 SB
1888 1817 85 (the ) 93 SB
1981 1817 119 (basic) 119 SB
300 1917 246 (computer. ) 250 SB
550 1917 15 ( ) 19 SB
569 1917 96 (We ) 100 SB
669 1917 102 (will ) 106 SB
775 1917 88 (not ) 92 SB
867 1917 225 (duplicate ) 230 SB
1097 1917 71 (all ) 76 SB
1173 1917 85 (the ) 90 SB
1263 1917 281 (information ) 286 SB
1549 1917 58 (in ) 63 SB
1612 1917 185 (chapter ) 190 SB
1802 1917 59 (5, ) 64 SB
1866 1917 64 (as ) 69 SB
1935 1917 46 (it ) 51 SB
1986 1917 53 (is ) 58 SB
2044 1917 56 (all) 56 SB
300 2017 1196 (within the VHDL architecture and well commented.) 1196 SB
450 2117 79 (As ) 91 SB
541 2117 116 (with ) 128 SB
669 2117 85 (the ) 97 SB
766 2117 166 (simple ) 178 SB
944 2117 246 (computer, ) 258 SB
1202 2117 83 (we ) 96 SB
1298 2117 123 (have ) 136 SB
1434 2117 175 (broken ) 188 SB
1622 2117 85 (the ) 98 SB
1720 2117 164 (design ) 177 SB
1897 2117 103 (into ) 116 SB
2013 2117 87 (two) 87 SB
300 2217 720 (sections, memory and function.) 720 SB
300 2417 716 (4.2.1 Basic Computer Memory) 716 SB
/fm 256 def
715 2 300 2476 B
1 F
n
450 2517 104 (The ) 106 SB
556 2517 134 (basic ) 136 SB
692 2517 231 (computer ) 233 SB
925 2517 203 (memory ) 205 SB
1130 2517 53 (is ) 55 SB
1185 2517 131 (4096 ) 133 SB
1318 2517 152 (16-bit ) 154 SB
1472 2517 172 (words. ) 174 SB
1646 2517 15 ( ) 17 SB
1663 2517 96 (We ) 98 SB
1761 2517 126 (don't ) 128 SB
1889 2517 127 (want ) 129 SB
2018 2517 82 (this) 82 SB
300 2617 178 (section ) 181 SB
481 2617 265 (considered ) 268 SB
749 2617 81 (for ) 84 SB
833 2617 240 (synthesis, ) 244 SB
1077 2617 67 (so ) 71 SB
1148 2617 83 (we ) 87 SB
1235 2617 122 (shall ) 126 SB
1361 2617 256 (implement ) 260 SB
1621 2617 97 (this ) 101 SB
1722 2617 125 (code ) 129 SB
1851 2617 249 (separately.) 249 SB
300 2717 764 (Below is the memory subsection.) 764 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 35 35
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1800 (------------------------------------------------------------------------) 1800 SB
300 312 175 (-------) 175 SB
300 357 825 (--  Basic Computer Memory Segment) 825 SB
300 402 1800 (------------------------------------------------------------------------) 1800 SB
300 447 175 (-------) 175 SB
300 492 575 (USE work.basic_pkg.ALL;) 575 SB
300 537 675 (USE work.bv_arithmetic.ALL;) 675 SB
300 582 475 (ENTITY basic_mem IS) 475 SB
300 627 1500 (  PORT\(ar                 : IN      bit_vector\(11 DOWNTO 0\);) 1500 SB
300 672 1000 (       clock              : IN      bit;) 1000 SB
300 717 1000 (       load               : IN      bit;) 1000 SB
300 762 1500 (       instr              : IN      bit_vector\(15 DOWNTO 0\);) 1500 SB
300 807 1525 (       mem_in             : OUT      bit_vector\(15 DOWNTO 0\);) 1525 SB
300 852 1500 (       address_in         : IN      integer range 0 to 4095;) 1500 SB
300 897 1475 (       mem_out            : IN      bit_vector\(15 DOWNTO 0\)) 1475 SB
300 942 225 (       \);) 225 SB
300 987 350 (END basic_mem;) 350 SB
300 1077 1125 (ARCHITECTURE basic_mem_behave OF basic_mem IS) 1125 SB
300 1122 1075 (  SIGNAL memory : mem_array\(4095 DOWNTO 0\);) 1075 SB
300 1212 675 (BEGIN  --  basic_mem_behave) 675 SB
300 1257 500 (  PROCESS\(ar, clock\)) 500 SB
300 1302 1175 (    VARIABLE temp_ar : integer range 0 to 4095;) 1175 SB
300 1392 225 (    BEGIN) 225 SB
300 1437 675 (      temp_ar := bvtoi\(ar\);) 675 SB
300 1482 800 (      mem_in <= memory\(temp_ar\);) 800 SB
300 1527 350 (  END PROCESS;) 350 SB
300 1617 1075 (  PROCESS\(mem_out, address_in, load, instr\)) 1075 SB
300 1662 1475 (    VARIABLE    temp_ar          : integer range 0 to 4095;) 1475 SB
300 1707 225 (    BEGIN) 225 SB
300 1797 650 (      IF \(load = '1'\) THEN) 650 SB
300 1842 900 (        memory\(address_in\) <= instr;) 900 SB
300 1887 250 (      ELSE) 250 SB
300 1932 725 (        temp_ar := bvtoi\(ar\);) 725 SB
300 1977 875 (        memory\(temp_ar\) <= mem_out;) 875 SB
300 2022 325 (      END IF;) 325 SB
300 2067 350 (  END PROCESS;) 350 SB
300 2112 525 (END basic_mem_behave;) 525 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
777 2190 846 (Listing 16. Basic Computer Memory) 846 SB
300 2390 831 (4.2.2 Basic Computer VHDL Entity) 831 SB
0 0 0 fC
/fm 256 def
830 2 300 2449 B
1 F
n
450 2490 1089 (The interface to the basic computer consists of:) 1089 SB
300 2590 195 (CLOCK) 195 SB
750 2590 358 (A driving clock) 358 SB
300 2690 159 (LOAD) 159 SB
750 2690 471 (Load memory signal) 471 SB
300 2790 182 (START) 182 SB
750 2790 531 (Start sequencing signal) 531 SB
300 2890 176 (RESET) 176 SB
750 2890 580 (Reset the basic computer) 580 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 36 36
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 353 (ADDRESS_IN) 353 SB
750 300 625 (The address to load data to) 625 SB
300 400 167 (INSTR) 167 SB
750 400 378 (Input instruction) 378 SB
300 500 132 (INPR) 132 SB
750 500 76 (Inp) 76 SB
826 500 231 (ut register) 231 SB
300 600 92 (FGI) 92 SB
750 600 387 (Input enable flag) 387 SB
300 700 80 (AR) 80 SB
750 700 466 (The address register) 466 SB
300 800 58 (IR) 58 SB
750 800 454 (Instruction Register) 454 SB
300 900 74 (TR) 74 SB
750 900 436 (Temporary storage) 436 SB
300 1000 81 (DR) 81 SB
750 1000 297 (Data register) 297 SB
300 1100 19 (I) 19 SB
750 1100 280 (Indirect flag) 280 SB
300 1200 35 (E) 35 SB
750 1200 196 (Error bit) 196 SB
300 1300 80 (AC) 80 SB
750 1300 297 (Accumulator) 297 SB
300 1400 96 (IEN) 96 SB
750 1400 387 (Input enable flag) 387 SB
300 1500 158 (OUTR) 158 SB
750 1500 346 (Output register) 346 SB
300 1600 115 (FGO) 115 SB
750 1600 261 (Output flag) 261 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 1767 500 (ENTITY basic_comp IS) 500 SB
300 1812 925 (  PORT\(clock            : IN     bit;) 925 SB
300 1857 925 (       load             : IN     bit;) 925 SB
300 1902 925 (       start            : IN     bit;) 925 SB
300 1947 925 (       reset            : IN     bit;) 925 SB
300 1992 1425 (       address_in       : IN     integer range 0 to 4095;) 1425 SB
300 2037 1425 (       instr            : IN     bit_vector\(15 DOWNTO 0\);) 1425 SB
300 2082 1400 (       inpr             : IN     bit_vector\(7 DOWNTO 0\);) 1400 SB
300 2127 925 (       fgi              : IN     bit;) 925 SB
300 2172 1425 (       ar               : BUFFER bit_vector\(11 DOWNTO 0\);) 1425 SB
300 2217 1425 (       ir               : BUFFER bit_vector\(15 DOWNTO 0\);) 1425 SB
300 2262 1425 (       tr               : BUFFER bit_vector\(11 DOWNTO 0\);) 1425 SB
300 2307 1425 (       dr               : BUFFER bit_vector\(11 DOWNTO 0\);) 1425 SB
300 2352 925 (       i                : BUFFER bit;) 925 SB
300 2397 925 (       e                : BUFFER bit;) 925 SB
300 2442 1425 (       ac               : BUFFER bit_vector\(15 DOWNTO 0\);) 1425 SB
300 2487 925 (       ien              : BUFFER bit;) 925 SB
300 2532 1400 (       outr             : BUFFER bit_vector\(7 DOWNTO 0\);) 1400 SB
300 2577 900 (       fgo              : BUFFER bit) 900 SB
300 2622 225 (       \);) 225 SB
300 2712 375 (END basic_comp;) 375 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
806 2790 787 (Listing 17. Basic Computer Entity) 787 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 37 37
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 805 (4.2.3 Basic Computer Architecture) 805 SB
0 0 0 fC
/fm 256 def
804 2 300 359 B
1 F
n
450 400 104 (The ) 107 SB
557 400 134 (basic ) 137 SB
694 400 231 (computer ) 234 SB
928 400 115 (uses ) 118 SB
1046 400 41 (a ) 44 SB
1090 400 147 (series ) 150 SB
1240 400 62 (of ) 65 SB
1305 400 116 (case ) 119 SB
1424 400 258 (statements ) 261 SB
1685 400 98 (and ) 101 SB
1786 400 133 (other ) 137 SB
1923 400 128 (logic ) 132 SB
2055 400 45 (to) 45 SB
300 500 256 (implement ) 270 SB
570 500 85 (the ) 99 SB
669 500 215 (behavior ) 229 SB
898 500 62 (of ) 77 SB
975 500 85 (the ) 100 SB
1075 500 134 (basic ) 149 SB
1224 500 246 (computer. ) 261 SB
1485 500 15 ( ) 30 SB
1515 500 116 (This ) 131 SB
1646 500 165 (allows ) 180 SB
1826 500 66 (us ) 81 SB
1907 500 60 (to ) 75 SB
1982 500 118 (write) 118 SB
300 600 183 (generic ) 185 SB
485 600 209 (handlers ) 211 SB
696 600 81 (for ) 83 SB
779 600 121 (each ) 123 SB
902 600 258 (instruction ) 261 SB
1163 600 114 (type ) 117 SB
1280 600 98 (and ) 101 SB
1381 600 193 (specific ) 196 SB
1577 600 296 (instructions. ) 299 SB
1876 600 15 ( ) 18 SB
1894 600 165 (Below ) 168 SB
2062 600 38 (is) 38 SB
300 700 1294 (the actual VHDL which implements the basic computer.) 1294 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 867 1050 (ARCHITECTURE behave_basic OF basic_comp IS) 1050 SB
300 912 525 (  COMPONENT basic_mem) 525 SB
300 957 1550 (    PORT\(ar                 : IN      bit_vector\(11 DOWNTO 0\);) 1550 SB
300 1002 1050 (         clock              : IN      bit;) 1050 SB
300 1047 1050 (         load               : IN      bit;) 1050 SB
300 1092 1550 (         instr              : IN      bit_vector\(15 DOWNTO 0\);) 1550 SB
300 1137 1575 (         mem_in             : OUT      bit_vector\(15 DOWNTO 0\);) 1575 SB
300 1182 1550 (         address_in         : IN      integer range 0 to 4095;) 1550 SB
300 1227 1425 (         mem_out            : IN  bit_vector\(15 DOWNTO 0\)) 1425 SB
300 1272 275 (         \);) 275 SB
300 1317 400 (  END COMPONENT;) 400 SB
300 1362 500 (  SIGNAL halt : bit;) 500 SB
300 1407 575 (  SIGNAL fgi_int : bit;) 575 SB
300 1452 950 (  SIGNAL pc : bit_vector\(11 DOWNTO 0\);) 950 SB
300 1497 1050 (  SIGNAL mem_in : bit_vector\(15 DOWNTO 0\);) 1050 SB
300 1542 1075 (  SIGNAL mem_out : bit_vector\(15 DOWNTO 0\);) 1075 SB
300 1632 575 (BEGIN  --  behave_basic) 575 SB
300 1722 375 (  u1: basic_mem) 375 SB
300 1767 500 (  PORT MAP\(ar => ar,) 500 SB
300 1812 650 (           clock => clock,) 650 SB
300 1857 600 (           load => load,) 600 SB
300 1902 650 (           instr => instr,) 650 SB
300 1947 700 (           mem_in => mem_in,) 700 SB
300 1992 900 (           address_in => address_in,) 900 SB
300 2037 775 (           mem_out => mem_out\);) 775 SB
300 2082 225 (  PROCESS) 225 SB
300 2127 850 (    VARIABLE cycle : integer := 0;) 850 SB
300 2172 800 (    VARIABLE temp_add : integer;) 800 SB
300 2217 1175 (    VARIABLE temp_pc : integer range 0 to 4095;) 1175 SB
300 2262 775 (    VARIABLE temp_ac : integer;) 775 SB
300 2307 1175 (    VARIABLE temp_ar : integer range 0 to 4095;) 1175 SB
300 2352 1175 (    VARIABLE temp_dr : integer range 0 to 4095;) 1175 SB
300 2397 600 (    VARIABLE temp : bit;) 600 SB
300 2442 1175 (    VARIABLE dr_temp : bit_vector\(15 DOWNTO 0\);) 1175 SB
300 2532 225 (    BEGIN) 225 SB
300 2577 1125 (      WAIT UNTIL clock'EVENT AND clock = '1';) 1125 SB
300 2667 675 (      IF \(reset = '1'\) THEN) 675 SB
300 2712 750 (        pc <= \(others => '0'\);) 750 SB
300 2757 500 (        halt <= '1';) 500 SB
300 2802 325 (      END IF;) 325 SB
300 2892 625 (      IF \(fgi = '1'\) THEN) 625 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 38 38
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 575 (        fgi_int <= '1';) 575 SB
300 312 325 (      END IF;) 325 SB
300 402 675 (      IF \(start = '1'\) THEN) 675 SB
300 447 500 (        halt <= '0';) 500 SB
300 492 325 (      END IF;) 325 SB
300 582 650 (      IF \(halt = '0'\) THEN) 650 SB
300 627 475 (      CASE cycle IS) 475 SB
300 717 1800 (------------------------------------------------------------------------) 1800 SB
300 762 175 (-------) 175 SB
300 807 400 (--  fetch cycles) 400 SB
300 852 1800 (------------------------------------------------------------------------) 1800 SB
300 897 175 (-------) 175 SB
300 942 425 (        WHEN 0 =>) 425 SB
300 1032 1800 (------------------------------------------------------------------------) 1800 SB
300 1077 175 (-------) 175 SB
300 1122 650 (--  Interupt routine start) 650 SB
300 1167 1800 (------------------------------------------------------------------------) 1800 SB
300 1212 175 (-------) 175 SB
300 1257 1600 (          IF \(\(ien = '1'\) AND \(fgi_int = '1' OR fgo = '1'\)\) THEN) 1600 SB
300 1302 850 (            ar <= \(others => '0'\);) 850 SB
300 1347 525 (            tr <= pc;) 525 SB
300 1392 600 (            cycle := 99;) 600 SB
300 1482 1800 (------------------------------------------------------------------------) 1800 SB
300 1527 175 (-------) 175 SB
300 1572 575 (--  regular fetch cycle) 575 SB
300 1617 1800 (------------------------------------------------------------------------) 1800 SB
300 1662 175 (-------) 175 SB
300 1707 350 (          ELSE) 350 SB
300 1752 525 (            ar <= pc;) 525 SB
300 1797 575 (            cycle := 1;) 575 SB
300 1842 425 (          END IF;) 425 SB
300 1932 425 (        WHEN 1 =>) 425 SB
300 1977 575 (          ir <= mem_in;) 575 SB
300 2022 775 (          temp_pc := bvtoi\(pc\);) 775 SB
300 2067 825 (          temp_pc := temp_pc + 1;) 825 SB
300 2112 875 (          pc <= itobv\(temp_pc, 12\);) 875 SB
300 2157 525 (          cycle := 2;) 525 SB
300 2247 1800 (------------------------------------------------------------------------) 1800 SB
300 2292 175 (-------) 175 SB
300 2337 400 (--  Decode Cycle) 400 SB
300 2382 1800 (------------------------------------------------------------------------) 1800 SB
300 2427 175 (-------) 175 SB
300 2472 425 (        WHEN 2 =>) 425 SB
300 2517 800 (          ar <= ir\(11 DOWNTO 0\);) 800 SB
300 2562 550 (          i <= ir\(15\);) 550 SB
300 2607 1125 (          IF \(ir\(15 DOWNTO 12\) = "0111"\) THEN) 1125 SB
300 2652 600 (            cycle := 11;) 600 SB
300 2697 1200 (          ELSIF \(ir\(15 DOWNTO 12\) = "1111"\) THEN) 1200 SB
300 2742 600 (            cycle := 12;) 600 SB
300 2787 350 (          ELSE) 350 SB
300 2832 575 (            cycle := 3;) 575 SB
300 2877 425 (          END IF;) 425 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 39 39
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 425 (        WHEN 3 =>) 425 SB
300 357 1800 (------------------------------------------------------------------------) 1800 SB
300 402 175 (-------) 175 SB
300 447 675 (--  Indirect Cycle if i = 1) 675 SB
300 492 1800 (------------------------------------------------------------------------) 1800 SB
300 537 175 (-------) 175 SB
300 582 1400 (          IF \(i = '1'\) THEN              --  indirect op) 1400 SB
300 627 950 (            ar <= mem_in\(11 DOWNTO 0\);) 950 SB
300 672 425 (          END IF;) 425 SB
300 717 525 (          cycle := 4;) 525 SB
300 807 1800 (------------------------------------------------------------------------) 1800 SB
300 852 175 (-------) 175 SB
300 897 825 (--  Memory Reference Instructions) 825 SB
300 942 1800 (------------------------------------------------------------------------) 1800 SB
300 987 175 (-------) 175 SB
300 1032 425 (        WHEN 4 =>) 425 SB
300 1077 850 (          CASE ir\(14 DOWNTO 12\) IS) 850 SB
300 1167 1800 (------------------------------------------------------------------------) 1800 SB
300 1212 175 (-------) 175 SB
300 1257 175 (--  AND) 175 SB
300 1302 1800 (------------------------------------------------------------------------) 1800 SB
300 1347 175 (-------) 175 SB
300 1392 625 (            WHEN "000" =>) 625 SB
300 1437 1000 (              dr <= mem_in\(11 DOWNTO 0\);) 1000 SB
300 1482 625 (              cycle := 5;) 625 SB
300 1572 1800 (------------------------------------------------------------------------) 1800 SB
300 1617 175 (-------) 175 SB
300 1662 175 (--  ADD) 175 SB
300 1707 1800 (------------------------------------------------------------------------) 1800 SB
300 1752 175 (-------) 175 SB
300 1797 625 (            WHEN "001" =>) 625 SB
300 1842 1000 (              dr <= mem_in\(11 DOWNTO 0\);) 1000 SB
300 1887 625 (              cycle := 6;) 625 SB
300 1977 1800 (------------------------------------------------------------------------) 1800 SB
300 2022 175 (-------) 175 SB
300 2067 175 (--  LDA) 175 SB
300 2112 1800 (------------------------------------------------------------------------) 1800 SB
300 2157 175 (-------) 175 SB
300 2202 625 (            WHEN "010" =>) 625 SB
300 2247 1000 (              dr <= mem_in\(11 DOWNTO 0\);) 1000 SB
300 2292 625 (              cycle := 7;) 625 SB
300 2382 1800 (------------------------------------------------------------------------) 1800 SB
300 2427 175 (-------) 175 SB
300 2472 175 (--  STA) 175 SB
300 2517 1800 (------------------------------------------------------------------------) 1800 SB
300 2562 175 (-------) 175 SB
300 2607 625 (            WHEN "011" =>) 625 SB
300 2652 700 (              mem_out <= ac;) 700 SB
300 2697 625 (              cycle := 0;) 625 SB
300 2787 1800 (------------------------------------------------------------------------) 1800 SB
300 2832 175 (-------) 175 SB
300 2877 175 (--  BUN) 175 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 40 40
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1800 (------------------------------------------------------------------------) 1800 SB
300 312 175 (-------) 175 SB
300 357 625 (            WHEN "100" =>) 625 SB
300 402 1000 (              pc <= mem_in\(11 DOWNTO 0\);) 1000 SB
300 447 625 (              cycle := 0;) 625 SB
300 537 1800 (------------------------------------------------------------------------) 1800 SB
300 582 175 (-------) 175 SB
300 627 175 (--  BSA) 175 SB
300 672 1800 (------------------------------------------------------------------------) 1800 SB
300 717 175 (-------) 175 SB
300 762 625 (            WHEN "101" =>) 625 SB
300 807 1025 (              mem_out\(11 DOWNTO 0\) <= pc;) 1025 SB
300 852 875 (              temp_ar := bvtoi\(ar\);) 875 SB
300 897 950 (              temp_add := temp_ar + 1;) 950 SB
300 942 975 (              ar <= itobv\(temp_ar, 12\);) 975 SB
300 987 625 (              cycle := 8;) 625 SB
300 1077 1800 (------------------------------------------------------------------------) 1800 SB
300 1122 175 (-------) 175 SB
300 1167 175 (--  ISZ) 175 SB
300 1212 1800 (------------------------------------------------------------------------) 1800 SB
300 1257 175 (-------) 175 SB
300 1302 625 (            WHEN "110" =>) 625 SB
300 1347 1000 (              dr <= mem_in\(11 DOWNTO 0\);) 1000 SB
300 1392 625 (              cycle := 9;) 625 SB
300 1437 650 (            WHEN others =>) 650 SB
300 1482 1525 (          END CASE;                      --  ir\(14 DOWNTO 12\)) 1525 SB
300 1572 1800 (------------------------------------------------------------------------) 1800 SB
300 1617 175 (-------) 175 SB
300 1662 575 (--  AND Cycle continued) 575 SB
300 1707 1800 (------------------------------------------------------------------------) 1800 SB
300 1752 175 (-------) 175 SB
300 1797 425 (        WHEN 5 =>) 425 SB
300 1842 925 (          dr_temp\(11 DOWNTO 0\) := dr;) 925 SB
300 1887 775 (          ac <= ac AND dr_temp;) 775 SB
300 1932 525 (          cycle := 0;) 525 SB
300 2022 1800 (------------------------------------------------------------------------) 1800 SB
300 2067 175 (-------) 175 SB
300 2112 425 (--  ADD Continued) 425 SB
300 2157 1800 (------------------------------------------------------------------------) 1800 SB
300 2202 175 (-------) 175 SB
300 2247 425 (        WHEN 6 =>) 425 SB
300 2292 775 (          temp_ac := bvtoi\(ac\);) 775 SB
300 2337 775 (          temp_dr := bvtoi\(dr\);) 775 SB
300 2382 1000 (          temp_add := temp_ac + temp_dr;) 1000 SB
300 2427 825 (          IF \(temp_add > 15\) THEN) 825 SB
300 2472 525 (            e <= '1';) 525 SB
300 2517 350 (          ELSE) 350 SB
300 2562 525 (            e <= '0';) 525 SB
300 2607 425 (          END IF;) 425 SB
300 2652 900 (          ac <= itobv\(temp_add, 15\);) 900 SB
300 2697 525 (          cycle := 0;) 525 SB
300 2787 1800 (------------------------------------------------------------------------) 1800 SB
300 2832 175 (-------) 175 SB
300 2877 425 (--  LDA continued) 425 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 41 41
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1800 (------------------------------------------------------------------------) 1800 SB
300 312 175 (-------) 175 SB
300 357 425 (        WHEN 7 =>) 425 SB
300 402 800 (          ac\(11 DOWNTO 0\) <= dr;) 800 SB
300 447 1175 (          ac\(15 DOWNTO 12\)  <= \(others => '0'\);) 1175 SB
300 492 525 (          cycle := 0;) 525 SB
300 582 1800 (------------------------------------------------------------------------) 1800 SB
300 627 175 (-------) 175 SB
300 672 425 (--  BUN continued) 425 SB
300 717 1800 (------------------------------------------------------------------------) 1800 SB
300 762 175 (-------) 175 SB
300 807 425 (        WHEN 8 =>) 425 SB
300 852 475 (          pc <= ar;) 475 SB
300 897 525 (          cycle := 0;) 525 SB
300 987 1800 (------------------------------------------------------------------------) 1800 SB
300 1032 175 (-------) 175 SB
300 1077 425 (--  ISZ continued) 425 SB
300 1122 1800 (------------------------------------------------------------------------) 1800 SB
300 1167 175 (-------) 175 SB
300 1212 425 (        WHEN 9 =>) 425 SB
300 1257 775 (          temp_dr := bvtoi\(dr\);) 775 SB
300 1302 850 (          temp_add := temp_dr + 1;) 850 SB
300 1347 875 (          dr <= itobv\(temp_dr, 11\);) 875 SB
300 1392 550 (          cycle := 10;) 550 SB
300 1437 450 (        WHEN 10 =>) 450 SB
300 1482 925 (          mem_out\(11 downto 0\) <= dr;) 925 SB
300 1527 1075 (          IF \(dr = "0000000000000000"\) THEN) 1075 SB
300 1572 825 (            temp_pc := bvtoi\(pc\);) 825 SB
300 1617 900 (            temp_add := temp_pc + 1;) 900 SB
300 1662 950 (            pc <= itobv\(temp_add, 11\);) 950 SB
300 1707 425 (          END IF;) 425 SB
300 1752 525 (          cycle := 0;) 525 SB
300 1842 1800 (------------------------------------------------------------------------) 1800 SB
300 1887 175 (-------) 175 SB
300 1932 875 (--  Register reference instructions) 875 SB
300 1977 1800 (------------------------------------------------------------------------) 1800 SB
300 2022 175 (-------) 175 SB
300 2067 450 (        WHEN 11 =>) 450 SB
300 2112 825 (          CASE ir\(11 DOWNTO 0\) IS) 825 SB
300 2202 1800 (------------------------------------------------------------------------) 1800 SB
300 2247 175 (-------) 175 SB
300 2292 175 (--  CLA) 175 SB
300 2337 1800 (------------------------------------------------------------------------) 1800 SB
300 2382 175 (-------) 175 SB
300 2427 850 (            WHEN "100000000000" =>) 850 SB
300 2472 900 (              ac <= \(others => '0'\);) 900 SB
300 2562 1800 (------------------------------------------------------------------------) 1800 SB
300 2607 175 (-------) 175 SB
300 2652 175 (--  CLE) 175 SB
300 2697 1800 (------------------------------------------------------------------------) 1800 SB
300 2742 175 (-------) 175 SB
300 2787 850 (            WHEN "010000000000" =>) 850 SB
300 2832 575 (              e <= '0';) 575 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 42 42
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1800 (------------------------------------------------------------------------) 1800 SB
300 312 175 (-------) 175 SB
300 357 175 (--  CMA) 175 SB
300 402 1800 (------------------------------------------------------------------------) 1800 SB
300 447 175 (-------) 175 SB
300 492 850 (            WHEN "001000000000" =>) 850 SB
300 537 700 (              ac <= NOT\(ac\);) 700 SB
300 627 1800 (------------------------------------------------------------------------) 1800 SB
300 672 175 (-------) 175 SB
300 717 175 (--  CME) 175 SB
300 762 1800 (------------------------------------------------------------------------) 1800 SB
300 807 175 (-------) 175 SB
300 852 850 (            WHEN "000100000000" =>) 850 SB
300 897 650 (              e <= NOT\(e\);) 650 SB
300 987 1800 (------------------------------------------------------------------------) 1800 SB
300 1032 175 (-------) 175 SB
300 1077 175 (--  CIR) 175 SB
300 1122 1800 (------------------------------------------------------------------------) 1800 SB
300 1167 175 (-------) 175 SB
300 1212 850 (            WHEN "000010000000" =>) 850 SB
300 1257 700 (              temp := ac\(0\);) 700 SB
300 1302 875 (              FOR i IN 0 to 14 LOOP) 875 SB
300 1347 825 (                ac\(i\) <= ac\(i+1\);) 825 SB
300 1392 1150 (              END LOOP;                  --  i) 1150 SB
300 1437 650 (              ac\(15\) <= e;) 650 SB
300 1482 600 (              e <= temp;) 600 SB
300 1572 1800 (------------------------------------------------------------------------) 1800 SB
300 1617 175 (-------) 175 SB
300 1662 175 (--  CIL) 175 SB
300 1707 1800 (------------------------------------------------------------------------) 1800 SB
300 1752 175 (-------) 175 SB
300 1797 850 (            WHEN "000001000000" =>) 850 SB
300 1842 725 (              temp := ac\(15\);) 725 SB
300 1887 975 (              FOR i IN 14 DOWNTO 0 LOOP) 975 SB
300 1932 825 (                ac\(i+1\) <= ac\(i\);) 825 SB
300 1977 1150 (              END LOOP;                  --  i) 1150 SB
300 2022 625 (              ac\(0\) <= e;) 625 SB
300 2067 650 (              e <= ac\(15\);) 650 SB
300 2157 1800 (------------------------------------------------------------------------) 1800 SB
300 2202 175 (-------) 175 SB
300 2247 175 (--  INC) 175 SB
300 2292 1800 (------------------------------------------------------------------------) 1800 SB
300 2337 175 (-------) 175 SB
300 2382 850 (            WHEN "000000100000" =>) 850 SB
300 2427 875 (              temp_ac := bvtoi\(ac\);) 875 SB
300 2472 950 (              temp_add := temp_ac + 1;) 950 SB
300 2517 1000 (              ac <= itobv\(temp_add, 15\);) 1000 SB
300 2607 1800 (------------------------------------------------------------------------) 1800 SB
300 2652 175 (-------) 175 SB
300 2697 175 (--  SPA) 175 SB
300 2742 1800 (------------------------------------------------------------------------) 1800 SB
300 2787 175 (-------) 175 SB
300 2832 850 (            WHEN "000000010000" =>) 850 SB
300 2877 900 (              IF \(ac\(15\) = '0'\) THEN) 900 SB
300 2922 925 (                temp_pc := bvtoi\(pc\);) 925 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 43 43
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1000 (                temp_add := temp_pc + 1;) 1000 SB
300 312 1050 (                pc <= itobv\(temp_add, 11\);) 1050 SB
300 357 525 (              END IF;) 525 SB
300 447 1800 (------------------------------------------------------------------------) 1800 SB
300 492 175 (-------) 175 SB
300 537 175 (--  SNA) 175 SB
300 582 1800 (------------------------------------------------------------------------) 1800 SB
300 627 175 (-------) 175 SB
300 672 850 (            WHEN "000000001000" =>) 850 SB
300 717 900 (              IF \(ac\(15\) = '1'\) THEN) 900 SB
300 762 925 (                temp_pc := bvtoi\(pc\);) 925 SB
300 807 1000 (                temp_add := temp_pc + 1;) 1000 SB
300 852 1050 (                pc <= itobv\(temp_add, 11\);) 1050 SB
300 897 525 (              END IF;) 525 SB
300 987 1800 (------------------------------------------------------------------------) 1800 SB
300 1032 175 (-------) 175 SB
300 1077 175 (--  SZA) 175 SB
300 1122 1800 (------------------------------------------------------------------------) 1800 SB
300 1167 175 (-------) 175 SB
300 1212 850 (            WHEN "000000000100" =>) 850 SB
300 1257 1175 (              IF \(ac = "0000000000000000"\) THEN) 1175 SB
300 1302 925 (                temp_pc := bvtoi\(pc\);) 925 SB
300 1347 1000 (                temp_add := temp_pc + 1;) 1000 SB
300 1392 1050 (                pc <= itobv\(temp_add, 11\);) 1050 SB
300 1437 525 (              END IF;) 525 SB
300 1527 1800 (------------------------------------------------------------------------) 1800 SB
300 1572 175 (-------) 175 SB
300 1617 175 (--  SZE) 175 SB
300 1662 1800 (------------------------------------------------------------------------) 1800 SB
300 1707 175 (-------) 175 SB
300 1752 850 (            WHEN "000000000010" =>) 850 SB
300 1797 775 (              IF \(e = '0'\) THEN) 775 SB
300 1842 925 (                temp_pc := bvtoi\(pc\);) 925 SB
300 1887 1000 (                temp_add := temp_pc + 1;) 1000 SB
300 1932 1050 (                pc <= itobv\(temp_add, 11\);) 1050 SB
300 1977 525 (              END IF;) 525 SB
300 2067 1800 (------------------------------------------------------------------------) 1800 SB
300 2112 175 (-------) 175 SB
300 2157 175 (--  HLT) 175 SB
300 2202 1800 (------------------------------------------------------------------------) 1800 SB
300 2247 175 (-------) 175 SB
300 2292 850 (            WHEN "000000000001" =>) 850 SB
300 2337 650 (              halt <= '1';) 650 SB
300 2382 675 (            WHEN others  =>) 675 SB
300 2427 1500 (          END CASE;                      --  ir\(11 DOWNTO 0\)) 1500 SB
300 2472 525 (          cycle := 0;) 525 SB
300 2562 1800 (------------------------------------------------------------------------) 1800 SB
300 2607 175 (-------) 175 SB
300 2652 650 (--  Input-Output Functions) 650 SB
300 2697 1800 (------------------------------------------------------------------------) 1800 SB
300 2742 175 (-------) 175 SB
300 2787 450 (        WHEN 12 =>) 450 SB
300 2832 825 (          CASE ir\(11 DOWNTO 0\) IS) 825 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 44 44
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1800 (------------------------------------------------------------------------) 1800 SB
300 312 175 (-------) 175 SB
300 357 175 (--  INP) 175 SB
300 402 1800 (------------------------------------------------------------------------) 1800 SB
300 447 175 (-------) 175 SB
300 492 850 (            WHEN "100000000000" =>) 850 SB
300 537 925 (              ac\(7 DOWNTO 0\) <= inpr;) 925 SB
300 582 725 (              fgi_int <= '0';) 725 SB
300 672 1800 (------------------------------------------------------------------------) 1800 SB
300 717 175 (-------) 175 SB
300 762 175 (--  OUT) 175 SB
300 807 1800 (------------------------------------------------------------------------) 1800 SB
300 852 175 (-------) 175 SB
300 897 850 (            WHEN "010000000000" =>) 850 SB
300 942 925 (              outr <= ac\(7 DOWNTO 0\);) 925 SB
300 987 625 (              fgo <= '0';) 625 SB
300 1077 1800 (------------------------------------------------------------------------) 1800 SB
300 1122 175 (-------) 175 SB
300 1167 175 (--  SKI) 175 SB
300 1212 1800 (------------------------------------------------------------------------) 1800 SB
300 1257 175 (-------) 175 SB
300 1302 850 (            WHEN "001000000000" =>) 850 SB
300 1347 925 (              IF \(fgi_int = '1'\) THEN) 925 SB
300 1392 925 (                temp_pc := bvtoi\(pc\);) 925 SB
300 1437 1000 (                temp_add := temp_pc + 1;) 1000 SB
300 1482 1050 (                pc <= itobv\(temp_add, 11\);) 1050 SB
300 1527 525 (              END IF;) 525 SB
300 1617 1800 (------------------------------------------------------------------------) 1800 SB
300 1662 175 (-------) 175 SB
300 1707 175 (--  SKO) 175 SB
300 1752 1800 (------------------------------------------------------------------------) 1800 SB
300 1797 175 (-------) 175 SB
300 1842 850 (            WHEN "000100000000" =>) 850 SB
300 1887 825 (              IF \(fgo = '0'\) THEN) 825 SB
300 1932 925 (                temp_pc := bvtoi\(pc\);) 925 SB
300 1977 1000 (                temp_add := temp_pc + 1;) 1000 SB
300 2022 1050 (                pc <= itobv\(temp_add, 11\);) 1050 SB
300 2067 525 (              END IF;) 525 SB
300 2157 1800 (------------------------------------------------------------------------) 1800 SB
300 2202 175 (-------) 175 SB
300 2247 175 (--  ION) 175 SB
300 2292 1800 (------------------------------------------------------------------------) 1800 SB
300 2337 175 (-------) 175 SB
300 2382 850 (            WHEN "000010000000" =>) 850 SB
300 2427 625 (              ien <= '1';) 625 SB
300 2517 1800 (------------------------------------------------------------------------) 1800 SB
300 2562 175 (-------) 175 SB
300 2607 175 (--  IOF) 175 SB
300 2652 1800 (------------------------------------------------------------------------) 1800 SB
300 2697 175 (-------) 175 SB
300 2742 850 (            WHEN "000001000000" =>) 850 SB
300 2787 625 (              ien <= '0';) 625 SB
300 2877 650 (            WHEN others =>) 650 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%Page: 45 45
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
0 0 0 fC
300 267 1500 (          END CASE;                      --  ir\(11 DOWNTO 0\)) 1500 SB
300 312 525 (          cycle := 0;) 525 SB
300 402 1800 (------------------------------------------------------------------------) 1800 SB
300 447 175 (-------) 175 SB
300 492 325 (--  Interrupt) 325 SB
300 537 1800 (------------------------------------------------------------------------) 1800 SB
300 582 175 (-------) 175 SB
300 627 450 (        WHEN 13 =>) 450 SB
300 672 925 (          mem_out\(11 downto 0\) <= pc;) 925 SB
300 717 825 (          pc <= \(others  => '0'\);) 825 SB
300 762 550 (          cycle := 14;) 550 SB
300 852 450 (        WHEN 14 =>) 450 SB
300 897 775 (          temp_pc := bvtoi\(pc\);) 775 SB
300 942 850 (          temp_add := temp_pc + 1;) 850 SB
300 987 900 (          pc <= itobv\(temp_add, 11\);) 900 SB
300 1032 525 (          ien <= '0';) 525 SB
300 1077 525 (          cycle := 0;) 525 SB
300 1167 550 (        WHEN others =>) 550 SB
300 1257 1250 (      END CASE;                          --  cycle) 1250 SB
300 1302 275 (    END IF;) 275 SB
300 1347 350 (  END PROCESS;) 350 SB
300 1392 425 (END behave_basic;) 425 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
732 1470 935 (Listing 18. Basic Computer Architecture) 935 SB
300 1670 837 (4.2.4 Basic Computer Configuration) 837 SB
0 0 0 fC
/fm 256 def
836 2 300 1729 B
1 F
n
450 1770 79 (As ) 91 SB
541 1770 116 (with ) 128 SB
669 1770 85 (the ) 97 SB
766 1770 166 (simple ) 178 SB
944 1770 246 (computer, ) 258 SB
1202 1770 83 (we ) 95 SB
1297 1770 86 (are ) 98 SB
1395 1770 137 (using ) 149 SB
1544 1770 244 (functional ) 256 SB
1800 1770 125 (code ) 137 SB
1937 1770 81 (for ) 93 SB
2030 1770 70 (the) 70 SB
300 1870 215 (behavior ) 235 SB
535 1870 98 (and ) 118 SB
653 1870 41 (a ) 62 SB
715 1870 125 (code ) 146 SB
861 1870 185 (module ) 206 SB
1067 1870 81 (for ) 102 SB
1169 1870 85 (the ) 106 SB
1275 1870 203 (memory ) 224 SB
1499 1870 214 (routines. ) 235 SB
1734 1870 15 ( ) 36 SB
1770 1870 165 (Below ) 186 SB
1956 1870 53 (is ) 74 SB
2030 1870 70 (the) 70 SB
300 1970 320 (configuration:) 320 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 2137 1075 (CONFIGURATION basic_config OF basic_comp IS) 1075 SB
300 2182 450 (  FOR behave_basic) 450 SB
300 2227 525 (    FOR u1: basic_mem) 525 SB
300 2272 800 (      USE ENTITY work.basic_mem;) 800 SB
300 2317 300 (    END FOR;) 300 SB
300 2362 250 (  END FOR;) 250 SB
300 2407 425 (END basic_config;) 425 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
716 2485 967 (Listing 19. Basic Computer Configuration) 967 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 46 46
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 785 (4.3 Basic Computer Test Benches) 785 SB
0 0 0 fC
/fm 256 def
784 2 300 359 B
1 F
n
450 400 56 (A ) 69 SB
519 400 211 (complex ) 224 SB
743 400 149 (design) 149 SB
892 400 15 ( ) 28 SB
920 400 120 (such ) 133 SB
1053 400 64 (as ) 78 SB
1131 400 41 (a ) 55 SB
1186 400 246 (computer, ) 260 SB
1446 400 95 (can ) 109 SB
1555 400 177 (require ) 191 SB
1746 400 116 (very ) 130 SB
1876 400 129 (large ) 143 SB
2019 400 81 (test) 81 SB
300 500 201 (benches ) 207 SB
507 500 154 (which ) 160 SB
667 500 83 (we ) 89 SB
756 500 102 (will ) 108 SB
864 500 124 (need ) 130 SB
994 500 60 (to ) 66 SB
1060 500 225 (generate. ) 231 SB
1291 500 15 ( ) 21 SB
1312 500 79 (To ) 85 SB
1397 500 210 (generate ) 217 SB
1614 500 85 (the ) 92 SB
1706 500 96 (test ) 103 SB
1809 500 216 (benches, ) 223 SB
2032 500 68 (we) 68 SB
300 600 102 (will ) 116 SB
416 600 133 (write ) 147 SB
563 600 41 (a ) 55 SB
618 600 120 (C++ ) 134 SB
752 600 208 (program ) 223 SB
975 600 60 (to ) 75 SB
1050 600 83 (act ) 98 SB
1148 600 64 (as ) 79 SB
1227 600 69 (an ) 84 SB
1311 600 260 (assembler. ) 275 SB
1586 600 15 ( ) 30 SB
1616 600 104 (The ) 119 SB
1735 600 134 (basic ) 149 SB
1884 600 216 (computer) 216 SB
300 700 245 (assembler ) 261 SB
561 700 53 (is ) 69 SB
630 700 311 (implemented ) 327 SB
957 700 64 (as ) 81 SB
1038 700 186 (defined ) 203 SB
1241 700 58 (in ) 75 SB
1316 700 198 (Chapter ) 215 SB
1531 700 44 (6 ) 61 SB
1592 700 62 (of ) 79 SB
1671 700 244 (Computer ) 261 SB
1932 700 168 (System) 168 SB
/fm 256 def
428 2 1671 759 B
1 F
n
300 800 301 (Architecture.) 301 SB
601 800 15 ( ) 25 SB
626 800 15 ( ) 25 SB
651 800 104 (The ) 114 SB
765 800 98 (one ) 108 SB
873 800 238 (exception ) 248 SB
1121 800 60 (to ) 71 SB
1192 800 85 (the ) 96 SB
1288 800 234 (definition ) 245 SB
1533 800 58 (in ) 69 SB
1602 800 185 (chapter ) 196 SB
1798 800 59 (6, ) 70 SB
1868 800 53 (is ) 64 SB
1932 800 101 (that ) 112 SB
2044 800 56 (all) 56 SB
/fm 256 def
300 2 300 859 B
1 F
n
300 900 246 (operators, ) 248 SB
548 900 244 (especially ) 246 SB
794 900 85 (the ) 87 SB
881 900 134 (END ) 136 SB
1017 900 250 (statement, ) 252 SB
1269 900 125 (must ) 128 SB
1397 900 70 (be ) 73 SB
1470 900 218 (followed ) 221 SB
1691 900 72 (by ) 75 SB
1766 900 41 (a ) 44 SB
1810 900 142 (blank ) 145 SB
1955 900 145 (space.) 145 SB
300 1000 138 (Also, ) 140 SB
440 1000 71 (all ) 73 SB
513 1000 231 (operators ) 233 SB
746 1000 98 (and ) 100 SB
846 1000 224 (operands ) 226 SB
1072 1000 125 (must ) 127 SB
1199 1000 70 (be ) 72 SB
1271 1000 218 (followed ) 220 SB
1491 1000 72 (by ) 74 SB
1565 1000 41 (a ) 44 SB
1609 1000 142 (blank ) 145 SB
1754 1000 160 (space, ) 163 SB
1917 1000 98 (and ) 101 SB
2018 1000 82 (any) 82 SB
300 1100 122 (lines ) 130 SB
430 1100 254 (containing ) 262 SB
692 1100 202 (multiple ) 211 SB
903 1100 281 (instructions ) 290 SB
1193 1100 122 (shall ) 131 SB
1324 1100 70 (be ) 79 SB
1403 1100 185 (flagged ) 194 SB
1597 1100 64 (as ) 73 SB
1670 1100 165 (errors. ) 174 SB
1844 1100 15 ( ) 24 SB
1868 1100 104 (The ) 113 SB
1981 1100 119 (basic) 119 SB
300 1200 1596 (computer assembler, asm.exe, written in C++ appears in appendix V.) 1596 SB
300 1400 1614 (4.3.1  Basic Computer Test Bench #1: Program to Add Two Numbers) 1614 SB
/fm 256 def
1613 2 300 1459 B
1 F
n
450 1500 104 (The ) 112 SB
562 1500 106 (first ) 114 SB
676 1500 96 (test ) 104 SB
780 1500 152 (bench ) 160 SB
940 1500 53 (is ) 61 SB
1001 1500 148 (based ) 156 SB
1157 1500 129 (upon ) 137 SB
1294 1500 208 (program ) 217 SB
1511 1500 92 (6-5 ) 101 SB
1612 1500 58 (in ) 67 SB
1679 1500 244 (Computer ) 253 SB
1932 1500 168 (System) 168 SB
300 1600 909 (Architecture.  The code appears below:) 909 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 1769 249 (     org 0      ) 249 SB
600 1769 153 (/ Origin) 153 SB
300 1828 237 (     lda a      ) 237 SB
600 1828 273 (/ Load from a) 273 SB
300 1887 252 (     add b      ) 252 SB
600 1887 257 (/ Add from b) 257 SB
300 1946 234 (     sta c      ) 234 SB
600 1946 304 (/ store sum in c) 304 SB
300 2005 220 (     hlt        ) 220 SB
600 2005 302 (/ halt computer) 302 SB
300 2064 271 (a,   dec 83     ) 271 SB
600 2064 189 (/ store 83) 189 SB
300 2123 264 (b,   dec -23   ) 264 SB
600 2123 139 (/ store ) 139 SB
739 2123 67 (-23) 67 SB
300 2182 259 (c,   dec 0      ) 259 SB
600 2182 237 (/ zero result) 237 SB
300 2241 136 (     end) 136 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
517 2331 1365 (Listing 20. Basic Computer Program to Add Two Numbers) 1365 SB
450 2531 1528 (The following code was generated by the asm.exe program above:) 1528 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 2700 680 (----------------------------------------) 680 SB
300 2759 735 (-- Basic Computer VHDL Testbench) 735 SB
300 2818 720 (-- Generated by the Basic Computer) 720 SB
300 2877 580 (-- Assembler by Frank Bruno) 580 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 47 47
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 485 (-- Original file: file1.asm) 485 SB
300 328 680 (----------------------------------------) 680 SB
300 446 526 (ENTITY test_file1.asm IS) 526 SB
300 564 402 (END test_file1.asm;) 402 SB
300 682 1181 (ARCHITECTURE beh_test_file1.asm OF test_file1.asm IS) 1181 SB
300 800 558 (COMPONENT basic_comp) 558 SB
300 859 591 (PORT\(clock          : IN     bit;) 591 SB
300 918 502 (     load           : IN     bit;) 502 SB
300 977 492 (     start          : IN     bit;) 492 SB
300 1036 499 (     reset          : IN     bit;) 499 SB
300 1095 963 (     address_in     : IN     integer range 0 to 4095;) 963 SB
300 1154 998 (     instr          : IN     bit_vector\(15 DOWNTO 0\);) 998 SB
300 1213 977 (     inpr           : IN     bit_vector\(7 DOWNTO 0\);) 977 SB
300 1272 482 (     fgi            : IN     bit;) 482 SB
300 1331 1071 (     ar             : BUFFER bit_vector\(11 DOWNTO 0\);) 1071 SB
300 1390 1061 (     ir             : BUFFER bit_vector\(15 DOWNTO 0\);) 1061 SB
300 1449 1064 (     tr             : BUFFER bit_vector\(11 DOWNTO 0\);) 1064 SB
300 1508 1074 (     dr             : BUFFER bit_vector\(11 DOWNTO 0\);) 1074 SB
300 1567 550 (     i              : BUFFER bit;) 550 SB
300 1626 560 (     e              : BUFFER bit;) 560 SB
300 1685 1076 (     ac             : BUFFER bit_vector\(15 DOWNTO 0\);) 1076 SB
300 1744 570 (     ien            : BUFFER bit;) 570 SB
300 1803 1064 (     outr           : BUFFER bit_vector\(7 DOWNTO 0\);) 1064 SB
300 1862 578 (     fgo            : BUFFER bit;) 578 SB
300 1921 95 (     \);) 95 SB
300 1980 440 (END COMPONENT;) 440 SB
300 2039 432 (  SIGNAL clock : bit;) 432 SB
300 2098 410 (  SIGNAL load : bit;) 410 SB
300 2157 400 (  SIGNAL start : bit) 400 SB
300 2216 420 (  SIGNAL reset : bit;) 420 SB
300 2275 949 (  SIGNAL address_in : integer range 0 to 4095;) 949 SB
300 2334 919 (  SIGNAL instr : bit_vector\(15 DOWNTO 0\);) 919 SB
300 2393 885 (  SIGNAL inpr : bit_vector\(7 DOWNTO 0\);) 885 SB
300 2452 377 (  SIGNAL fgi : bit;) 377 SB
300 2511 871 (  SIGNAL ar : bit_vector\(11 DOWNTO 0\);) 871 SB
300 2570 861 (  SIGNAL ir : bit_vector\(15 DOWNTO 0\);) 861 SB
300 2629 864 (  SIGNAL tr : bit_vector\(11 DOWNTO 0\);) 864 SB
300 2688 874 (  SIGNAL dr : bit_vector\(11 DOWNTO 0\);) 874 SB
300 2747 337 (  SIGNAL i : bit;) 337 SB
300 2806 347 (  SIGNAL e : bit;) 347 SB
300 2865 876 (  SIGNAL ac : bit_vector\(15 DOWNTO 0\);) 876 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 48 48
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 383 (  SIGNAL ien : bit;) 383 SB
300 328 890 (  SIGNAL outr : bit_vector\(7 DOWNTO 0\);) 890 SB
300 387 391 (  SIGNAL fgo : bit;) 391 SB
300 505 153 (BEGIN) 153 SB
300 623 337 (  u1: basic_comp) 337 SB
300 682 600 (  PORT MAP\(clock => clock,) 600 SB
300 741 317 (    load => load,) 317 SB
300 800 323 (    start => start,) 323 SB
300 859 337 (    reset => reset,) 337 SB
300 918 567 (    address_in => address_in,) 567 SB
300 977 321 (    instr => instr,) 321 SB
300 1036 303 (    inpr => inpr,) 303 SB
300 1095 251 (    fgi => fgi,) 251 SB
300 1154 225 (    ar => ar,) 225 SB
300 1213 205 (    ir => ir,) 205 SB
300 1272 211 (    tr => tr,) 211 SB
300 1331 231 (    dr => dr,) 231 SB
300 1390 171 (    i => i,) 171 SB
300 1449 191 (    e => e,) 191 SB
300 1508 235 (    ac => ac,) 235 SB
300 1567 263 (    ien => ien,) 263 SB
300 1626 313 (    outr => outr,) 313 SB
300 1685 296 (    fgo => fgo\);) 296 SB
300 1803 243 (  clock_gen:) 243 SB
300 1862 243 (  PROCESS) 243 SB
300 1921 179 (  BEGIN) 179 SB
300 1980 584 (    clock <= '0' AFTER 40 ns;) 584 SB
300 2039 422 (    WAIT FOR 40 ns;) 422 SB
300 2098 584 (    clock <= '1' AFTER 40 ns;) 584 SB
300 2157 422 (    WAIT FOR 40 ns;) 422 SB
300 2216 372 (  END PROCESS;) 372 SB
300 2334 243 (  PROCESS) 243 SB
300 2393 691 (    VARIABLE state : integer := 0;) 691 SB
300 2511 205 (    BEGIN) 205 SB
300 2570 1011 (      WAIT UNTIL clock'EVENT AND clock = '1';) 1011 SB
300 2629 369 (      CASE state IS) 369 SB
300 2688 360 (        WHEN 0 =>) 360 SB
300 2747 361 (          reset <= '1';) 361 SB
300 2806 354 (          start <= '0';) 354 SB
300 2865 329 (          state := 1;) 329 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 49 49
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 360 (        WHEN 1 =>) 360 SB
300 328 361 (          reset <= '0';) 361 SB
300 387 338 (          load <= '1') 338 SB
300 446 460 (          address_in <= 0;) 460 SB
300 505 752 (          instr <= "0010000000000100";) 752 SB
300 564 329 (          state := 2;) 329 SB
300 623 360 (        WHEN 2 =>) 360 SB
300 682 460 (          address_in <= 1;) 460 SB
300 741 752 (          instr <= "0001000000000101";) 752 SB
300 800 329 (          state := 3;) 329 SB
300 859 360 (        WHEN 3 =>) 360 SB
300 918 460 (          address_in <= 2;) 460 SB
300 977 752 (          instr <= "0011000000000110";) 752 SB
300 1036 329 (          state := 4;) 329 SB
300 1095 360 (        WHEN 4 =>) 360 SB
300 1154 460 (          address_in <= 3;) 460 SB
300 1213 752 (          instr <= "0111000000000001";) 752 SB
300 1272 329 (          state := 5;) 329 SB
300 1331 360 (        WHEN 5 =>) 360 SB
300 1390 460 (          address_in <= 4;) 460 SB
300 1449 752 (          instr <= "0000000001010011";) 752 SB
300 1508 329 (          state := 6;) 329 SB
300 1567 360 (        WHEN 6 =>) 360 SB
300 1626 460 (          address_in <= 5;) 460 SB
300 1685 752 (          instr <= "1111111111101001";) 752 SB
300 1744 329 (          state := 7;) 329 SB
300 1803 360 (        WHEN 7 =>) 360 SB
300 1862 460 (          address_in <= 6;) 460 SB
300 1921 752 (          instr <= "0000000000000000";) 752 SB
300 1980 329 (          state := 8;) 329 SB
300 2039 360 (        WHEN 8 =>) 360 SB
300 2098 351 (          load <= '0';) 351 SB
300 2157 354 (          start <= '1';) 354 SB
300 2216 329 (          state := 9;) 329 SB
300 2275 385 (        WHEN 10 =>) 385 SB
300 2334 354 (          start <= '0';) 354 SB
300 2393 354 (          state := 10;) 354 SB
300 2452 530 (        WHEN OTHERS =>) 530 SB
300 2511 334 (      END CASE;) 334 SB
300 2570 372 (  END PROCESS;) 372 SB
300 2629 497 (END beh_test_file1.asm;) 497 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 50 50
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 1168 (CONFIGURATION config_file1.asm OF test_file1.asm IS) 1168 SB
300 328 503 (  FOR beh_test_file1.asm) 503 SB
300 387 472 (    FOR u1: basic_comp) 472 SB
300 446 745 (      USE ENTITY work.basic_comp;) 745 SB
300 505 277 (    END FOR;) 277 SB
300 564 251 (  END FOR;) 251 SB
300 623 455 (END config_file1.asm;) 455 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
591 713 1217 (Listing 21. VHDL Test Bench to Add Two Numbers) 1217 SB
300 913 1617 (4.3.2 Basic Computer Test bench #2: Multiply Two Positive Numbers) 1617 SB
0 0 0 fC
/fm 256 def
1616 2 300 972 B
1 F
n
450 1013 104 (The ) 121 SB
571 1013 176 (second ) 193 SB
764 1013 96 (test ) 113 SB
877 1013 152 (bench ) 169 SB
1046 1013 53 (is ) 71 SB
1117 1013 148 (based ) 166 SB
1283 1013 129 (upon ) 147 SB
1430 1013 208 (program ) 226 SB
1656 1013 121 (6-14 ) 139 SB
1795 1013 58 (in ) 76 SB
1871 1013 229 (Computer) 229 SB
300 1113 1092 (System Architecture.  The code appears below:) 1092 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 1282 104 (        ) 104 SB
450 1282 156 (org 100) 156 SB
300 1341 128 (lop,    ) 128 SB
450 1341 225 (cle             ) 225 SB
750 1341 177 (/ Clear E) 177 SB
300 1400 104 (        ) 104 SB
450 1400 238 (lda y           ) 238 SB
750 1400 339 (/ Load Multiplier) 339 SB
300 1459 104 (        ) 104 SB
450 1459 220 (cir             ) 220 SB
750 1459 558 (/ Transfer multiplier bit to E) 558 SB
300 1518 104 (        ) 104 SB
450 1518 235 (sta y           ) 235 SB
750 1518 482 (/ Store shifted multiplier) 482 SB
300 1577 104 (        ) 104 SB
450 1577 232 (sze             ) 232 SB
750 1577 460 (/ Check if its bit is zero) 460 SB
300 1636 104 (        ) 104 SB
450 1636 275 (bun one         ) 275 SB
750 1636 432 (/ Bit is one; go to one) 432 SB
300 1695 104 (        ) 104 SB
450 1695 268 (bun zro         ) 268 SB
750 1695 440 (/ Bit is zero; go to zro) 440 SB
300 1754 124 (one,   ) 124 SB
450 1754 239 (lda x           ) 239 SB
750 1754 332 (/ Load multiplier) 332 SB
300 1813 104 (        ) 104 SB
450 1813 253 (add p           ) 253 SB
750 1813 472 (/ Add to partial product) 472 SB
300 1872 104 (        ) 104 SB
450 1872 237 (sta p           ) 237 SB
750 1872 441 (/ Store partial product) 441 SB
300 1931 104 (        ) 104 SB
450 1931 225 (cle             ) 225 SB
750 1931 177 (/ Clear E) 177 SB
300 1990 130 (zro,    ) 130 SB
450 1990 239 (lda x           ) 239 SB
750 1990 386 (/ Load multiplicand) 386 SB
300 2049 104 (        ) 104 SB
450 2049 215 (cil             ) 215 SB
750 2049 216 (/ Shift Left) 216 SB
300 2108 104 (        ) 104 SB
450 2108 236 (sta x           ) 236 SB
750 2108 558 (/ Store shiftede multiplicand) 558 SB
300 2167 104 (        ) 104 SB
450 2167 237 (isz ctr         ) 237 SB
750 2167 391 (/ Increment counter) 391 SB
300 2226 104 (        ) 104 SB
450 2226 266 (bun lop         ) 266 SB
750 2226 618 (/ Counter not zero; repeat loop) 618 SB
300 2285 104 (        ) 104 SB
450 2285 220 (hlt             ) 220 SB
750 2285 432 (/ Counter is zero, halt) 432 SB
300 2344 119 (ctr,    ) 119 SB
450 2344 254 (dec -8          ) 254 SB
750 2344 674 (/ This location serves as a counter) 674 SB
300 2403 115 (x,      ) 115 SB
450 2403 277 (hex 000f        ) 277 SB
750 2403 500 (/ Multiplcand stored here) 500 SB
300 2462 114 (y,      ) 114 SB
450 2462 133 (hex 00) 133 SB
583 2462 153 (0b        ) 153 SB
750 2462 467 (/ Multiplier Stored here) 467 SB
300 2521 116 (p,      ) 116 SB
450 2521 251 (hex 0           ) 251 SB
750 2521 438 (/ Product formed here) 438 SB
300 2580 104 (        ) 104 SB
450 2580 240 (end             ) 240 SB
750 2580 124 (/ done) 124 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
340 2670 1719 (Listing 22. A Basic Computer Program to Multiply Two Positive Numbers) 1719 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 51 51
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 1646 (The following code was generated from the above by using ASM.EXE:) 1646 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
300 469 680 (----------------------------------------) 680 SB
300 528 735 (-- Basic Computer VHDL Testbench) 735 SB
300 587 720 (-- Generated by the Basic Computer) 720 SB
300 646 580 (-- Assembler by Frank Bruno) 580 SB
300 705 422 (-- Original file: mult2) 422 SB
300 764 680 (----------------------------------------) 680 SB
300 882 463 (ENTITY test_mult2 IS) 463 SB
300 1000 339 (END test_mult2;) 339 SB
300 1118 1055 (ARCHITECTURE beh_test_mult2 OF test_mult2 IS) 1055 SB
300 1236 558 (COMPONENT basic_comp) 558 SB
300 1295 591 (PORT\(clock          : IN     bit;) 591 SB
300 1354 502 (     load           : IN     bit;) 502 SB
300 1413 492 (     start          : IN     bit;) 492 SB
300 1472 499 (     reset          : IN     bit;) 499 SB
300 1531 963 (     address_in     : IN     integer range 0 to 4095;) 963 SB
300 1590 998 (     instr          : IN     bit_vector\(15 DOWNTO 0\);) 998 SB
300 1649 977 (     inpr           : IN     bit_vector\(7 DOWNTO 0\);) 977 SB
300 1708 482 (     fgi            : IN     bit;) 482 SB
300 1767 1071 (     ar             : BUFFER bit_vector\(11 DOWNTO 0\);) 1071 SB
300 1826 1061 (     ir             : BUFFER bit_vector\(15 DOWNTO 0\);) 1061 SB
300 1885 1064 (     tr             : BUFFER bit_vector\(11 DOWNTO 0\);) 1064 SB
300 1944 1074 (     dr             : BUFFER bit_vector\(11 DOWNTO 0\);) 1074 SB
300 2003 550 (     i              : BUFFER bit;) 550 SB
300 2062 560 (     e              : BUFFER bit;) 560 SB
300 2121 1076 (     ac             : BUFFER bit_vector\(15 DOWNTO 0\);) 1076 SB
300 2180 570 (     ien            : BUFFER bit;) 570 SB
300 2239 1064 (     outr           : BUFFER bit_vector\(7 DOWNTO 0\);) 1064 SB
300 2298 578 (     fgo            : BUFFER bit;) 578 SB
300 2357 95 (     \);) 95 SB
300 2416 440 (END COMPONENT;) 440 SB
300 2475 432 (  SIGNAL clock : bit;) 432 SB
300 2534 410 (  SIGNAL load : bit;) 410 SB
300 2593 400 (  SIGNAL start : bit) 400 SB
300 2652 420 (  SIGNAL reset : bit;) 420 SB
300 2711 949 (  SIGNAL address_in : integer range 0 to 4095;) 949 SB
300 2770 919 (  SIGNAL instr : bit_vector\(15 DOWNTO 0\);) 919 SB
300 2829 885 (  SIGNAL inpr : bit_vector\(7 DOWNTO 0\);) 885 SB
300 2888 377 (  SIGNAL fgi : bit;) 377 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 52 52
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 871 (  SIGNAL ar : bit_vector\(11 DOWNTO 0\);) 871 SB
300 328 861 (  SIGNAL ir : bit_vector\(15 DOWNTO 0\);) 861 SB
300 387 864 (  SIGNAL tr : bit_vector\(11 DOWNTO 0\);) 864 SB
300 446 874 (  SIGNAL dr : bit_vector\(11 DOWNTO 0\);) 874 SB
300 505 337 (  SIGNAL i : bit;) 337 SB
300 564 347 (  SIGNAL e : bit;) 347 SB
300 623 876 (  SIGNAL ac : bit_vector\(15 DOWNTO 0\);) 876 SB
300 682 383 (  SIGNAL ien : bit;) 383 SB
300 741 890 (  SIGNAL outr : bit_vector\(7 DOWNTO 0\);) 890 SB
300 800 391 (  SIGNAL fgo : bit;) 391 SB
300 918 153 (BEGIN) 153 SB
300 1036 337 (  u1: basic_comp) 337 SB
300 1095 600 (  PORT MAP\(clock => clock,) 600 SB
300 1154 317 (    load => load,) 317 SB
300 1213 323 (    start => start,) 323 SB
300 1272 337 (    reset => reset,) 337 SB
300 1331 567 (    address_in => address_in,) 567 SB
300 1390 321 (    instr => instr,) 321 SB
300 1449 303 (    inpr => inpr,) 303 SB
300 1508 251 (    fgi => fgi,) 251 SB
300 1567 225 (    ar => ar,) 225 SB
300 1626 205 (    ir => ir,) 205 SB
300 1685 211 (    tr => tr,) 211 SB
300 1744 231 (    dr => dr,) 231 SB
300 1803 171 (    i => i,) 171 SB
300 1862 191 (    e => e,) 191 SB
300 1921 235 (    ac => ac,) 235 SB
300 1980 263 (    ien => ien,) 263 SB
300 2039 313 (    outr => outr,) 313 SB
300 2098 296 (    fgo => fgo\);) 296 SB
300 2216 243 (  clock_gen:) 243 SB
300 2275 243 (  PROCESS) 243 SB
300 2334 179 (  BEGIN) 179 SB
300 2393 584 (    clock <= '0' AFTER 40 ns;) 584 SB
300 2452 422 (    WAIT FOR 40 ns;) 422 SB
300 2511 584 (    clock <= '1' AFTER 40 ns;) 584 SB
300 2570 422 (    WAIT FOR 40 ns;) 422 SB
300 2629 372 (  END PROCESS;) 372 SB
300 2747 243 (  PROCESS) 243 SB
300 2806 691 (    VARIABLE state : integer := 0;) 691 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 53 53
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 205 (    BEGIN) 205 SB
300 328 1011 (      WAIT UNTIL clock'EVENT AND clock = '1';) 1011 SB
300 387 369 (      CASE state IS) 369 SB
300 446 360 (        WHEN 0 =>) 360 SB
300 505 361 (          reset <= '1';) 361 SB
300 564 354 (          start <= '0';) 354 SB
300 623 329 (          state := 1;) 329 SB
300 682 360 (        WHEN 1 =>) 360 SB
300 741 361 (          reset <= '0';) 361 SB
300 800 338 (          load <= '1') 338 SB
300 859 510 (          address_in <= 256;) 510 SB
300 918 752 (          instr <= "0111010000000000";) 752 SB
300 977 329 (          state := 2;) 329 SB
300 1036 360 (        WHEN 2 =>) 360 SB
300 1095 510 (          address_in <= 257;) 510 SB
300 1154 752 (          instr <= "0010000100010011";) 752 SB
300 1213 329 (          state := 3;) 329 SB
300 1272 360 (        WHEN 3 =>) 360 SB
300 1331 510 (          address_in <= 258;) 510 SB
300 1390 752 (          instr <= "0111000010000000";) 752 SB
300 1449 329 (          state := 4;) 329 SB
300 1508 360 (        WHEN 4 =>) 360 SB
300 1567 510 (          address_in <= 259;) 510 SB
300 1626 752 (          instr <= "0011000100010011";) 752 SB
300 1685 329 (          state := 5;) 329 SB
300 1744 360 (        WHEN 5 =>) 360 SB
300 1803 510 (          address_in <= 260;) 510 SB
300 1862 752 (          instr <= "0111000000000010";) 752 SB
300 1921 329 (          state := 6;) 329 SB
300 1980 360 (        WHEN 6 =>) 360 SB
300 2039 510 (          address_in <= 261;) 510 SB
300 2098 752 (          instr <= "0100000100000111";) 752 SB
300 2157 329 (          state := 7;) 329 SB
300 2216 360 (        WHEN 7 =>) 360 SB
300 2275 510 (          address_in <= 262;) 510 SB
300 2334 752 (          instr <= "0100000100001011";) 752 SB
300 2393 329 (          state := 8;) 329 SB
300 2452 360 (        WHEN 8 =>) 360 SB
300 2511 510 (          address_in <= 263;) 510 SB
300 2570 752 (          instr <= "0010000100010010";) 752 SB
300 2629 329 (          state := 9;) 329 SB
300 2688 360 (        WHEN 9 =>) 360 SB
300 2747 510 (          address_in <= 264;) 510 SB
300 2806 752 (          instr <= "0001000100010100";) 752 SB
300 2865 354 (          state := 10;) 354 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 54 54
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 385 (        WHEN 10 =>) 385 SB
300 328 510 (          address_in <= 265;) 510 SB
300 387 752 (          instr <= "0011000100010100";) 752 SB
300 446 354 (          state := 11;) 354 SB
300 505 385 (        WHEN 11 =>) 385 SB
300 564 510 (          address_in <= 266;) 510 SB
300 623 752 (          instr <= "0111010000000000";) 752 SB
300 682 354 (          state := 12;) 354 SB
300 741 385 (        WHEN 12 =>) 385 SB
300 800 510 (          address_in <= 267;) 510 SB
300 859 752 (          instr <= "0010000100010010";) 752 SB
300 918 354 (          state := 13;) 354 SB
300 977 385 (        WHEN 13 =>) 385 SB
300 1036 510 (          address_in <= 268;) 510 SB
300 1095 752 (          instr <= "0111000001000000";) 752 SB
300 1154 354 (          state := 14;) 354 SB
300 1213 385 (        WHEN 14 =>) 385 SB
300 1272 510 (          address_in <= 269;) 510 SB
300 1331 752 (          instr <= "0011000100010010";) 752 SB
300 1390 354 (          state := 15;) 354 SB
300 1449 385 (        WHEN 15 =>) 385 SB
300 1508 510 (          address_in <= 270;) 510 SB
300 1567 752 (          instr <= "0110000100010001";) 752 SB
300 1626 354 (          state := 16;) 354 SB
300 1685 385 (        WHEN 16 =>) 385 SB
300 1744 510 (          address_in <= 271;) 510 SB
300 1803 752 (          instr <= "0100000100000000";) 752 SB
300 1862 354 (          state := 17;) 354 SB
300 1921 385 (        WHEN 17 =>) 385 SB
300 1980 510 (          address_in <= 272;) 510 SB
300 2039 752 (          instr <= "0111000000000001";) 752 SB
300 2098 354 (          state := 18;) 354 SB
300 2157 385 (        WHEN 18 =>) 385 SB
300 2216 510 (          address_in <= 273;) 510 SB
300 2275 752 (          instr <= "1111111111111000";) 752 SB
300 2334 354 (          state := 19;) 354 SB
300 2393 385 (        WHEN 19 =>) 385 SB
300 2452 510 (          address_in <= 274;) 510 SB
300 2511 752 (          instr <= "0000000000001111";) 752 SB
300 2570 354 (          state := 20;) 354 SB
300 2629 385 (        WHEN 20 =>) 385 SB
300 2688 510 (          address_in <= 275;) 510 SB
300 2747 752 (          instr <= "0000000000001011";) 752 SB
300 2806 354 (          state := 21;) 354 SB
300 2865 385 (        WHEN 21 =>) 385 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 55 55
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 50 50 0 0 0 45 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 269 510 (          address_in <= 276;) 510 SB
300 328 752 (          instr <= "0000000000000000";) 752 SB
300 387 354 (          state := 22;) 354 SB
300 446 385 (        WHEN 22 =>) 385 SB
300 505 351 (          load <= '0';) 351 SB
300 564 354 (          start <= '1';) 354 SB
300 623 354 (          state := 23;) 354 SB
300 682 385 (        WHEN 24 =>) 385 SB
300 741 354 (          start <= '0';) 354 SB
300 800 354 (          state := 24;) 354 SB
300 859 530 (        WHEN OTHERS =>) 530 SB
300 918 334 (      END CASE;) 334 SB
300 977 372 (  END PROCESS;) 372 SB
300 1036 434 (END beh_test_mult2;) 434 SB
300 1154 1042 (CONFIGURATION config_mult2 OF test_mult2 IS) 1042 SB
300 1213 440 (  FOR beh_test_mult2) 440 SB
300 1272 472 (    FOR u1: basic_comp) 472 SB
300 1331 745 (      USE ENTITY work.basic_comp;) 745 SB
300 1390 277 (    END FOR;) 277 SB
300 1449 251 (  END FOR;) 251 SB
300 1508 392 (END config_mult2;) 392 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
442 1598 1515 (Listing 23. VHDL Test Bench to Multiply Two Positive Numbers) 1515 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 56 56
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 1093 (CHAPTER 5. ASSEMBLER FLOW CHARTS) 1093 SB
0 0 0 fC
/fm 256 def
1092 2 300 359 B
1 F
n
300 400 311 (5.0 First Pass) 311 SB
/fm 256 def
310 2 300 459 B
1 F
n
450 500 104 (The ) 106 SB
556 500 245 (assembler ) 247 SB
803 500 186 (follows ) 188 SB
991 500 41 (a ) 43 SB
1034 500 102 (two ) 105 SB
1139 500 116 (pass ) 119 SB
1258 500 242 (approach. ) 245 SB
1503 500 15 ( ) 18 SB
1521 500 175 (During ) 178 SB
1699 500 85 (the ) 88 SB
1787 500 106 (first ) 109 SB
1896 500 131 (pass, ) 134 SB
2030 500 70 (the) 70 SB
300 600 245 (assembler ) 260 SB
560 600 154 (builds ) 169 SB
729 600 41 (a ) 57 SB
786 600 182 (symbol ) 198 SB
984 600 127 (table ) 143 SB
1127 600 137 (using ) 153 SB
1280 600 85 (the ) 101 SB
1381 600 111 (user ) 127 SB
1508 600 186 (defined ) 202 SB
1710 600 254 (addresses. ) 270 SB
1980 600 15 ( ) 31 SB
2011 600 89 (The) 89 SB
300 700 1235 (following flow chart is the first pass of the assembler:) 1235 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 468 def /pp_bx2 324 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1350 1350 525 867 CB
1349 1349 525 867 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\FIRST.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 8:34:03 PM
%%BoundingBox: 0 468 324 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
150 75 M 0 -74 299 0 0 74 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
75 300 M 0 -74 449 0 0 74 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
600 300 M 0 -74 223 0 0 74 3 D
0 p
10 1 1 lc lj ml
300 450 M 0 0 -75 75 2 D
S
225 525 M 0 0 75 75 2 D
S
300 600 M 0 0 75 -75 2 D
S
375 525 M 0 0 -75 -75 2 D
S
712 450 M 0 0 -75 75 2 D
S
637 525 M 0 0 75 75 2 D
S
712 600 M 0 0 75 -75 2 D
S
787 525 M 0 0 -75 -75 2 D
S
150 750 M 0 0 0 299 2 D
S
150 1049 M 0 0 300 0 2 D
S
450 1049 M 0 0 0 -299 2 D
S
450 750 M 0 0 -300 0 2 D
S
899 750 M 0 0 -75 74 2 D
S
824 824 M 0 0 75 75 2 D
S
899 899 M 0 0 75 -75 2 D
S
974 824 M 0 0 -75 -74 2 D
S
10 0 0 lc lj ml
150 1199 M 0 -74 299 0 0 74 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
1049 1049 M 0 -149 299 0 0 149 3 D
0 p
10 1 1 lc lj ml
300 0 M 0 0 0 75 2 D
S
314 47 M 28 0 -14 -28 -14 28 3 D
0 2 p
300 150 M 0 0 0 150 2 D
S
314 272 M 28 0 -14 -28 -14 28 3 D
0 2 p
300 375 M 0 0 0 75 2 D
S
314 422 M 28 0 -14 -28 -14 28 3 D
0 2 p
300 600 M 0 0 0 150 2 D
S
314 722 M 28 0 -14 -28 -14 28 3 D
0 2 p
375 525 M 0 0 262 0 2 D
S
609 512 M 0 -27 -28 14 28 13 3 D
0 2 p
787 525 M 0 225 112 0 2 D
S
913 722 M 28 0 -14 -28 -14 28 3 D
0 2 p
712 300 M 0 75 -262 0 0 -75 3 D
S
463 272 M 27 0 -14 -28 -13 28 3 D
0 2 p
300 1274 M 0 75 150 0 0 -1124 -300 0 0 75 5 D
S
164 272 M 28 0 -14 -28 -14 28 3 D
0 2 p
300 1049 M 0 0 0 150 2 D
S
314 1171 M 28 0 -14 -28 -14 28 3 D
0 2 p
899 899 M 0 75 -524 0 0 225 3 D
S
389 1171 M 28 0 -14 -28 -14 28 3 D
0 2 p
974 824 M 0 225 225 0 2 D
S
1213 1021 M 27 0 -13 -28 -14 28 3 D
0 2 p
712 450 M 0 0 0 -75 2 D
S
698 403 M -28 0 14 28 14 -28 3 D
0 2 p
%%ChangeFont: Times-Roman
[36 0 0 -42 0 0] /Times-Roman/Times-RomanWE sf
0 (LC = 0)0 38 0 0 0 0 103 0 240 102 sb
0 (Scan next line of code)0 38 0 0 0 0 321 0 117 327 sb
0 (Set LC)0 38 0 0 0 0 101 0 655 327 sb
0 (Label)0 38 0 0 0 0 82 0 254 495 sb
0 (ORG)0 38 0 0 0 0 75 0 669 495 sb
0 (END)0 38 0 0 0 0 73 0 856 795 sb
0 (Increment LC)0 38 0 0 0 0 202 0 184 1226 sb
0 (Goto Second)0 38 0 0 0 0 186 0 1093 1076 sb
0 (Pass)0 38 0 0 0 0 63 0 1162 1151 sb
0 (Store Symbol)0 38 0 0 0 0 196 0 189 776 sb
0 (in address)0 38 0 0 0 0 145 0 214 851 sb
0 (Symbol table w/)0 38 0 0 0 0 236 0 167 926 sb
0 (value of LC)0 38 0 0 0 0 173 0 202 1001 sb
0 (no)0 38 0 0 0 0 36 0 375 477 sb
0 (yes)0 38 0 0 0 0 48 0 300 589 sb
0 (yes)0 38 0 0 0 0 48 0 731 402 sb
0 (no)0 38 0 0 0 0 36 0 787 477 sb
0 (yes)0 38 0 0 0 0 48 0 974 776 sb
0 (no)0 38 0 0 0 0 36 0 899 889 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore848 2250 704 (Figure 3. Assembler First Pass) 704 SB
300 2450 377 (5.1 Second Pass) 377 SB
0 0 0 fC
/fm 256 def
376 2 300 2509 B
1 F
n
450 2550 104 (The ) 116 SB
566 2550 207 (machine ) 219 SB
785 2550 281 (instructions ) 293 SB
1078 2550 86 (are ) 98 SB
1176 2550 239 (translated ) 251 SB
1427 2550 162 (during ) 174 SB
1601 2550 85 (the ) 97 SB
1698 2550 176 (second ) 189 SB
1887 2550 131 (pass. ) 144 SB
2031 2550 15 ( ) 28 SB
2059 2550 41 (A) 41 SB
300 2650 936 (table look-up is accomplished by means ) 937 SB
1237 2650 62 (of ) 63 SB
1300 2650 41 (a ) 42 SB
1342 2650 116 (case ) 117 SB
1459 2650 250 (statement. ) 251 SB
1710 2650 15 ( ) 16 SB
1726 2650 130 (Each ) 131 SB
1857 2650 243 (instruction) 243 SB
300 2750 1340 (is interpreted as one of the following types of instructions:) 1340 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 57 57
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
450 300 488 (1. Pseudo-instruction) 488 SB
450 400 427 (2. MRI instruction) 427 SB
450 500 545 (3. Non-MRI instruction) 545 SB
450 600 586 (4. Address Symbol Table) 586 SB
300 700 1521 (The following flow chart details the second pass of the assembler:) 1521 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 58 58
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 205 def /pp_bx2 375 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 1563 2446 418 267 CB
1562 2445 418 267 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\SECOND.EPS
%%Title: 
%%CreationDate: Tue May 4 1993 8:59:28 PM
%%BoundingBox: 0 205 375 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
450 123 M 0 -74 299 0 0 74 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
375 348 M 0 -74 448 0 0 74 3 D
0 p
10 1 1 lc lj ml
600 498 M -224 -150 224 -150 225 150 -225 150 4 D
0 p
10 0 0 lc lj ml
899 348 M 0 -74 299 0 0 74 3 D
0 p
10 1 1 lc lj ml
%%ChangeFont: Times-Roman
[36 0 0 -42 0 0] /Times-Roman/Times-RomanWE sf
0 (LC = 0)0 38 0 0 0 0 103 0 540 150 sb
0 (Scan next line of code)0 38 0 0 0 0 321 0 415 375 sb
0 (set LC)0 38 0 0 0 0 95 0 994 375 sb
1049 573 M -75 -75 75 -75 75 75 -75 75 4 D
0 p
1349 573 M -75 -75 75 -75 75 75 -75 75 4 D
0 p
0 (Pseudo Instruction)0 38 0 0 0 0 268 0 442 600 sb
0 (ORG)0 38 0 0 0 0 75 0 1006 637 sb
0 (END)0 38 0 0 0 0 73 0 1306 637 sb
600 873 M -75 -75 75 -74 75 74 -75 75 4 D
0 p
10 0 0 lc lj ml
150 1097 M 0 -149 299 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
150 1322 M 0 -224 299 0 0 224 3 D
0 p
10 1 1 lc lj ml
824 1097 M 0 19 -225 -150 225 -150 224 150 -224 150 5 D
S
300 1622 M -75 -75 75 -75 75 75 -75 75 4 D
0 p
10 0 0 lc lj ml
75 1847 M 0 -224 149 0 0 224 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
375 1847 M 0 -224 149 0 0 224 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
75 2147 M 0 -224 449 0 0 224 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
675 1547 M 0 -299 298 0 0 299 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
1199 948 M 0 -448 299 0 0 448 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
1049 1547 M 0 -149 299 0 0 149 3 D
0 p
10 1 1 lc lj ml
10 0 0 lc lj ml
899 2222 M 0 -74 599 0 0 74 3 D
0 p
10 1 1 lc lj ml
0 (Get operation code)0 38 0 0 0 0 275 0 143 1124 sb
0 (and set bits 2-4)0 38 0 0 0 0 219 0 171 1199 sb
0 (Search address)0 38 0 0 0 0 214 0 174 1349 sb
0 (symbol able and)0 38 0 0 0 0 236 0 165 1424 sb
0 (set bits 5-16)0 38 0 0 0 0 176 0 197 1499 sb
0 (I)0 38 0 0 0 0 12 0 293 1668 sb
0 (set)0 38 0 0 0 0 40 0 127 1874 sb
0 (first bit)0 38 0 0 0 0 105 0 90 1949 sb
0 (to 1)0 38 0 0 0 0 55 0 118 2024 sb
0 (set)0 38 0 0 0 0 40 0 427 1874 sb
0 (first bit)0 38 0 0 0 0 105 0 390 1949 sb
0 (to 0)0 38 0 0 0 0 55 0 418 2024 sb
0 (Assemble all parts of binary)0 38 0 0 0 0 406 0 63 2174 sb
0 (instruction and store in)0 38 0 0 0 0 332 0 107 2249 sb
0 (location given by LC)0 38 0 0 0 0 306 0 123 2324 sb
0 (Increment LC)0 38 0 0 0 0 202 0 1084 2249 sb
0 (MRI)0 38 0 0 0 0 67 0 562 918 sb
0 (Valid non-MRI)0 38 0 0 0 0 222 0 696 1199 sb
0 (instruction)0 38 0 0 0 0 154 0 736 1274 sb
0 (Store binary)0 38 0 0 0 0 177 0 723 1574 sb
0 (equivalent of)0 38 0 0 0 0 190 0 717 1649 sb
0 (instruction in loc)0 38 0 0 0 0 245 0 684 1724 sb
0 (given by LC)0 38 0 0 0 0 180 0 721 1799 sb
0 (Convert operand)0 38 0 0 0 0 241 0 1210 974 sb
0 (to binary and)0 38 0 0 0 0 190 0 1239 1049 sb
0 (store in)0 38 0 0 0 0 107 0 1287 1124 sb
0 (location given)0 38 0 0 0 0 206 0 1232 1199 sb
0 (by LC)0 38 0 0 0 0 91 0 1298 1274 sb
0 (Error in line of)0 38 0 0 0 0 216 0 1074 1574 sb
0 (code)0 38 0 0 0 0 68 0 1161 1649 sb
600 48 M 0 0 0 75 2 D
S
614 95 M 27 0 -13 -28 -14 28 3 D
0 2 p
600 198 M 0 0 0 150 2 D
S
614 320 M 27 0 -13 -28 -14 28 3 D
0 2 p
1049 573 M 0 0 0 -150 2 D
S
1035 451 M -27 0 13 28 14 -28 3 D
0 2 p
824 648 M 0 0 150 0 2 D
S
946 634 M 0 -27 -28 13 28 14 3 D
0 2 p
1124 648 M 0 0 150 0 2 D
S
1246 634 M 0 -27 -28 13 28 14 3 D
0 2 p
1349 573 M 0 0 0 -300 2 D
S
1335 301 M -28 0 14 28 14 -28 3 D
0 2 p
1349 723 M 0 0 0 225 2 D
S
1363 920 M 28 0 -14 -28 -14 28 3 D
0 2 p
1199 1697 M 0 0 0 525 2 D
S
1213 2194 M 27 0 -13 -28 -14 28 3 D
0 2 p
1424 1397 M 0 0 0 825 2 D
S
1438 2194 M 28 0 -14 -28 -14 28 3 D
0 2 p
600 423 M 0 0 0 94 2 D
S
614 489 M 27 0 -13 -28 -14 28 3 D
0 2 p
600 798 M 0 0 0 75 2 D
S
614 845 M 27 0 -13 -28 -14 28 3 D
0 2 p
300 1247 M 0 0 0 75 2 D
S
314 1294 M 28 0 -14 -28 -14 28 3 D
0 2 p
300 1547 M 0 0 0 94 2 D
S
314 1613 M 28 0 -14 -28 -14 28 3 D
0 2 p
150 2072 M 0 0 0 75 2 D
S
164 2119 M 28 0 -14 -28 -14 28 3 D
0 2 p
450 2072 M 0 0 0 75 2 D
S
463 2119 M 27 0 -14 -28 -13 28 3 D
0 2 p
525 2240 M 0 0 374 0 2 D
S
871 2226 M 0 -28 -28 14 28 14 3 D
0 2 p
1199 2297 M 0 75 468 0 0 -2174 -1199 0 0 150 5 D
S
482 320 M 28 0 -14 -28 -14 28 3 D
0 2 p
1049 348 M 0 75 -299 0 0 -75 3 D
S
764 320 M 28 0 -14 -28 -14 28 3 D
0 2 p
675 948 M 0 149 149 0 2 D
S
838 1069 M 28 0 -14 -28 -14 28 3 D
0 2 p
525 948 M 0 149 -225 0 2 D
S
314 1069 M 28 0 -14 -28 -14 28 3 D
0 2 p
824 1397 M 0 0 0 150 2 D
S
838 1519 M 28 0 -14 -28 -14 28 3 D
0 2 p
1049 1247 M 0 300 75 0 2 D
S
1138 1519 M 27 0 -13 -28 -14 28 3 D
0 2 p
824 1847 M 0 225 150 0 0 150 3 D
S
988 2194 M 28 0 -14 -28 -14 28 3 D
0 2 p
375 1697 M 0 150 75 0 2 D
S
463 1819 M 27 0 -14 -28 -13 28 3 D
0 2 p
225 1697 M 0 150 -75 0 2 D
S
164 1819 M 28 0 -14 -28 -14 28 3 D
0 2 p
0 (Second Pass)0 38 0 0 0 0 178 0 497 0 sb
0 (Done)0 38 0 0 0 0 77 0 1305 225 sb
0 (yes)0 38 0 0 0 0 48 0 824 600 sb
0 (no)0 38 0 0 0 0 36 0 618 787 sb
0 (yes)0 38 0 0 0 0 48 0 1068 506 sb
0 (no)0 38 0 0 0 0 36 0 1124 581 sb
0 (yes)0 38 0 0 0 0 48 0 1349 525 sb
0 (no)0 38 0 0 0 0 36 0 1349 712 sb
0 (DEC or HEX)0 38 0 0 0 0 193 0 1368 881 sb
0 (yes)0 38 0 0 0 0 48 0 450 899 sb
0 (no)0 38 0 0 0 0 36 0 693 899 sb
0 (no)0 38 0 0 0 0 36 0 1049 1181 sb
0 (yes)0 38 0 0 0 0 48 0 824 1387 sb
0 (yes)0 38 0 0 0 0 48 0 169 1630 sb
0 (no)0 38 0 0 0 0 36 0 394 1630 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
815 2746 770 (Figure 4. Assembler Second Pass) 770 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 59 59
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 751 (CHAPTER 6. CONCLUDIONS) 751 SB
0 0 0 fC
/fm 256 def
750 2 300 359 B
1 F
n
450 400 116 (This ) 126 SB
576 400 144 (paper ) 154 SB
730 400 106 (was ) 116 SB
846 400 177 (written ) 187 SB
1033 400 60 (to ) 70 SB
1103 400 210 (generate ) 220 SB
1323 400 136 (some ) 146 SB
1469 400 101 (real ) 112 SB
1581 400 231 (examples ) 242 SB
1823 400 81 (for ) 92 SB
1915 400 185 (learning) 185 SB
300 500 189 (VHDL. ) 193 SB
493 500 15 ( ) 20 SB
513 500 81 (By ) 86 SB
599 500 137 (using ) 142 SB
741 500 231 (examples ) 236 SB
977 500 124 (from ) 129 SB
1106 500 187 (EE126, ) 192 SB
1298 500 204 (students ) 209 SB
1507 500 167 (should ) 172 SB
1679 500 70 (be ) 75 SB
1754 500 111 (able ) 116 SB
1870 500 60 (to ) 65 SB
1935 500 90 (see ) 95 SB
2030 500 70 (the) 70 SB
300 600 187 (designs ) 190 SB
490 600 113 (they ) 116 SB
606 600 256 (implement ) 259 SB
865 600 58 (in ) 61 SB
926 600 245 (hardware, ) 248 SB
1174 600 127 (done ) 130 SB
1304 600 187 (another ) 190 SB
1494 600 126 (way, ) 129 SB
1623 600 58 (in ) 61 SB
1684 600 189 (VHDL. ) 192 SB
1876 600 15 ( ) 18 SB
1894 600 116 (This ) 119 SB
2013 600 87 (will) 87 SB
300 700 108 (also ) 127 SB
427 700 137 (show ) 156 SB
583 700 114 (how ) 133 SB
716 700 41 (a ) 60 SB
776 700 225 (synthesis ) 244 SB
1020 700 104 (tool ) 123 SB
1143 700 95 (can ) 115 SB
1258 700 112 (take ) 132 SB
1390 700 41 (a ) 61 SB
1451 700 256 (behavioral ) 276 SB
1727 700 270 (description ) 290 SB
2017 700 83 (and) 83 SB
300 800 256 (implement ) 259 SB
559 800 46 (it ) 49 SB
608 800 58 (in ) 61 SB
669 800 245 (hardware. ) 248 SB
917 800 15 ( ) 18 SB
935 800 213 (Students ) 216 SB
1151 800 167 (should ) 170 SB
1321 800 70 (be ) 73 SB
1394 800 111 (able ) 114 SB
1508 800 60 (to ) 63 SB
1571 800 213 (compare ) 216 SB
1787 800 85 (the ) 89 SB
1876 800 224 (generated) 224 SB
300 900 1094 (hardware with the hardware that they designed.) 1094 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 60 60
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 362 (REFERENCES) 362 SB
0 0 0 fC
/fm 256 def
361 2 300 359 B
1 F
n
300 450 67 ([1]) 67 SB
375 450 1111 (IEEE 1076 Language Reference Manual \(LRM\)) 1111 SB
/fm 256 def
1110 2 375 509 B
1 F
n
375 525 614 (IEEE 201-981-1391; 1988) 614 SB
300 675 67 ([2]) 67 SB
375 675 518 (The VHDL Handbook) 518 SB
/fm 256 def
517 2 375 734 B
1 F
n
375 750 303 (Dave Coelho) 303 SB
375 825 818 (Kluwer Academic Publishers; 1989) 818 SB
300 975 67 ([3]) 67 SB
375 975 975 (VHDL: Hardware Description and Design) 975 SB
/fm 256 def
974 2 375 1034 B
1 F
n
375 1050 314 (Carey Ussery) 314 SB
375 1125 818 (Kluwer Academic Publishers; 1989) 818 SB
300 1275 67 ([4]) 67 SB
375 1275 159 (VHDL) 159 SB
/fm 256 def
158 2 375 1334 B
1 F
n
375 1350 330 (Douglas Perry) 330 SB
375 1425 459 (McGraw-Hill; 1990) 459 SB
300 1575 67 ([5]) 67 SB
375 1575 817 (Chip Level Modeling Using VHDL) 817 SB
/fm 256 def
816 2 375 1634 B
1 F
n
375 1650 1121 (Dr. James Armstrong, Virginia Polytechnical Ins) 1121 SB
1496 1650 117 (titute) 117 SB
375 1725 445 (Prentiss-Hall; 1988) 445 SB
300 1875 67 ([6]) 67 SB
375 1875 938 (Applications of VHDL to Circuit Design) 938 SB
/fm 256 def
937 2 375 1934 B
1 F
n
375 1950 907 (Randolph E. Harr, Alec G. Stanculescu) 907 SB
375 2025 818 (Kluwer Academic Publishers; 1991) 818 SB
300 2175 67 ([7]) 67 SB
375 2175 359 (EE126 Projects) 359 SB
/fm 256 def
358 2 375 2234 B
1 F
n
375 2250 575 (Professor C. Hwa Chang) 575 SB
375 2325 375 (Tufts University) 375 SB
300 2475 67 ([8]) 67 SB
375 2475 713 (Computer System Architecture) 713 SB
/fm 256 def
712 2 375 2534 B
1 F
n
375 2550 389 (M. Morris Mano) 389 SB
375 2625 445 (Prentiss-Hall; 1982) 445 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 60
% TrueType font name key:
%    MSTT31c17a = 44afDTimes New RomanF0000003a000002bc0000
%    MSTT31c187 = 44afDTimes New RomanF0000003a000001900000
%    MSTT31c194 = 44afDTimes New RomanF00000000000001900000
%    MSTT31c1a1 = 44afDCourier NewF0000002a000001900000
%    MSTT31c1ad = 44afDTimes New RomanF00000032000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier
%%+ font Times-Bold
%%+ font Times-Roman

%%EOF
