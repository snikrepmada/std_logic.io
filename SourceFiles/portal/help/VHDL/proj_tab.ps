%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - PROJ_TAB.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - PROJ_TAB.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
/fPP true def
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
906 300 588 (TABLE OF CONTENTS) 588 SB
0 0 0 fC
/fm 256 def
587 2 906 359 B
1 F
n
300 500 335 (List of Figures) 335 SB
1922 500 28 (v) 28 SB
300 600 320 (Code Listings) 320 SB
1907 600 43 (vi) 43 SB
300 700 319 (List of Tables) 319 SB
1892 700 58 (vii) 58 SB
300 800 196 (Abstract) 196 SB
1877 800 73 (viii) 73 SB
300 900 917 (PART I: SERIAL LOGIC ELEMENTS) 917 SB
/fm 256 def
916 2 300 959 B
1 F
n
300 1000 980 (Chapter 1: SERIAL ARITHMETIC UNIT) 980 SB
1921 1000 29 (1) 29 SB
450 1100 831 (1.0 Serial Arithmetic Unit Summary) 831 SB
1921 1100 29 (1) 29 SB
450 1200 717 (1.1 Arithmetic and Logic Units) 717 SB
1921 1200 29 (1) 29 SB
450 1300 658 (1.1.1 The Serial ALU, Part I) 658 SB
1921 1300 29 (1) 29 SB
450 1400 677 (1.1.2 The Serial ALU, Part II) 677 SB
1921 1400 29 (2) 29 SB
450 1500 760 (1.2 The VHDL Solution to Part I) 760 SB
1921 1500 29 (4) 29 SB
450 1600 822 (1.2.1 The ALU Part I VHDL Entity) 822 SB
1921 1600 29 (4) 29 SB
450 1700 970 (1.2.2 The ALU Part I VHDL Architecture) 970 SB
1921 1700 29 (4) 29 SB
450 1800 762 (1.2.3 The ALU Part I Test bench) 762 SB
1921 1800 29 (5) 29 SB
450 1900 779 (1.3 The VHDL Solution to Part II) 779 SB
1921 1900 29 (8) 29 SB
450 2000 841 (1.3.1 The ALU Part II VHDL Entity) 841 SB
1921 2000 29 (8) 29 SB
450 2100 989 (1.3.2 The ALU Part II VHDL Architecture) 989 SB
1921 2100 29 (8) 29 SB
450 2200 781 (1.3.3 The ALU Part II Test bench) 781 SB
1921 2200 29 (9) 29 SB
300 2300 1049 (Chapter 2: SERIAL BINARY MULTIPLIER) 1049 SB
1892 2300 58 (12) 58 SB
450 2400 869 (2.0 Serial Binary Multiplier Summary) 869 SB
1892 2400 58 (12) 58 SB
450 2500 1025 (2.1 The Serial Binary Multiplier Assignment) 1025 SB
1892 2500 58 (12) 58 SB
450 2600 1161 (2.2 VHDL Solution to the Serial Binary Multiplier) 1161 SB
1892 2600 58 (13) 58 SB
450 2700 1110 (2.2.1 The Serial Binary Multiplier VHDL Entity) 1110 SB
1892 2700 58 (13) 58 SB
450 2800 1258 (2.2.2 The Serial Binary Multiplier VHDL Architecture) 1258 SB
1892 2800 58 (13) 58 SB
450 2900 608 (2.2.3 Initialization Section) 608 SB
1892 2900 58 (15) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1188 3069 24 (ii) 24 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 544 (2.2.4 Booths Algorithm) 544 SB
1892 300 58 (15) 58 SB
450 400 1006 (2.3 The Serial Binary Multiplier Test bench) 1006 SB
1892 400 58 (15) 58 SB
450 500 1216 (2.4 The Serial Binary Multiplier Synthesized Results) 1216 SB
1892 500 58 (17) 58 SB
300 600 890 (PART II: COMPUTING ELEMENTS) 890 SB
1892 600 58 (18) 58 SB
0 0 0 fC
/fm 256 def
889 2 300 659 B
1 F
n
300 700 864 (Chapter 3: A SIMPLE PROCESSOR) 864 SB
1892 700 58 (18) 58 SB
450 800 263 (3.0 A Simp) 263 SB
713 800 516 (le Processor Summary) 516 SB
1862 800 88 (  18) 88 SB
450 900 1029 (3.1 Simple Processor Functional Description) 1029 SB
1892 900 58 (18) 58 SB
450 1000 609 (3.1.1 Register Instructions) 609 SB
1892 1000 58 (19) 58 SB
450 1100 582 (3.1.2 Branch Instructions) 582 SB
1892 1100 58 (21) 58 SB
450 1200 705 (3.1.3 Halt and I/O Instructions) 705 SB
1892 1200 58 (21) 58 SB
450 1300 628 (3.1.4 Simple Computer I/O) 628 SB
1892 1300 58 (22) 58 SB
450 1400 1415 (3.2 A VHDL Implementation of the EE126 Simple Computer) 1415 SB
1892 1400 58 (22) 58 SB
450 1500 748 (3.2.1 Simple Computer Memory) 748 SB
1892 1500 58 (22) 58 SB
450 1600 863 (3.2.2 Simple Computer VHDL Entity) 863 SB
1892 1600 58 (23) 58 SB
450 1700 1011 (3.2.3 Simple Computer VHDL Architecture) 1011 SB
1892 1700 58 (24) 58 SB
450 1800 869 (3.2.4 Simple Computer Configuration) 869 SB
1892 1800 58 (27) 58 SB
450 1900 803 (3.2.5 Simple Computer Test bench) 803 SB
1892 1900 58 (28) 58 SB
300 2000 883 (Chapter 4: THE BASIC COMPUTER) 883 SB
1892 2000 58 (31) 58 SB
450 2100 294 (4.0 The Basi) 294 SB
744 2100 517 (c Computer Definition) 517 SB
1892 2100 58 (31) 58 SB
450 2200 745 (4.1 Basic Computer Instructions) 745 SB
1892 2200 58 (31) 58 SB
450 2300 863 (4.1.1 Memory Reference Instructions) 863 SB
1892 2300 58 (31) 58 SB
450 2400 858 (4.1.2 Register Reference Instructions) 858 SB
1892 2400 58 (32) 58 SB
450 2500 695 (4.1.3 input/output Instructions) 695 SB
1892 2500 58 (33) 58 SB
450 2600 1090 (4.2 The VHDL Solution to the Basic Computer) 1090 SB
1892 2600 58 (34) 58 SB
450 2700 716 (4.2.1 Basic Computer Memory) 716 SB
1892 2700 58 (34) 58 SB
450 2800 831 (4.2.2 Basic Computer VHDL Entity) 831 SB
1892 2800 58 (35) 58 SB
450 2900 979 (4.2.3 Basic Computer VHDL Architecture) 979 SB
1892 2900 58 (37) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1182 3069 36 (iii) 36 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 1011 (4.2.4 Basic Computer VHDL Configuration) 1011 SB
1892 300 58 (45) 58 SB
450 400 776 (4.3 Basic Computer Test benches) 776 SB
1892 400 58 (46) 58 SB
450 500 1365 (4.3.1 Basic Computer Test bench #1: Program to Add Two) 1365 SB
450 600 210 (Numbers) 210 SB
1892 600 58 (46) 58 SB
450 700 260 (4.3.2 Basic) 260 SB
710 700 933 ( Computer Test bench #2: Multiply Two) 933 SB
450 800 409 (Positive Numbers) 409 SB
1892 800 58 (50) 58 SB
300 900 1014 (Chapter 5: ASSEMBLER FLOW CHARTS) 1014 SB
1892 900 58 (56) 58 SB
450 1000 311 (5.0 First Pass) 311 SB
1892 1000 58 (56) 58 SB
450 1100 377 (5.1 Second Pass) 377 SB
1892 1100 58 (56) 58 SB
300 1200 662 (Chapter 6: CONCLUSIONS) 662 SB
1892 1200 58 (59) 58 SB
300 1300 257 (References) 257 SB
1892 1300 58 (60) 58 SB
300 1400 636 (Appendix A: ALU I VHDL) 636 SB
300 1500 652 (Appendix B: ALU II VHDL) 652 SB
300 1600 751 (Appendix C: ALU I Test Bench ) 751 SB
300 1700 924 (Appendix D: ALU I Test Bench Results) 924 SB
300 1800 751 (Appendix E: ALU II Test Bench) 751 SB
300 1900 923 (Appendix F: ALU II Test bench Results) 923 SB
300 2000 697 (Appendix G: ALU I Synthesis) 697 SB
300 2100 715 (Appendix H: ALU II Synthesis) 715 SB
300 2200 836 (Appendix I: Serial Binary Multiplier) 836 SB
300 2300 1116 (Appendix J: Serial Binary Multiplier Test Bench) 1116 SB
300 2400 1043 (Appendix K: Serial Binary Multiplier Results) 1043 SB
300 2500 1085 (Appendix L: Serial Binary Multiplier Synthesis) 1085 SB
300 2600 900 (Appendix M: Simple Computer VHDL) 900 SB
300 2700 992 (Appendix N: Simple Computer Test Bench) 992 SB
300 2800 1177 (Appendix O: Simple Computer Test Bench Results) 1177 SB
300 2900 940 (Appendix P: Simple Computer Synthesis) 940 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1184 3069 32 (iv) 32 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 858 (Appendix Q: Basic Computer VHDL) 858 SB
300 400 1030 (Appendix R: Basic Computer Test Bench #1) 1030 SB
300 500 1208 (Appendix S: Basic Computer Test Bench #1 Results) 1208 SB
300 600 1026 (Appendix T: Basic Computer Test Bench #2) 1026 SB
300 700 1218 (Appendix U: Basic Computer Test Bench #2 Results) 1218 SB
300 800 1122 (Appendix V: Basic Computer Assembler in C++) 1122 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1190 3069 20 (v) 20 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1032 300 335 (List of Figures) 335 SB
0 0 0 fC
/fm 256 def
334 2 1032 359 B
1 F
n
450 400 542 (1. ALU Block Diagram) 542 SB
1921 400 29 (3) 29 SB
450 500 685 (2. Simple Processor Structure) 685 SB
1892 500 58 (19) 58 SB
450 600 542 (3. Assembler First Pass) 542 SB
1892 600 58 (56) 58 SB
450 700 608 (4. Assembler Second Pass) 608 SB
1892 700 58 (58) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1184 3069 32 (vi) 32 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1040 300 320 (Code Listings) 320 SB
0 0 0 fC
/fm 256 def
319 2 1040 359 B
1 F
n
450 400 573 (1. ALU Entity Statement) 573 SB
1921 400 29 (4) 29 SB
450 500 477 (2. ALU Architecture) 477 SB
1921 500 29 (5) 29 SB
450 600 477 (3. ALU I Test bench) 477 SB
1921 600 29 (7) 29 SB
450 700 626 (4. ALU II Entity Statement) 626 SB
1921 700 29 (8) 29 SB
450 800 530 (5. ALU II Architecture) 530 SB
1921 800 29 (9) 29 SB
450 900 496 (6. ALU II Test bench) 496 SB
1892 900 58 (11) 58 SB
450 1000 759 (7. Serial Binary Multiplier Entity) 759 SB
1892 1000 58 (13) 58 SB
450 1100 907 (8. Serial Binary Multiplier Architecture) 907 SB
1892 1100 58 (14) 58 SB
450 1200 1048 (9. Serial Binary Multiplier Initialization Code) 1048 SB
1892 1200 58 (15) 58 SB
450 1300 902 (10. Serial Binary Multiplier Test bench) 902 SB
1892 1300 58 (17) 58 SB
450 1400 29 (1) 29 SB
479 1400 862 (1. Simple Computer Memory Section) 862 SB
1892 1400 58 (23) 58 SB
450 1500 819 (12. Simple Computer VHDL Entity) 819 SB
1892 1500 58 (24) 58 SB
450 1600 793 (13. Simple Computer Architecture) 793 SB
1892 1600 58 (27) 58 SB
450 1700 825 (14. Simple Computer Configuration) 825 SB
1892 1700 58 (27) 58 SB
450 1800 1099 (15. Simple Computer Multiplication Test bench) 1099 SB
1892 1800 58 (30) 58 SB
450 1900 672 (16. Basic Computer Memory) 672 SB
1892 1900 58 (35) 58 SB
450 2000 613 (17. Basic Computer Entity) 613 SB
1892 2000 58 (36) 58 SB
450 2100 761 (18. Basic Computer Architecture) 761 SB
1892 2100 58 (45) 58 SB
450 2200 793 (19. Basic Computer Configuration) 793 SB
1892 2200 58 (45) 58 SB
450 2300 1191 (20. Basic Computer Program to Add Two Numbers) 1191 SB
1892 2300 58 (46) 58 SB
450 2400 1034 (21. VHDL Test bench to Add Two Numbers) 1034 SB
1892 2400 58 (50) 58 SB
450 2500 1264 (22. Basic Computer Program to Multiply Two Positive) 1264 SB
450 2600 210 (Numbers) 210 SB
1892 2600 58 (50) 58 SB
450 2700 262 (23. VHDL ) 262 SB
712 2700 1070 (Test bench to Multiply Two Positive Numbers) 1070 SB
1892 2700 58 (55) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1178 3069 44 (vii) 44 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1034 300 332 (List Of Tables) 332 SB
0 0 0 fC
/fm 256 def
331 2 1034 359 B
1 F
n
450 400 415 (1. ALU Functions) 415 SB
1921 400 29 (2) 29 SB
450 500 679 (2. Basic Register Instructions) 679 SB
1892 500 58 (20) 58 SB
450 600 274 (3. Carry Bit) 274 SB
1892 600 58 (20) 58 SB
450 700 489 (4. Register Bit Fields) 489 SB
1892 700 58 (20) 58 SB
450 800 768 (5. Extended Register Instructions) 768 SB
1892 800 58 (21) 58 SB
450 900 724 (6. Branch Instruction Bit Fields) 724 SB
1892 900 58 (21) 58 SB
450 1000 632 (7. Halt and I/O Instructions) 632 SB
1892 1000 58 (21) 58 SB
450 1100 946 (8. Memory Reference Instruction Format) 946 SB
1892 1100 58 (31) 58 SB
450 1200 949 (9. Direct Memory Reference Instructions) 949 SB
1892 1200 58 (32) 58 SB
450 1300 1012 (10. Indirect Memory Reference Instructions) 1012 SB
1892 1300 58 (32) 58 SB
450 1400 970 (11. Register Reference Instruction Format) 970 SB
1892 1400 58 (33) 58 SB
450 1500 814 (12. Register Reference Instructions) 814 SB
1892 1500 58 (33) 58 SB
450 1600 164 (13. Inp) 164 SB
614 1600 660 (ut/Output Instruction Format) 660 SB
1892 1600 58 (34) 58 SB
450 1700 668 (14. Input/Output Instructions) 668 SB
1892 1700 58 (34) 58 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1172 3069 56 (viii) 56 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
390 300 1620 (VHDL Representations of Some Hardware Architectures, a Basic) 1620 SB
844 400 711 (Computer and an Assembler) 711 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
300 501 197 (Abstract) 197 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
497 500 15 ( ) 26 SB
523 500 34 (- ) 45 SB
568 500 116 (This ) 127 SB
695 500 147 (Paper ) 158 SB
853 500 53 (is ) 65 SB
918 500 212 (intended ) 224 SB
1142 500 64 (as ) 76 SB
1218 500 41 (a ) 53 SB
1271 500 163 (follow ) 175 SB
1446 500 72 (up ) 84 SB
1530 500 60 (to ) 72 SB
1602 500 86 (my ) 98 SB
1700 500 212 (previous ) 224 SB
1924 500 176 (project,) 176 SB
300 600 212 ("VHDL: ) 218 SB
518 600 84 (An ) 90 SB
608 600 335 (Introduction." ) 341 SB
949 600 15 ( ) 21 SB
970 600 116 (This ) 122 SB
1092 600 144 (paper ) 150 SB
1242 600 207 (assumes ) 213 SB
1455 600 101 (that ) 107 SB
1562 600 85 (the ) 91 SB
1653 600 212 (previous ) 219 SB
1872 600 144 (paper ) 151 SB
2023 600 77 (has) 77 SB
300 700 124 (been ) 129 SB
429 700 115 (read ) 120 SB
549 700 98 (and ) 103 SB
652 700 108 (also ) 113 SB
765 700 207 (assumes ) 212 SB
977 700 41 (a ) 46 SB
1023 700 205 (working ) 210 SB
1233 700 267 (knowledge ) 272 SB
1505 700 62 (of ) 67 SB
1572 700 189 (VHDL. ) 194 SB
1766 700 15 ( ) 20 SB
1786 700 62 (In ) 67 SB
1853 700 97 (this ) 103 SB
1956 700 144 (paper,) 144 SB
300 800 85 (the ) 88 SB
388 800 172 (EE126 ) 175 SB
563 800 202 (Projects ) 205 SB
768 800 64 (as ) 67 SB
835 800 113 (well ) 116 SB
951 800 64 (as ) 67 SB
1018 800 85 (the ) 89 SB
1107 800 172 (EE126 ) 176 SB
1283 800 143 (Basic ) 147 SB
1430 800 244 (Computer ) 248 SB
1678 800 122 (shall ) 126 SB
1804 800 70 (be ) 74 SB
1878 800 222 (presented) 222 SB
300 900 98 (and ) 103 SB
403 900 41 (a ) 46 SB
449 900 234 (Synthesis ) 239 SB
688 900 143 (ready ) 148 SB
836 900 174 (VHDL ) 179 SB
1015 900 125 (code ) 130 SB
1145 900 122 (shall ) 127 SB
1272 900 70 (be ) 75 SB
1347 900 252 (presented. ) 257 SB
1604 900 15 ( ) 20 SB
1624 900 86 (All ) 91 SB
1715 900 85 (the ) 91 SB
1806 900 125 (code ) 131 SB
1937 900 102 (will ) 108 SB
2045 900 55 (be) 55 SB
300 1000 1572 (presented along with VHDL test benches and full simulation results.) 1572 SB
450 1100 1490 (The purpose of this paper is to expand the current knowledge of ) 1491 SB
1941 1100 159 (VHDL) 159 SB
300 1200 81 (for ) 84 SB
384 1200 135 (Tufts ) 138 SB
522 1200 219 (students, ) 222 SB
744 1200 235 (providing ) 238 SB
982 1200 223 (exposure ) 226 SB
1208 1200 60 (to ) 63 SB
1271 1200 101 (real ) 104 SB
1375 1200 149 (world ) 152 SB
1527 1200 228 (problems ) 232 SB
1759 1200 98 (and ) 102 SB
1861 1200 101 (real ) 105 SB
1966 1200 134 (world) 134 SB
300 1300 174 (VHDL ) 194 SB
494 1300 236 (solutions. ) 256 SB
750 1300 15 ( ) 35 SB
785 1300 81 (By ) 102 SB
887 1300 256 (combining ) 277 SB
1164 1300 85 (the ) 106 SB
1270 1300 174 (VHDL ) 195 SB
1465 1300 116 (with ) 137 SB
1602 1300 195 (actually ) 216 SB
1818 1300 282 (constructing) 282 SB
300 1400 245 (hardware, ) 255 SB
555 1400 41 (a ) 51 SB
606 1400 231 (computer ) 241 SB
847 1400 282 (engineering ) 292 SB
1139 1400 181 (student ) 191 SB
1330 1400 102 (will ) 112 SB
1442 1400 70 (be ) 80 SB
1522 1400 143 (ready ) 153 SB
1675 1400 60 (to ) 70 SB
1745 1400 130 (enter ) 140 SB
1885 1400 85 (the ) 96 SB
1981 1400 119 (work) 119 SB
300 1500 967 (force with knowledge useful to his career.) 967 SB
300 1700 1006 (The main issues described in this paper are:) 1006 SB
450 1800 1225 (\(i\) VHDL Implementation of a Serial Arithmetic and ) 1225 SB
1675 1800 248 (Logic Unit) 248 SB
450 1900 1281 (\(ii\) VHDL Implementation of a Serial Binary Multiplier) 1281 SB
450 2000 1369 (\(iii\) VHDL Implementation of the EE126 Simple Computer) 1369 SB
450 2100 1163 (\(iv\) VHDL Implementation of the Basic Computer) 1163 SB
450 2200 713 (\(v\) Basic Computer Assembler) 713 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 8
% TrueType font name key:
%    MSTT31c17a = 45a7DTimes New RomanF0000003a000001900000
%    MSTT31c187 = 45a7DTimes New RomanF0000002a000001900000
%    MSTT31c194 = 45a7DTimes New RomanF0000003a000002bc0000
%    MSTT31c1a1 = 45a7DTimes New RomanF0000003a000001900001
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
