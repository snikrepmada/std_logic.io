%!PS-Adobe-3.0
%%Creator: Windows PSCRIPT
%%Title: Microsoft Word - MAST_DOC.DOC
%%BoundingBox: 18 9 593 784
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: (atend)
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#88/circumflex 16#89/perthousand
16#8A/Scaron 16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright
16#93/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#98/tilde 16#99/trademark 16#9A/scaron 16#9B/guilsinglright
16#9C/oe 16#9F/Ydieresis 16#A0/space 16#A1/exclamdown 16#A4/currency
16#A5/yen 16#A6/brokenbar 16#A7/section 16#A8/dieresis 16#A9/copyright
16#AA/ordfeminine 16#AB/guillemotleft 16#AC/logicalnot 16#AD/hyphen
16#AE/registered 16#AF/macron 16#B0/degree 16#B1/plusminus 16#B2/twosuperior
16#B3/threesuperior 16#B4/acute 16#B5/mu 16#B6/paragraph 16#B7/periodcentered
16#B8/cedilla 16#B9/onesuperior 16#BA/ordmasculine 16#BB/guillemotright
16#BC/onequarter 16#BD/onehalf 16#BE/threequarters 16#BF/questiondown
16#C0/Agrave 16#C1/Aacute 16#C2/Acircumflex 16#C3/Atilde 16#C4/Adieresis
16#C5/Aring 16#C6/AE 16#C7/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA
/Ecircumflex 16#CB/Edieresis 16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex
16#CF/Idieresis 16#D0/Eth 16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4
/Ocircumflex 16#D5/Otilde 16#D6/Odieresis 16#D7/multiply 16#D8/Oslash
16#D9/Ugrave 16#DA/Uacute 16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute
16#DE/Thorn 16#DF/germandbls 16#E0/agrave 16#E1/aacute 16#E2/acircumflex
16#E3/atilde 16#E4/adieresis 16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8
/egrave 16#E9/eacute 16#EA/ecircumflex 16#EB/edieresis 16#EC/igrave
16#ED/iacute 16#EE/icircumflex 16#EF/idieresis 16#F0/eth 16#F1/ntilde
16#F2/ograve 16#F3/oacute 16#F4/ocircumflex 16#F5/otilde 16#F6/odieresis
16#F7/divide 16#F8/oslash 16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex
16#FC/udieresis 16#FD/yacute 16#FE/thorn 16#FF/ydieresis ] def/reencdict
12 dict def/IsChar{basefontdict/CharStrings get exch known}bd/MapCh{dup
IsChar not{pop/bullet}if newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0
/degree IsChar{/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar
IsChar{/brokenbar}{/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname
ed/basefontname ed FontDirectory newfontname known not{/basefontdict
basefontname findfont def/newfont basefontdict maxlength dict def basefontdict{exch
dup/FID ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll
put}{exch newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont
/FontName newfontname put 127 1 159{newfont/Encoding get exch/bullet
put}for ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree
MapBB newfontname newfont definefont pop}if newfontname end}bd/SB{FC
/ULlen ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed
/dxGdi ed/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1
mul x1 x1 mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch
y1 mul cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra
ed/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
statusdict begin 0 setjobtimeout end
statusdict begin statusdict /jobname (Microsoft Word - MAST_DOC.DOC) put end
/oldDictCnt countdictstack def {}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
/oldDictCnt countdictstack def {letter
}stopped 
{ countdictstack oldDictCnt lt { Win35Dict begin } 
{1 1 countdictstack oldDictCnt sub {pop end } for } ifelse } if 
[
{mark 1.0 1.0 .98 .9 .82 .68 .56 .48 .28 .1 .06 .0 counttomark dup 3 add -1 roll exch 2 sub mul dup floor cvi dup 3 1 roll sub exch dup  3 add index exch 2 add index dup 4 1 roll sub mul add counttomark 1 add 1 roll  cleartomark } bind
/exec load currenttransfer /exec load] cvx settransfer
/fPP true def
%%EndSetup
%%Page: 1 1
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
0 0 0 fC
300 300 815 (PART I THE VHDL LANGUAGE) 815 SB
0 0 0 fC
/fm 256 def
814 2 300 359 B
1 F
n
300 500 1138 (CHAPTER 1: TOP LEVEL VHDL OVERVIEW) 1138 SB
/fm 256 def
1137 2 300 559 B
1 F
n
300 700 550 (1.0 VHDL design Units) 550 SB
/fm 256 def
549 2 300 759 B
1 F
n
450 800 104 (The ) 116 SB
566 800 174 (VHDL ) 186 SB
752 800 220 (language ) 232 SB
984 800 53 (is ) 65 SB
1049 800 277 (specifically ) 289 SB
1338 800 57 (tai) 57 SB
1395 800 133 (lored ) 146 SB
1541 800 60 (to ) 73 SB
1614 800 235 (designing ) 248 SB
1862 800 183 (circuits ) 196 SB
2058 800 42 (at) 42 SB
375 900 117 (both ) 131 SB
506 900 256 (behavioral ) 270 SB
776 900 98 (and ) 112 SB
888 900 111 (gate ) 125 SB
1013 900 163 (levels. ) 177 SB
1190 900 15 ( ) 29 SB
1219 900 228 (Although ) 242 SB
1461 900 46 (it ) 60 SB
1521 900 112 (may ) 126 SB
1647 900 70 (be ) 84 SB
1731 900 204 (possible ) 218 SB
1949 900 60 (to ) 74 SB
2023 900 77 (use) 77 SB
375 1000 174 (VHDL ) 181 SB
556 1000 60 (to ) 67 SB
623 1000 208 (program ) 215 SB
838 1000 183 (general ) 190 SB
1028 1000 198 (purpose ) 205 SB
1233 1000 229 (software, ) 237 SB
1470 1000 101 (that ) 109 SB
1579 1000 53 (is ) 61 SB
1640 1000 88 (not ) 96 SB
1736 1000 85 (the ) 93 SB
1829 1000 216 (intention ) 224 SB
2053 1000 47 (of) 47 SB
375 1100 85 (the ) 104 SB
479 1100 235 (language. ) 254 SB
733 1100 104 (The ) 123 SB
856 1100 116 (very ) 136 SB
992 1100 216 (structure ) 236 SB
1228 1100 62 (of ) 82 SB
1310 1100 85 (the ) 105 SB
1415 1100 220 (language ) 240 SB
1655 1100 210 (suggests ) 230 SB
1885 1100 215 (hardware) 215 SB
375 1200 179 (design. ) 186 SB
561 1200 149 (There ) 156 SB
717 1200 86 (are ) 93 SB
810 1200 130 (three ) 137 SB
947 1200 292 (components ) 299 SB
1246 1200 60 (to ) 67 SB
1313 1200 85 (the ) 92 SB
1405 1200 134 (basic ) 142 SB
1547 1200 174 (VHDL ) 182 SB
1729 1200 223 (program. ) 231 SB
1960 1200 15 ( ) 23 SB
1983 1200 117 (They) 117 SB
375 1300 1001 (are: Entity, Architecture and Configuration.) 1001 SB
450 1400 189 (Briefly, ) 191 SB
641 1400 85 (the ) 87 SB
728 1400 144 (entity ) 146 SB
874 1400 231 (describes ) 233 SB
1107 1400 85 (the ) 87 SB
1194 1400 215 (interface ) 218 SB
1412 1400 60 (to ) 63 SB
1475 1400 85 (the ) 88 SB
1563 1400 175 (circuit, ) 178 SB
1741 1400 85 (the ) 88 SB
1829 1400 271 (architecture) 271 SB
375 1500 231 (describes ) 234 SB
609 1500 85 (the ) 88 SB
697 1500 215 (behavior ) 218 SB
915 1500 62 (of ) 65 SB
980 1500 85 (the ) 88 SB
1068 1500 163 ("black ) 166 SB
1234 1500 139 (box", ) 142 SB
1376 1500 98 (and ) 101 SB
1477 1500 85 (the ) 88 SB
1565 1500 320 (configuration ) 323 SB
1888 1500 139 (binds ) 142 SB
2030 1500 70 (the) 70 SB
375 1600 286 (architecture ) 314 SB
689 1600 98 (and ) 126 SB
815 1600 144 (entity ) 172 SB
987 1600 203 (together ) 231 SB
1218 1600 64 (as ) 92 SB
1310 1600 113 (well ) 141 SB
1451 1600 64 (as ) 93 SB
1544 1600 71 (all ) 100 SB
1644 1600 231 (internally ) 260 SB
1904 1600 196 (declared) 196 SB
375 1700 292 (components.) 292 SB
450 1800 153 (These ) 163 SB
613 1800 86 (are ) 96 SB
709 1800 102 (two ) 112 SB
821 1800 133 (other ) 143 SB
964 1800 292 (components ) 302 SB
1266 1800 147 (found ) 157 SB
1423 1800 58 (in ) 69 SB
1492 1800 132 (more ) 143 SB
1635 1800 295 (complicated ) 306 SB
1941 1800 159 (VHDL) 159 SB
375 1900 246 (programs. ) 270 SB
645 1900 132 (They ) 157 SB
802 1900 86 (are ) 111 SB
913 1900 85 (the ) 110 SB
1023 1900 205 (package ) 230 SB
1253 1900 98 (and ) 123 SB
1376 1900 205 (package ) 230 SB
1606 1900 145 (body. ) 170 SB
1776 1900 15 ( ) 40 SB
1816 1900 189 (Briefly, ) 214 SB
2030 1900 70 (the) 70 SB
375 2000 286 (PACKAGE ) 292 SB
667 2000 180 (defines ) 186 SB
853 2000 230 (constants ) 236 SB
1089 2000 98 (and ) 104 SB
1193 2000 238 (interfaces ) 244 SB
1437 2000 60 (to ) 67 SB
1504 2000 85 (the ) 92 SB
1596 2000 199 (routines ) 206 SB
1802 2000 147 (found ) 154 SB
1956 2000 144 (within) 144 SB
375 2100 1725 (the PACKAGE BODY. The following sections will detail these statements) 1725 SB
375 2200 1143 (and also introduce the actual language constructs.) 1143 SB
300 2400 226 (1.1 Entity) 226 SB
/fm 256 def
225 2 300 2459 B
1 F
n
450 2500 979 (The entity construct declares the interface ) 980 SB
1430 2500 60 (to ) 61 SB
1491 2500 85 (the ) 86 SB
1577 2500 189 (system. ) 190 SB
1767 2500 15 ( ) 16 SB
1783 2500 116 (This ) 117 SB
1900 2500 200 (interface) 200 SB
375 2600 95 (can ) 96 SB
471 2600 70 (be ) 71 SB
542 2600 181 (viewed ) 182 SB
724 2600 64 (as ) 65 SB
789 2600 41 (a ) 42 SB
831 2600 163 ("black ) 164 SB
995 2600 139 (box". ) 140 SB
1135 2600 15 ( ) 16 SB
1151 2600 56 (A ) 57 SB
1208 2600 116 (very ) 118 SB
1326 2600 166 (simple ) 168 SB
1494 2600 208 (example ) 210 SB
1704 2600 158 (would ) 160 SB
1864 2600 70 (be ) 72 SB
1936 2600 60 (to ) 62 SB
1998 2600 102 (look) 102 SB
375 2700 41 (a ) 49 SB
424 2700 126 (nand ) 134 SB
558 2700 126 (gate. ) 134 SB
692 2700 15 ( ) 23 SB
715 2700 104 (The ) 112 SB
827 2700 166 (simple ) 174 SB
1001 2700 126 (nand ) 134 SB
1135 2700 111 (gate ) 119 SB
1254 2700 53 (is ) 62 SB
1316 2700 203 (pictured ) 212 SB
1528 2700 58 (in ) 67 SB
1595 2700 162 (Figure ) 171 SB
1766 2700 59 (1, ) 68 SB
1834 2700 98 (and ) 107 SB
1941 2700 159 (VHDL) 159 SB
375 2800 401 (code in Listing 1.) 401 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 2 2
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (2) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 162 (\(Note: ) 175 SB
550 300 62 (In ) 75 SB
625 300 174 (VHDL ) 187 SB
812 300 41 (a ) 54 SB
866 300 226 (comment ) 239 SB
1105 300 53 (is ) 66 SB
1171 300 225 (indicated ) 238 SB
1409 300 72 (by ) 85 SB
1494 300 102 (two ) 115 SB
1609 300 170 (dashes ) 183 SB
1792 300 86 ('--'. ) 99 SB
1891 300 138 (Also, ) 152 SB
2043 300 57 (by) 57 SB
375 400 1079 (convention, reserved words are all in capitols.\)) 1079 SB
0 lc
0 lj
255 255 255 pC
0 1 SP
255 255 255 fC
/fm 256 def
gs 828 376 786 567 CB
827 375 786 567 B
1 F
S
n
gr
1 lc
1 lj
0 0 0 pC
gs 76 1 937 718 CB
937 718 M 75 0 1 PP
S
n
gr
gs 76 1 937 793 CB
937 793 M 75 0 1 PP
S
n
gr
gs 1 226 1012 643 CB
1012 643 M 0 225 1 PP
S
n
gr
gs 226 1 1012 868 CB
1012 868 M 225 0 1 PP
S
n
gr
gs 226 1 1012 643 CB
1237 643 M -225 0 1 PP
S
n
gr
gs 114 226 1237 643 CB
1237 643 M -27 15 -22 14 -19 14 -17 14 -12 14 -8 14 -6 14 -2 14 2 14 6 14 8 14 12 14 17 14 19 14 22 14 27 14 16 PP
S
n
gr
0 0 0 fC
/fm 256 def
1237 644 M -1 2 1 -2 2 PP
1 F
n
/fm 256 def
1238 868 M 1 1 -1 -1 2 PP
1 F
n
0 1 SP
gs 76 1 1406 755 CB
1406 755 M 75 0 1 PP
S
n
gr
32 3600 3600 55 55 0 0 0 56 /AvantGarde-Demi /font3 ANSIFont font
gs 828 376 786 567 CB
1425 697 35 (c) 35 SB
gr
gs 828 376 786 567 CB
901 659 36 (a) 36 SB
gr
gs 828 376 786 567 CB
901 730 36 (b) 36 SB
gr
gs 57 57 1350 718 CB
1406 746 M 5 -3 3 -5 4 -5 1 -5 1 -6 -1 -6 -1 -5 -4 -5 -3 -5 -5 -3 -5 -3 -6 -1 -6 0 -6 1 -5 3 -5 3 -4 5 -3 5 -2 5 0 6 20 PP
0 0 0 6 2 5 3 5 4 5 5 3 5 3 6 1 6 0 6 -1 5 -3 11 PP
S
n
gr
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
856 951 688 (Figure 1. Simple NAND Gate) 688 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
375 1093 390 (LIBRARY ieee;) 390 SB
1200 1093 690 (-- use the ieee library) 690 SB
375 1143 840 (USE ieee.std_logic_1164.ALL;) 840 SB
375 1193 420 (ENTITY nand IS) 420 SB
450 1243 510 (GENERIC\(out_delay) 510 SB
1050 1243 870 (: time := 5 ns\); --Delay info) 870 SB
450 1293 180 (PORT\(a) 180 SB
750 1293 450 (: IN std_logic;) 450 SB
1350 1293 270 (-- Inputs) 270 SB
600 1343 30 (b) 30 SB
750 1343 120 (: IN) 120 SB
900 1343 300 (std_logic;) 300 SB
600 1393 30 (c) 30 SB
750 1393 510 (: OUT std_logic\);) 510 SB
1350 1393 300 (-- Outputs) 300 SB
375 1443 270 (END nand;) 270 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
743 1576 913 (Listing 1. Flip-Flop ENTITY Statement) 913 SB
450 1751 127 (Here ) 131 SB
581 1751 83 (we ) 87 SB
668 1751 157 (define ) 161 SB
829 1751 206 (generics ) 210 SB
1039 1751 154 (which ) 159 SB
1198 1751 86 (are ) 91 SB
1289 1751 230 (constants ) 235 SB
1524 1751 171 (passed ) 176 SB
1700 1751 103 (into ) 108 SB
1808 1751 292 (components,) 292 SB
375 1851 178 (usually ) 180 SB
555 1851 165 (counts ) 167 SB
722 1851 63 (or ) 65 SB
787 1851 162 (delays ) 164 SB
951 1851 98 (and ) 100 SB
1051 1851 85 (the ) 87 SB
1138 1851 108 (port ) 110 SB
1248 1851 235 (statement ) 237 SB
1485 1851 165 (allows ) 167 SB
1652 1851 66 (us ) 68 SB
1720 1851 60 (to ) 62 SB
1782 1851 157 (define ) 159 SB
1941 1851 159 (system) 159 SB
375 1951 107 (I/O. ) 116 SB
491 1951 15 ( ) 24 SB
515 1951 104 (The ) 113 SB
628 1951 234 (following ) 243 SB
871 1951 86 (are ) 96 SB
967 1951 150 (signal ) 160 SB
1127 1951 137 (types ) 147 SB
1274 1951 154 (which ) 164 SB
1438 1951 95 (can ) 105 SB
1543 1951 70 (be ) 80 SB
1623 1951 211 (declared ) 221 SB
1844 1951 58 (in ) 68 SB
1912 1951 85 (the ) 95 SB
2007 1951 93 (port) 93 SB
375 2051 235 (statement:) 235 SB
450 2251 61 (IN) 61 SB
750 2251 439 (Input to the system) 439 SB
450 2351 119 (OUT) 119 SB
750 2351 542 (Output from the system) 542 SB
450 2451 180 (INOUT) 180 SB
750 2451 588 (A bi-directional SIGNAL) 588 SB
450 2551 216 (BUFFER) 216 SB
750 2551 1206 (A register attached to an output. \(note: it is normally) 1206 SB
750 2651 1188 (impossible to read an output, but a buffer allows thi) 1188 SB
1938 2651 42 (s\)) 42 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font AvantGarde-Demi
%%+ font Courier
%%+ font Times-Roman
%%Page: 3 3
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (3) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 104 (The ) 109 SB
559 300 183 (generic ) 188 SB
747 300 53 (is ) 58 SB
805 300 186 (defined ) 191 SB
996 300 116 (with ) 121 SB
1117 300 114 (type ) 119 SB
1236 300 115 (time ) 120 SB
1356 300 199 (because ) 204 SB
1560 300 46 (it ) 51 SB
1611 300 53 (is ) 58 SB
1669 300 41 (a ) 46 SB
1715 300 139 (delay ) 144 SB
1859 300 138 (value ) 144 SB
2003 300 62 (of ) 68 SB
2071 300 29 (5) 29 SB
375 400 81 (ns, ) 84 SB
459 400 213 (although ) 216 SB
675 400 46 (it ) 49 SB
724 400 53 (is ) 56 SB
780 400 204 (possible ) 207 SB
987 400 60 (to ) 64 SB
1051 400 116 (pass ) 120 SB
1171 400 58 (in ) 62 SB
1233 400 97 (any ) 101 SB
1334 400 174 (VHDL ) 178 SB
1512 400 129 (type. ) 133 SB
1645 400 156 (Along ) 160 SB
1805 400 134 (these ) 138 SB
1943 400 122 (lines ) 126 SB
2069 400 31 (it) 31 SB
375 500 167 (should ) 172 SB
547 500 70 (be ) 75 SB
622 500 143 (noted ) 149 SB
771 500 101 (that ) 107 SB
878 500 264 (throughout ) 270 SB
1148 500 97 (this ) 103 SB
1251 500 255 (document, ) 261 SB
1512 500 98 (and ) 104 SB
1616 500 166 (except ) 172 SB
1788 500 81 (for ) 87 SB
1875 500 225 (synthesis,) 225 SB
375 600 115 (only ) 116 SB
491 600 85 (the ) 86 SB
577 600 139 (IEEE ) 140 SB
717 600 211 (standard ) 212 SB
929 600 44 (9 ) 45 SB
974 600 138 (value ) 139 SB
1113 600 128 (logic ) 129 SB
1242 600 174 (system ) 175 SB
1417 600 263 (\(std_logic\) ) 264 SB
1681 600 102 (will ) 103 SB
1784 600 70 (be ) 71 SB
1855 600 136 (used. ) 138 SB
1993 600 15 ( ) 17 SB
2010 600 50 (It ) 52 SB
2062 600 38 (is) 38 SB
375 700 132 (more ) 137 SB
512 700 159 (robust ) 164 SB
676 700 113 (than ) 118 SB
794 700 85 (the ) 90 SB
884 700 75 (bit ) 80 SB
964 700 63 (or ) 68 SB
1032 700 248 (bit_vector ) 253 SB
1285 700 137 (types ) 142 SB
1427 700 98 (and ) 103 SB
1530 700 53 (is ) 59 SB
1589 700 85 (the ) 91 SB
1680 700 128 (logic ) 134 SB
1814 700 174 (system ) 180 SB
1994 700 106 (used) 106 SB
375 800 528 (exclusively at Sanders.) 528 SB
450 900 189 (Entities ) 203 SB
653 900 86 (are ) 100 SB
753 900 108 (also ) 122 SB
875 900 236 (important ) 250 SB
1125 900 58 (in ) 72 SB
1197 900 101 (that ) 115 SB
1312 900 46 (it ) 60 SB
1372 900 53 (is ) 67 SB
1439 900 204 (possible ) 219 SB
1658 900 60 (to ) 75 SB
1733 900 182 (include ) 197 SB
1930 900 170 (passive) 170 SB
375 1000 239 (processes ) 250 SB
625 1000 159 (within ) 170 SB
795 1000 85 (the ) 96 SB
891 1000 159 (entity. ) 170 SB
1061 1000 104 (The ) 115 SB
1176 1000 170 (impact ) 181 SB
1357 1000 62 (of ) 73 SB
1430 1000 97 (this ) 108 SB
1538 1000 53 (is ) 65 SB
1603 1000 101 (that ) 113 SB
1716 1000 46 (it ) 58 SB
1774 1000 53 (is ) 65 SB
1839 1000 204 (possible ) 216 SB
2055 1000 45 (to) 45 SB
375 1100 938 (include setup and hold checking. This is ) 939 SB
1314 1100 115 (only ) 116 SB
1430 1100 98 (one ) 99 SB
1529 1100 204 (possible ) 205 SB
1734 1100 107 (use, ) 108 SB
1842 1100 88 (but ) 89 SB
1931 1100 85 (the ) 86 SB
2017 1100 83 (one) 83 SB
375 1200 529 (of greatest importance.) 529 SB
300 1400 374 (1.2 Architecture) 374 SB
0 0 0 fC
/fm 256 def
373 2 300 1459 B
1 F
n
450 1500 104 (The ) 105 SB
555 1500 286 (architecture ) 288 SB
843 1500 53 (is ) 55 SB
898 1500 85 (the ) 87 SB
985 1500 152 (actual ) 154 SB
1139 1500 216 (structure ) 218 SB
1357 1500 154 (which ) 156 SB
1513 1500 162 (makes ) 164 SB
1677 1500 72 (up ) 74 SB
1751 1500 41 (a ) 43 SB
1794 1500 140 (given ) 142 SB
1936 1500 164 (design.) 164 SB
375 1600 50 (It ) 59 SB
434 1600 53 (is ) 62 SB
496 1600 58 (in ) 67 SB
563 1600 114 (here ) 123 SB
686 1600 156 (where ) 165 SB
851 1600 83 (we ) 92 SB
943 1600 208 (describe ) 218 SB
1161 1600 58 (in ) 68 SB
1229 1600 136 (some ) 146 SB
1375 1600 185 (manner ) 195 SB
1570 1600 85 (the ) 95 SB
1665 1600 152 (actual ) 162 SB
1827 1600 215 (behavior ) 225 SB
2052 1600 48 (or) 48 SB
375 1700 203 (function ) 221 SB
596 1700 154 (which ) 172 SB
768 1700 180 (defines ) 198 SB
966 1700 85 (the ) 103 SB
1069 1700 232 (operation ) 250 SB
1319 1700 62 (of ) 80 SB
1399 1700 85 (the ) 103 SB
1502 1700 189 (system. ) 207 SB
1709 1700 15 ( ) 33 SB
1742 1700 149 (There ) 167 SB
1909 1700 86 (are ) 104 SB
2013 1700 87 (two) 87 SB
375 1800 1543 (methods used for writing VHDL, behavioral and structural models.) 1543 SB
300 2000 571 (1.2.1 Behavioral Models) 571 SB
/fm 256 def
570 2 300 2059 B
1 F
n
450 2100 1039 (A behavioral model is one which defines the ) 1040 SB
1490 2100 29 (b) 29 SB
1519 2100 186 (ehavior ) 187 SB
1706 2100 62 (of ) 63 SB
1769 2100 41 (a ) 42 SB
1811 2100 189 (system, ) 190 SB
2001 2100 99 (how) 99 SB
375 2200 41 (a ) 52 SB
427 2200 174 (system ) 185 SB
612 2200 121 (acts. ) 132 SB
744 2200 15 ( ) 26 SB
770 2200 96 (We ) 107 SB
877 2200 95 (can ) 106 SB
983 2200 125 (flesh ) 136 SB
1119 2200 88 (out ) 99 SB
1218 2200 85 (the ) 96 SB
1314 2200 126 (nand ) 137 SB
1451 2200 111 (gate ) 122 SB
1573 2200 153 (above ) 164 SB
1737 2200 58 (in ) 69 SB
1806 2200 41 (a ) 53 SB
1859 2200 241 (behavioral) 241 SB
375 2300 407 (model as follows:) 407 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2417 960 (ARCHITECTURE behavior OF nand IS) 960 SB
540 2467 1140 (-- declare internal signals or aliases) 1140 SB
465 2517 150 (BEGIN) 150 SB
540 2567 540 (c <= NOT\(a AND b\);) 540 SB
465 2617 390 (END behavior;) 390 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
870 2750 659 (Listing 2. Nand Architecture) 659 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 4 4
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (4) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 104 (The ) 105 SB
555 300 153 (above ) 154 SB
709 300 125 (code ) 126 SB
835 300 142 (could ) 143 SB
978 300 70 (be ) 71 SB
1049 300 140 (taken ) 141 SB
1190 300 64 (as ) 66 SB
1256 300 256 (behavioral ) 258 SB
1514 300 63 (or ) 65 SB
1579 300 244 (functional ) 246 SB
1825 300 64 (as ) 66 SB
1891 300 126 (nand ) 128 SB
2019 300 53 (is ) 55 SB
2074 300 26 (a) 26 SB
375 400 1719 (VHDL primitive.  A larger purely behavioral code will be introduced later.) 1719 SB
300 600 546 (1.2.2 Structural Models) 546 SB
0 0 0 fC
/fm 256 def
545 2 300 659 B
1 F
n
450 700 56 (A ) 65 SB
515 700 240 (Structural ) 249 SB
764 700 157 (model ) 166 SB
930 700 95 (can ) 104 SB
1034 700 70 (be ) 80 SB
1114 700 140 (many ) 150 SB
1264 700 148 (levels ) 158 SB
1422 700 140 (deep, ) 150 SB
1572 700 186 (starting ) 196 SB
1768 700 116 (with ) 126 SB
1894 700 206 (primitive) 206 SB
375 800 134 (gates ) 156 SB
531 800 98 (and ) 121 SB
652 800 202 (building ) 225 SB
877 800 60 (to ) 83 SB
960 800 208 (describe ) 231 SB
1191 800 41 (a ) 64 SB
1255 800 225 (complete ) 248 SB
1503 800 189 (system. ) 212 SB
1715 800 84 (An ) 107 SB
1822 800 208 (example ) 231 SB
2053 800 47 (of) 47 SB
375 900 231 (structural ) 234 SB
609 900 125 (code ) 128 SB
737 900 158 (would ) 161 SB
898 900 70 (be ) 73 SB
971 900 85 (the ) 88 SB
1059 900 234 (following ) 237 SB
1296 900 195 (RS-Flip ) 198 SB
1494 900 119 (Flop ) 123 SB
1617 900 281 (constructed ) 285 SB
1902 900 124 (from ) 128 SB
2030 900 70 (the) 70 SB
375 1000 612 (simple NAND gate above.) 612 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 702 def /pp_bx2 124 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 517 375 941 1142 CB
516 374 941 1142 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\RS.EPS
%%Title: 
%%CreationDate: Sun Apr 25 1993 1:57:04 PM
%%BoundingBox: 0 702 124 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
/_o 1 def
255 255 255 bc
151 0 M 0 0 0 112 2 D
S
151 112 M 0 0 113 0 2 D
S
151 0 M 0 0 113 0 2 D
S
264 112 M 314 94 339 75 339 56 bz
339 37 314 19 264 0 bz
S
39 37 M 0 0 112 0 2 D
S
151 75 M 0 0 -37 0 2 D
S
114 75 M 0 0 0 75 2 D
S
114 262 M 0 0 0 -37 2 D
S
151 262 M 0 0 0 113 2 D
S
151 375 M 0 0 113 0 2 D
S
264 262 M 0 0 -113 0 2 D
S
264 375 M 314 356 339 337 339 319 bz
339 300 314 281 264 262 bz
S
114 262 M 0 0 0 38 2 D
S
114 300 M 0 0 37 0 2 D
S
39 337 M 0 0 112 0 2 D
S
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (qb)0 52 0 0 0 0 48 0 470 281 sb
0 (q)0 52 0 0 0 0 24 0 470 19 sb
0 (R)0 52 0 0 0 0 32 0 0 0 sb
0 (S)0 52 0 0 0 0 26 0 7 300 sb
357 55 18 18 E
0 p
357 318 18 18 E
0 p
376 56 M 0 0 75 0 2 D
S
376 319 M 0 0 75 0 2 D
S
114 150 M 0 0 299 112 2 D
S
413 262 M 0 0 0 57 2 D
S
114 225 M 0 0 299 -113 2 D
S
413 112 M 0 0 0 -56 2 D
S
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore940 1525 520 (Figure 2. RS-Flip Flop) 520 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1642 420 (ENTITY rsff IS) 420 SB
540 1692 150 (PORT\() 150 SB
750 1692 30 (r) 30 SB
900 1692 120 (: IN) 120 SB
1050 1692 300 (std_logic;) 300 SB
750 1742 30 (s) 30 SB
900 1742 120 (: IN) 120 SB
1050 1742 300 (std_logic;) 300 SB
750 1792 30 (q) 30 SB
900 1792 480 (: OUT std_logic;) 480 SB
750 1842 60 (qb) 60 SB
900 1842 510 (: OUT std_logic\);) 510 SB
465 1892 270 (END rsff;) 270 SB
465 1942 870 (ARCHITECTURE behav OF rsff IS) 870 SB
540 1992 420 (COMPONENT nand) 420 SB
1050 1992 690 (-- define our nand gate) 690 SB
600 2042 390 (GENERIC\(delay) 390 SB
1050 2042 240 (: time\);) 240 SB
1350 2042 720 (-- this is a copy of the) 720 SB
600 2092 180 (PORT\(a) 180 SB
900 2092 1200 (: IN std_logic; -- nand entity statement) 1200 SB
750 2142 30 (b) 30 SB
900 2142 120 (: IN) 120 SB
1050 2142 300 (std_logic;) 300 SB
750 2192 30 (c) 30 SB
900 2192 510 (: OUT std_logic\);) 510 SB
540 2242 420 (END COMPONENT;) 420 SB
465 2292 150 (BEGIN) 150 SB
540 2342 240 (u1: nand) 240 SB
900 2342 1110 (-- instantiate u1 as a nand component) 1110 SB
600 2392 510 (GENERIC MAP\(5 ns\)) 510 SB
1200 2392 900 (-- here you would change delay) 900 SB
540 2442 180 (values) 180 SB
600 2492 570 (PORT MAP\(s, qb, q\);) 570 SB
1200 2492 720 (-- map I/O to components) 720 SB
540 2592 240 (u2: nand) 240 SB
900 2592 1110 (-- instantiate u2 as a nand component) 1110 SB
600 2642 510 (GENERIC MAP\(5 ns\)) 510 SB
600 2692 570 (PORT MAP\(q, r, qb\);) 570 SB
465 2742 300 (END behav;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
827 2875 745 (Listing 3. RS Flip Flop Example) 745 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 5 5
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (5) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 104 (The ) 105 SB
555 300 153 (above ) 154 SB
709 300 125 (code ) 126 SB
835 300 237 (illustrates ) 238 SB
1073 300 140 (many ) 141 SB
1214 300 221 (powerful ) 222 SB
1436 300 197 (features ) 198 SB
1634 300 62 (of ) 63 SB
1697 300 189 (VHDL. ) 190 SB
1887 300 15 ( ) 17 SB
1904 300 104 (The ) 106 SB
2010 300 90 (Flip) 90 SB
375 400 119 (Flop ) 121 SB
496 400 115 (\(FF\) ) 117 SB
613 400 53 (is ) 55 SB
668 400 186 (defined ) 188 SB
856 400 64 (as ) 66 SB
922 400 102 (two ) 104 SB
1026 400 353 (interconnected ) 356 SB
1382 400 126 (nand ) 129 SB
1511 400 149 (gates, ) 152 SB
1663 400 98 (and ) 101 SB
1764 400 85 (the ) 88 SB
1852 400 126 (nand ) 129 SB
1981 400 119 (gates) 119 SB
375 500 86 (are ) 88 SB
463 500 186 (defined ) 188 SB
651 500 58 (in ) 60 SB
711 500 206 (separate ) 209 SB
920 500 174 (VHDL ) 177 SB
1097 500 140 (code. ) 143 SB
1240 500 116 (This ) 119 SB
1359 500 165 (allows ) 168 SB
1527 500 66 (us ) 69 SB
1596 500 60 (to ) 63 SB
1659 500 92 (use ) 95 SB
1754 500 210 (different ) 213 SB
1967 500 133 (levels) 133 SB
375 600 58 (in ) 59 SB
434 600 185 (coding. ) 186 SB
620 600 94 (For ) 95 SB
715 600 223 (example, ) 224 SB
939 600 83 (we ) 84 SB
1023 600 142 (could ) 143 SB
1166 600 113 (then ) 114 SB
1280 600 250 (instantiate ) 251 SB
1531 600 85 (the ) 86 SB
1617 600 167 (RS-FF ) 168 SB
1785 600 269 (component ) 270 SB
2055 600 45 (to) 45 SB
375 700 1372 (form a shift register, and from there a bank of registers, etc.) 1372 SB
300 900 406 (1.3 Configuration) 406 SB
0 0 0 fC
/fm 256 def
405 2 300 959 B
1 F
n
450 1000 104 (The ) 108 SB
558 1000 320 (configuration ) 324 SB
882 1000 178 (section ) 182 SB
1064 1000 62 (of ) 66 SB
1130 1000 174 (VHDL ) 179 SB
1309 1000 165 (allows ) 170 SB
1479 1000 66 (us ) 71 SB
1550 1000 60 (to ) 65 SB
1615 1000 116 (bind ) 121 SB
1736 1000 91 (our ) 96 SB
1832 1000 180 (entities ) 185 SB
2017 1000 83 (and) 83 SB
375 1100 318 (architecture's ) 320 SB
695 1100 203 (together ) 205 SB
900 1100 60 (to ) 62 SB
962 1100 124 (form ) 126 SB
1088 1100 41 (a ) 43 SB
1131 1100 150 (single ) 152 SB
1283 1100 164 (design ) 166 SB
1449 1100 117 (unit. ) 119 SB
1568 1100 15 ( ) 17 SB
1585 1100 50 (It ) 52 SB
1637 1100 53 (is ) 56 SB
1693 1100 97 (this ) 100 SB
1793 1100 154 (which ) 157 SB
1950 1100 150 (allows) 150 SB
375 1200 66 (us ) 79 SB
454 1200 60 (to ) 73 SB
527 1200 123 (have ) 136 SB
663 1200 210 (different ) 224 SB
887 1200 318 (architecture's ) 332 SB
1219 1200 158 (bound ) 172 SB
1391 1200 60 (to ) 74 SB
1465 1200 69 (an ) 83 SB
1548 1200 144 (entity ) 158 SB
1706 1200 250 (statement. ) 264 SB
1970 1200 15 ( ) 29 SB
1999 1200 101 (This) 101 SB
375 1300 165 (allows ) 170 SB
545 1300 66 (us ) 71 SB
616 1300 60 (to ) 65 SB
681 1300 115 (start ) 120 SB
801 1300 91 (our ) 96 SB
897 1300 170 (coding ) 175 SB
1072 1300 116 (with ) 121 SB
1193 1300 41 (a ) 46 SB
1239 1300 117 (pure ) 122 SB
1361 1300 256 (behavioral ) 262 SB
1623 1300 203 (function ) 209 SB
1832 1300 98 (and ) 104 SB
1936 1300 113 (then ) 119 SB
2055 1300 45 (to) 45 SB
375 1400 211 (progress ) 213 SB
588 1400 191 (through ) 193 SB
781 1400 225 (synthesis ) 227 SB
1008 1400 63 (or ) 65 SB
1073 1400 126 (hand ) 128 SB
1201 1400 170 (coding ) 172 SB
1373 1400 60 (to ) 62 SB
1435 1400 41 (a ) 43 SB
1478 1400 231 (structural ) 233 SB
1711 1400 140 (level. ) 142 SB
1853 1400 15 ( ) 18 SB
1871 1400 116 (This ) 119 SB
1990 1400 110 (level) 110 SB
375 1500 158 (would ) 165 SB
540 1500 70 (be ) 77 SB
617 1500 132 (more ) 139 SB
756 1500 113 (akin ) 120 SB
876 1500 60 (to ) 67 SB
943 1500 41 (a ) 49 SB
992 1500 111 (gate ) 119 SB
1111 1500 125 (level ) 133 SB
1244 1500 270 (description ) 278 SB
1522 1500 62 (of ) 70 SB
1592 1500 85 (the ) 93 SB
1685 1500 175 (circuit. ) 183 SB
1868 1500 15 ( ) 23 SB
1891 1500 154 (Either ) 162 SB
2053 1500 47 (of) 47 SB
375 1600 134 (these ) 138 SB
513 1600 142 (could ) 147 SB
660 1600 113 (then ) 118 SB
778 1600 70 (be ) 75 SB
853 1600 173 (bound, ) 178 SB
1031 1600 191 (through ) 196 SB
1227 1600 85 (the ) 90 SB
1317 1600 335 (configuration, ) 340 SB
1657 1600 60 (to ) 65 SB
1722 1600 85 (the ) 90 SB
1812 1600 144 (entity ) 149 SB
1961 1600 139 (which) 139 SB
375 1700 357 (defines the I/O.) 357 SB
450 1800 138 (Also, ) 158 SB
608 1800 83 (we ) 104 SB
712 1800 142 (could ) 163 SB
875 1800 123 (have ) 144 SB
1019 1800 210 (different ) 231 SB
1250 1800 195 (entities, ) 216 SB
1466 1800 98 (one ) 119 SB
1585 1800 116 (with ) 137 SB
1722 1800 137 (setup ) 158 SB
1880 1800 98 (and ) 119 SB
1999 1800 101 (hold) 101 SB
375 1900 221 (checking ) 227 SB
602 1900 98 (and ) 104 SB
706 1900 98 (one ) 104 SB
810 1900 204 (without. ) 210 SB
1020 1900 15 ( ) 21 SB
1041 1900 129 (Thus ) 135 SB
1176 1900 124 (once ) 131 SB
1307 1900 83 (we ) 90 SB
1397 1900 140 (knew ) 147 SB
1544 1900 101 (that ) 108 SB
1652 1900 85 (the ) 92 SB
1744 1900 215 (interface ) 222 SB
1966 1900 134 (meets) 134 SB
375 2000 137 (setup ) 143 SB
518 2000 98 (and ) 104 SB
622 2000 116 (hold ) 122 SB
744 2000 153 (times, ) 160 SB
904 2000 83 (we ) 90 SB
994 2000 142 (could ) 149 SB
1143 2000 138 (forgo ) 145 SB
1288 2000 85 (the ) 92 SB
1380 2000 115 (time ) 122 SB
1502 2000 173 (checks ) 180 SB
1682 2000 81 (for ) 88 SB
1770 2000 69 (an ) 76 SB
1846 2000 204 (increase ) 211 SB
2057 2000 43 (in) 43 SB
375 2100 1713 (simulation speed.  The following is the configuration for the above RS-FF.) 1713 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2267 840 (CONFIGURATION con OF rsff IS) 840 SB
540 2317 270 (FOR behav) 270 SB
600 2367 510 (FOR u1, u2 : nand) 510 SB
750 2417 930 (USE ENTITY work.nand\(behavior\);) 930 SB
600 2467 210 (END FOR) 210 SB
540 2517 210 (END FOR) 210 SB
465 2567 240 (END con;) 240 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
769 2700 861 (Listing 4. RS Flip Flop Configuration) 861 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 6 6
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (6) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 1363 (This configuration binds the nand component to the RS FF ) 1364 SB
1814 300 286 (architecture.) 286 SB
375 400 52 (If ) 56 SB
431 400 130 (there ) 134 SB
565 400 128 (were ) 132 SB
697 400 202 (multiple ) 207 SB
904 400 257 (definitions ) 262 SB
1166 400 81 (for ) 86 SB
1252 400 141 (nand, ) 146 SB
1398 400 85 (the ) 90 SB
1488 400 217 (compiler ) 222 SB
1710 400 158 (would ) 163 SB
1873 400 70 (be ) 75 SB
1948 400 152 (unable) 152 SB
375 500 893 (to know which one to use without this.) 893 SB
450 600 104 (The ) 105 SB
555 600 124 (USE ) 125 SB
680 600 159 (clause ) 160 SB
840 600 180 (defines ) 181 SB
1021 600 154 (which ) 155 SB
1176 600 454 (ARCHITECTURE ) 456 SB
1632 600 102 (will ) 104 SB
1736 600 70 (be ) 72 SB
1808 600 158 (bound ) 160 SB
1968 600 60 (to ) 62 SB
2030 600 70 (the) 70 SB
375 700 671 (configuration.  The syntax is:) 671 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
450 817 960 (USE ENTITY library.design_entity) 960 SB
1410 817 30 (;) 30 SB
450 917 1350 (USE ARCHITECTURE library.design_architecture;) 1350 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 1000 104 (The ) 113 SB
488 1000 124 (USE ) 133 SB
621 1000 235 (statement ) 244 SB
865 1000 165 (allows ) 174 SB
1039 1000 66 (us ) 75 SB
1114 1000 60 (to ) 69 SB
1183 1000 101 (mix ) 110 SB
1293 1000 98 (and ) 108 SB
1401 1000 154 (match ) 164 SB
1565 1000 164 (design ) 174 SB
1739 1000 140 (units. ) 150 SB
1889 1000 15 ( ) 25 SB
1914 1000 96 (We ) 106 SB
2020 1000 80 (can) 80 SB
375 1100 1439 (substitute behavioral and gate level models by changing a line.) 1439 SB
300 1300 785 (1.4 Packages and Package Bodies) 785 SB
0 0 0 fC
/fm 256 def
784 2 300 1359 B
1 F
n
450 1400 231 (Packages ) 240 SB
690 1400 142 (allow ) 151 SB
841 1400 265 (convenient ) 274 SB
1115 1400 134 (ways ) 143 SB
1258 1400 62 (of ) 71 SB
1329 1400 202 (defining ) 212 SB
1541 1400 226 (functions ) 236 SB
1777 1400 98 (and ) 108 SB
1885 1400 215 (constants) 215 SB
375 1500 154 (which ) 163 SB
538 1500 102 (will ) 111 SB
649 1500 70 (be ) 79 SB
728 1500 121 (used ) 130 SB
858 1500 58 (in ) 67 SB
925 1500 202 (multiple ) 212 SB
1137 1500 174 (VHDL ) 184 SB
1321 1500 246 (programs. ) 256 SB
1577 1500 15 ( ) 25 SB
1602 1500 231 (Packages ) 241 SB
1843 1500 83 (act ) 93 SB
1936 1500 100 (like ) 110 SB
2046 1500 54 (an) 54 SB
375 1600 238 (ENTITY, ) 249 SB
624 1600 113 (they ) 124 SB
748 1600 182 (declare ) 193 SB
941 1600 85 (the ) 96 SB
1037 1600 238 (interfaces ) 250 SB
1287 1600 60 (to ) 72 SB
1359 1600 85 (the ) 97 SB
1456 1600 226 (functions ) 238 SB
1694 1600 98 (and ) 110 SB
1804 1600 296 (subprograms) 296 SB
375 1700 147 (found ) 149 SB
524 1700 58 (in ) 60 SB
584 1700 85 (the ) 87 SB
671 1700 205 (package ) 207 SB
878 1700 145 (body. ) 147 SB
1025 1700 15 ( ) 17 SB
1042 1700 231 (Packages ) 233 SB
1275 1700 120 (can't ) 123 SB
1398 1700 183 (contain ) 186 SB
1584 1700 85 (the ) 88 SB
1672 1700 152 (actual ) 155 SB
1827 1700 273 (subprogram) 273 SB
375 1800 858 (or function, they must be included in ) 859 SB
1234 1800 85 (the ) 86 SB
1320 1800 205 (package ) 206 SB
1526 1800 145 (body. ) 146 SB
1672 1800 15 ( ) 16 SB
1688 1800 231 (Packages ) 232 SB
1920 1800 86 (are ) 87 SB
2007 1800 93 (also) 93 SB
375 1900 121 (used ) 131 SB
506 1900 60 (to ) 70 SB
576 1900 113 (hide ) 123 SB
699 1900 41 (a ) 51 SB
750 1900 187 (designs ) 197 SB
947 1900 285 (complexity. ) 295 SB
1242 1900 15 ( ) 25 SB
1267 1900 94 (For ) 105 SB
1372 1900 223 (example, ) 234 SB
1606 1900 57 (at ) 68 SB
1674 1900 213 (Sanders, ) 224 SB
1898 1900 83 (we ) 94 SB
1992 1900 108 (have) 108 SB
375 2000 186 (defined ) 191 SB
566 2000 41 (a ) 46 SB
612 2000 148 (parity ) 154 SB
766 2000 203 (function ) 209 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
975 2001 176 (parity\(\)) 176 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1151 2000 15 ( ) 21 SB
1172 2000 154 (which ) 160 SB
1332 2000 102 (will ) 108 SB
1440 2000 151 (return ) 157 SB
1597 2000 85 (the ) 91 SB
1688 2000 102 (odd ) 108 SB
1796 2000 148 (parity ) 154 SB
1950 2000 62 (of ) 68 SB
2018 2000 82 (any) 82 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
375 2101 425 (std_logic_vector\(\)) 425 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
800 2100 15 ( ) 28 SB
828 2100 171 (passed ) 184 SB
1012 2100 103 (into ) 116 SB
1128 2100 61 (it. ) 74 SB
1202 2100 116 (This ) 129 SB
1331 2100 53 (is ) 66 SB
1397 2100 41 (a ) 54 SB
1451 2100 211 (standard ) 224 SB
1675 2100 205 (package ) 219 SB
1894 2100 154 (which ) 168 SB
2062 2100 38 (is) 38 SB
375 2200 221 (available ) 223 SB
598 2200 60 (to ) 62 SB
660 2200 71 (all ) 73 SB
733 2200 62 (of ) 64 SB
797 2200 91 (our ) 93 SB
890 2200 232 (designers ) 234 SB
1124 2200 98 (and ) 100 SB
1224 2200 95 (can ) 97 SB
1321 2200 70 (be ) 72 SB
1393 2200 121 (used ) 123 SB
1516 2200 72 (by ) 75 SB
1591 2200 227 (including ) 230 SB
1821 2200 46 (it ) 49 SB
1870 2200 58 (in ) 61 SB
1931 2200 41 (a ) 44 SB
1975 2200 125 (given) 125 SB
375 2300 324 (piece of code.) 324 SB
450 2400 56 (A ) 67 SB
517 2400 205 (package ) 217 SB
734 2400 130 (body ) 142 SB
876 2400 98 (just ) 110 SB
986 2400 206 (contains ) 218 SB
1204 2400 85 (the ) 97 SB
1301 2400 303 (functionality ) 315 SB
1616 2400 62 (of ) 74 SB
1690 2400 41 (a ) 53 SB
1743 2400 140 (given ) 152 SB
1895 2400 205 (package,) 205 SB
375 2500 1686 (much like the architecture associated with a given entity.  The difference ) 1687 SB
2062 2500 38 (is) 38 SB
375 2600 101 (that ) 115 SB
490 2600 115 (only ) 129 SB
619 2600 98 (one ) 112 SB
731 2600 205 (package ) 219 SB
950 2600 130 (body ) 144 SB
1094 2600 95 (can ) 109 SB
1203 2600 70 (be ) 84 SB
1287 2600 254 (associated ) 268 SB
1555 2600 116 (with ) 130 SB
1685 2600 41 (a ) 55 SB
1740 2600 140 (given ) 155 SB
1895 2600 205 (package.) 205 SB
375 2700 1304 (Below is the package which contains the parity function:) 1304 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 7 7
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (7) 21 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 267 840 (USE ieee.std_logic_1164.ALL;) 840 SB
465 317 540 (PACKAGE sanders IS) 540 SB
540 367 270 (FUNCTION ) 300 SB
840 367 270 (parity\(s ) 300 SB
1140 367 60 (: ) 90 SB
1230 367 90 (IN ) 120 SB
1350 367 540 (std_logic_vector\) ) 570 SB
1920 367 180 (RETURN) 180 SB
540 417 300 (std_logic;) 300 SB
465 467 360 (END sanders;) 360 SB
465 517 690 (PACKAGE BODY sanders IS) 690 SB
540 567 270 (FUNCTION ) 300 SB
840 567 270 (parity\(s ) 300 SB
1140 567 60 (: ) 90 SB
1230 567 90 (IN ) 120 SB
1350 567 540 (std_logic_vector\) ) 570 SB
1920 567 180 (RETURN) 180 SB
540 617 360 (std_logic IS) 360 SB
600 667 1020 (VARIABLE inter : std_logic := '0';) 1020 SB
540 717 150 (BEGIN) 150 SB
600 767 630 (FOR i IN s'RANGE LOOP) 630 SB
750 817 720 (inter := inter XOR s\(i\);) 720 SB
600 867 270 (END LOOP;) 270 SB
600 917 600 (RETURN \(NOT\(inter\)\);) 600 SB
540 967 330 (END parity;) 330 SB
465 1017 330 (END sanders) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
900 1075 577 (Listing 5. Parity Package) 577 SB
375 1225 1498 (Functions are described in more detail in the function subsection.) 1498 SB
300 1400 417 (1.4.1 Overloading) 417 SB
0 0 0 fC
/fm 256 def
416 2 300 1459 B
1 F
n
450 1500 174 (VHDL ) 179 SB
629 1500 165 (allows ) 170 SB
799 1500 85 (the ) 90 SB
889 1500 92 (use ) 97 SB
986 1500 62 (of ) 68 SB
1054 1500 271 (overloaded ) 277 SB
1331 1500 241 (functions. ) 247 SB
1578 1500 15 ( ) 21 SB
1599 1500 284 (Overloaded ) 290 SB
1889 1500 211 (functions) 211 SB
375 1600 86 (are ) 87 SB
462 1600 102 (two ) 103 SB
565 1600 63 (or ) 65 SB
630 1600 132 (more ) 134 SB
764 1600 226 (functions ) 228 SB
992 1600 116 (with ) 118 SB
1110 1600 85 (the ) 87 SB
1197 1600 133 (same ) 135 SB
1332 1600 138 (name ) 140 SB
1472 1600 154 (which ) 156 SB
1628 1600 123 (have ) 125 SB
1753 1600 210 (different ) 212 SB
1965 1600 135 (signal) 135 SB
375 1700 122 (lists, ) 130 SB
505 1700 154 (which ) 162 SB
667 1700 112 (may ) 120 SB
787 1700 151 (return ) 159 SB
946 1700 210 (different ) 218 SB
1164 1700 176 (values. ) 184 SB
1348 1700 116 (This ) 124 SB
1472 1700 165 (allows ) 173 SB
1645 1700 85 (the ) 93 SB
1738 1700 200 (creation ) 208 SB
1946 1700 62 (of ) 71 SB
2017 1700 83 (one) 83 SB
375 1800 203 (function ) 211 SB
586 1800 129 (type, ) 137 SB
723 1800 86 (i.e. ) 94 SB
817 1800 163 (parity, ) 171 SB
988 1800 88 (but ) 97 SB
1085 1800 92 (use ) 101 SB
1186 1800 210 (different ) 219 SB
1405 1800 283 (parameters. ) 292 SB
1697 1800 94 (For ) 103 SB
1800 1800 223 (example, ) 232 SB
2032 1800 68 (we) 68 SB
375 1900 142 (could ) 144 SB
519 1900 182 (declare ) 184 SB
703 1900 102 (two ) 104 SB
807 1900 148 (parity ) 150 SB
957 1900 241 (functions, ) 244 SB
1201 1900 98 (one ) 101 SB
1302 1900 81 (for ) 84 SB
1386 1900 225 (std_logic ) 228 SB
1614 1900 137 (types ) 140 SB
1754 1900 98 (and ) 101 SB
1855 1900 98 (one ) 101 SB
1956 1900 81 (for ) 84 SB
2040 1900 60 (bit) 60 SB
375 2000 137 (types:) 137 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2167 270 (FUNCTION ) 315 SB
780 2167 270 (parity\(s ) 315 SB
1095 2167 60 (: ) 105 SB
1200 2167 90 (IN ) 135 SB
1335 2167 540 (std_logic_vector\) ) 585 SB
1920 2167 180 (RETURN) 180 SB
540 2217 300 (std_logic;) 300 SB
465 2267 1380 (FUNCTION parity\(s : IN bit_vector\) RETURN bit;) 1380 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
900 2400 518 (Listing 6. Overloading) 518 SB
450 2575 104 (The ) 113 SB
563 2575 153 (above ) 162 SB
725 2575 102 (two ) 111 SB
836 2575 226 (functions ) 236 SB
1072 2575 142 (could ) 152 SB
1224 2575 113 (then ) 123 SB
1347 2575 70 (be ) 80 SB
1427 2575 152 (called ) 162 SB
1589 2575 57 (at ) 67 SB
1656 2575 97 (any ) 107 SB
1763 2575 132 (point ) 142 SB
1905 2575 159 (within ) 169 SB
2074 2575 26 (a) 26 SB
375 2675 223 (program. ) 243 SB
618 2675 104 (The ) 125 SB
743 2675 217 (compiler ) 238 SB
981 2675 158 (would ) 179 SB
1160 2675 114 (pick ) 135 SB
1295 2675 85 (the ) 106 SB
1401 2675 203 (function ) 224 SB
1625 2675 154 (which ) 175 SB
1800 2675 209 (matched ) 230 SB
2030 2675 70 (the) 70 SB
375 2775 268 (parameters ) 273 SB
648 2775 171 (passed ) 176 SB
824 2775 73 (in. ) 79 SB
903 2775 15 ( ) 21 SB
924 2775 105 (\(i.e. ) 111 SB
1035 2775 48 (if ) 54 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1089 2776 412 (parity\(bit_vector\)) 412 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1501 2775 15 ( ) 21 SB
1522 2775 106 (was ) 112 SB
1634 2775 167 (called, ) 173 SB
1807 2775 85 (the ) 91 SB
1898 2775 202 (compiler) 202 SB
375 2875 158 (would ) 174 SB
549 2875 143 (know ) 159 SB
708 2875 60 (to ) 76 SB
784 2875 92 (use ) 108 SB
892 2875 85 (the ) 101 SB
993 2875 176 (second ) 192 SB
1185 2875 203 (function ) 219 SB
1404 2875 98 (and ) 114 SB
1518 2875 88 (not ) 104 SB
1622 2875 85 (the ) 101 SB
1723 2875 140 (first.\) ) 156 SB
1879 2875 104 (The ) 121 SB
2000 2875 100 (only) 100 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 8 8
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (8) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 255 (stipulation ) 262 SB
637 300 53 (is ) 60 SB
697 300 101 (that ) 108 SB
805 300 85 (the ) 92 SB
897 300 226 (functions ) 234 SB
1131 300 125 (must ) 133 SB
1264 300 123 (have ) 131 SB
1395 300 169 (unique ) 177 SB
1572 300 283 (parameters. ) 291 SB
1863 300 237 (Otherwise) 237 SB
375 400 85 (the ) 94 SB
469 400 217 (compiler ) 226 SB
695 400 102 (will ) 111 SB
806 400 88 (not ) 98 SB
904 400 143 (know ) 153 SB
1057 400 154 (which ) 164 SB
1221 400 203 (function ) 213 SB
1434 400 60 (to ) 70 SB
1504 400 92 (use ) 102 SB
1606 400 98 (and ) 108 SB
1714 400 102 (will ) 112 SB
1826 400 210 (generate ) 220 SB
2046 400 54 (an) 54 SB
375 500 127 (error.) 127 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 9 9
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1189 3069 21 (9) 21 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 754 (CHAPTER 2: VHDL OBJECTS) 754 SB
0 0 0 fC
/fm 256 def
753 2 300 359 B
1 F
n
300 500 440 (2.0 VHDL Objects) 440 SB
/fm 256 def
439 2 300 559 B
1 F
n
450 600 193 (Objects ) 199 SB
649 600 58 (in ) 64 SB
713 600 174 (VHDL ) 180 SB
893 600 86 (are ) 92 SB
985 600 137 (place ) 143 SB
1128 600 184 (holders ) 190 SB
1318 600 154 (which ) 160 SB
1478 600 183 (contain ) 190 SB
1668 600 176 (values. ) 183 SB
1851 600 15 ( ) 22 SB
1873 600 149 (There ) 156 SB
2029 600 71 (are) 71 SB
375 700 1442 (three type of VHDL objects; Signals, Variable, and Constants.) 1442 SB
300 900 255 (2.1 Signals) 255 SB
/fm 256 def
254 2 300 959 B
1 F
n
450 1000 956 (Signals are objects to which assignments ) 957 SB
1407 1000 86 (are ) 87 SB
1494 1000 139 (made ) 140 SB
1634 1000 58 (in ) 59 SB
1693 1000 85 (the ) 86 SB
1779 1000 165 (future, ) 166 SB
1945 1000 101 (that ) 102 SB
2047 1000 53 (is,) 53 SB
375 1100 150 (signal ) 164 SB
539 1100 294 (assignments ) 308 SB
847 1100 86 (are ) 100 SB
947 1100 88 (not ) 102 SB
1049 1100 342 (instantaneous. ) 356 SB
1405 1100 182 (Signals ) 196 SB
1601 1100 86 (are ) 100 SB
1701 1100 85 (the ) 99 SB
1800 1100 115 (only ) 129 SB
1929 1100 111 (way ) 126 SB
2055 1100 45 (to) 45 SB
375 1200 1305 (transfer information between processes and design units.) 1305 SB
300 1400 476 (2.2 Signal Operators) 476 SB
/fm 256 def
475 2 300 1459 B
1 F
n
450 1500 104 (The ) 108 SB
558 1500 234 (following ) 239 SB
797 1500 86 (are ) 91 SB
888 1500 279 (pre-defined ) 284 SB
1172 1500 229 (attributes ) 234 SB
1406 1500 154 (which ) 159 SB
1565 1500 95 (can ) 100 SB
1665 1500 70 (be ) 75 SB
1740 1500 208 (attached ) 213 SB
1953 1500 60 (to ) 65 SB
2018 1500 82 (any) 82 SB
375 1600 165 (signal. ) 168 SB
543 1600 15 ( ) 18 SB
561 1600 244 (Attributes ) 247 SB
808 1600 86 (are ) 89 SB
897 1600 116 (very ) 119 SB
1016 1600 153 (useful ) 156 SB
1172 1600 81 (for ) 84 SB
1256 1600 41 (a ) 44 SB
1300 1600 173 (variety ) 176 SB
1476 1600 62 (of ) 65 SB
1541 1600 147 (tasks. ) 150 SB
1691 1600 15 ( ) 18 SB
1709 1600 94 (For ) 97 SB
1806 1600 223 (example, ) 226 SB
2032 1600 68 (we) 68 SB
375 1700 515 (need to use 'STABLE ) 516 SB
891 1700 98 (and ) 99 SB
990 1700 295 ('DELAYED ) 296 SB
1286 1700 81 (for ) 82 SB
1368 1700 91 (our ) 92 SB
1460 1700 137 (setup ) 138 SB
1598 1700 98 (and ) 99 SB
1697 1700 116 (hold ) 117 SB
1814 1700 188 (checks. ) 189 SB
2003 1700 15 ( ) 16 SB
2019 1700 81 (We) 81 SB
375 1800 1665 (also use them for parity checking and many other functions are possible.) 1665 SB
300 2000 653 (2.2.1 Signal Type Attributes) 653 SB
/fm 256 def
652 2 300 2059 B
1 F
n
450 2100 159 (Signal ) 161 SB
611 2100 114 (type ) 116 SB
727 2100 229 (attributes ) 231 SB
958 2100 151 (return ) 153 SB
1111 2100 281 (information ) 283 SB
1394 2100 143 (about ) 146 SB
1540 2100 85 (the ) 88 SB
1628 2100 150 (signal ) 153 SB
1781 2100 114 (type ) 117 SB
1898 2100 60 (to ) 63 SB
1961 2100 139 (which) 139 SB
375 2200 85 (the ) 91 SB
466 2200 206 (attribute ) 212 SB
678 2200 53 (is ) 59 SB
737 2200 223 (attached. ) 229 SB
966 2200 15 ( ) 21 SB
987 2200 153 (These ) 159 SB
1146 2200 226 (functions ) 233 SB
1379 2200 86 (are ) 93 SB
1472 2200 153 (useful ) 160 SB
1632 2200 81 (for ) 88 SB
1720 2200 276 (exchanging ) 283 SB
2003 2200 97 (data) 97 SB
375 2300 208 (between ) 212 SB
587 2300 210 (different ) 214 SB
801 2300 152 (types. ) 156 SB
957 2300 15 ( ) 19 SB
976 2300 94 (For ) 98 SB
1074 2300 85 (the ) 89 SB
1163 2300 234 (following ) 238 SB
1401 2300 223 (example, ) 227 SB
1628 2300 83 (we ) 87 SB
1715 2300 102 (will ) 107 SB
1822 2300 92 (use ) 97 SB
1919 2300 41 (a ) 46 SB
1965 2300 135 (signal) 135 SB
375 2400 950 (of type BIT, which is defined as {'0', '1'}.) 950 SB
375 2600 279 (signal'LEFT) 279 SB
/fm 256 def
278 2 375 2659 B
1 F
n
450 2700 528 (Left bound of the type.) 528 SB
450 2800 490 (The left bound is the ) 491 SB
941 2800 201 (leftmost ) 202 SB
1143 2800 138 (value ) 139 SB
1282 2800 58 (in ) 59 SB
1341 2800 85 (the ) 86 SB
1427 2800 114 (type ) 115 SB
1542 2800 285 (declaration. ) 286 SB
1828 2800 94 (For ) 95 SB
1923 2800 41 (a ) 42 SB
1965 2800 135 (signal) 135 SB
375 2900 495 (of type BIT this is '0'.) 495 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 10 10
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (10) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 320 (signal'RIGHT) 320 SB
0 0 0 fC
/fm 256 def
319 2 375 359 B
1 F
n
450 400 560 (Right bound of the type.) 560 SB
450 500 104 (The ) 112 SB
562 500 121 (right ) 129 SB
691 500 158 (bound ) 166 SB
857 500 53 (is ) 61 SB
918 500 85 (the ) 93 SB
1011 500 232 (rightmost ) 240 SB
1251 500 138 (value ) 146 SB
1397 500 58 (in ) 66 SB
1463 500 85 (the ) 93 SB
1556 500 114 (type ) 122 SB
1678 500 285 (declaration. ) 293 SB
1971 500 94 (For ) 103 SB
2074 500 26 (a) 26 SB
375 600 820 (signal of type BIT this would be '1'.) 820 SB
375 800 287 (signal'HIGH) 287 SB
/fm 256 def
286 2 375 859 B
1 F
n
450 900 741 (Highest value of the signal type.) 741 SB
450 1000 104 (The ) 112 SB
562 1000 179 (highest ) 188 SB
750 1000 138 (value ) 147 SB
897 1000 53 (is ) 62 SB
959 1000 85 (the ) 94 SB
1053 1000 168 (largest ) 177 SB
1230 1000 138 (value ) 147 SB
1377 1000 62 (of ) 71 SB
1448 1000 85 (the ) 94 SB
1542 1000 282 (enumerated ) 291 SB
1833 1000 129 (type. ) 138 SB
1971 1000 94 (For ) 103 SB
2074 1000 26 (a) 26 SB
375 1100 835 (signal of type BIT, this would be '1'.) 835 SB
375 1300 275 (signal'LOW) 275 SB
/fm 256 def
274 2 375 1359 B
1 F
n
450 1400 734 (Lowest value of the signal type.) 734 SB
450 1500 104 (The ) 114 SB
564 1500 166 (lowest ) 176 SB
740 1500 138 (value ) 148 SB
888 1500 53 (is ) 63 SB
951 1500 85 (the ) 95 SB
1046 1500 166 (lowest ) 176 SB
1222 1500 138 (value ) 148 SB
1370 1500 62 (of ) 72 SB
1442 1500 85 (the ) 95 SB
1537 1500 282 (enumerated ) 292 SB
1829 1500 129 (type. ) 140 SB
1969 1500 94 (For ) 105 SB
2074 1500 26 (a) 26 SB
375 1600 835 (signal of type BIT, this would be '0'.) 835 SB
375 1800 371 (signal'LEFTOF\() 371 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
746 1801 26 (x) 26 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
772 1800 19 (\)) 19 SB
/fm 256 def
415 2 375 1859 B
1 F
n
450 1900 930 (Returns the value to the left of the input.) 930 SB
450 2000 780 (BIT'LEFTOF\('1'\) would return '0'.) 780 SB
375 2200 412 (signal'RIGHTOF\() 412 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
787 2201 26 (x) 26 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
813 2200 19 (\)) 19 SB
/fm 256 def
456 2 375 2259 B
1 F
n
450 2300 961 (Returns the value to the right of the input.) 961 SB
450 2400 821 (BIT'RIGHTOF\('0'\) would return '1'.) 821 SB
375 2600 269 (signal'POS\() 269 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
644 2601 26 (x) 26 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
670 2600 19 (\)) 19 SB
/fm 256 def
313 2 375 2659 B
1 F
n
450 2700 967 (Returns the position \(number\) of the input) 967 SB
450 2800 660 (BIT'POS\('0'\) would return 0.) 660 SB
450 2900 660 (BIT'POS\('1'\) would return 1.) 660 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Italic
%%+ font Times-Roman
%%Page: 11 11
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (11) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 280 (signal'VAL\() 280 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
655 301 26 (x) 26 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
681 300 19 (\)) 19 SB
0 0 0 fC
/fm 256 def
324 2 375 359 B
1 F
n
450 400 179 (Returns) 179 SB
629 400 1117 ( the value that corresponds to the inputs position) 1117 SB
450 500 712 (BIT'VAL\(0\) would return a '0'.) 712 SB
450 600 712 (BIT'VAL\(1\) would return a '1'.) 712 SB
375 800 290 (signal'BASE) 290 SB
/fm 256 def
289 2 375 859 B
1 F
n
450 900 709 (Returns the base type of signal) 709 SB
450 1000 52 (If ) 60 SB
510 1000 248 (bit_vector ) 256 SB
766 1000 53 (is ) 61 SB
827 1000 186 (defined ) 194 SB
1021 1000 64 (as ) 72 SB
1093 1000 41 (a ) 49 SB
1142 1000 159 (vector ) 167 SB
1309 1000 62 (of ) 70 SB
1379 1000 114 (type ) 123 SB
1502 1000 90 (bit, ) 99 SB
1601 1000 403 (bit_vector'BASE ) 412 SB
2013 1000 87 (will) 87 SB
375 1100 1613 (return bit. Note this cannot be used in conjunction with an expression.) 1613 SB
300 1300 524 (2.2.2. Array Attributes) 524 SB
/fm 256 def
523 2 300 1359 B
1 F
n
450 1400 153 (These ) 154 SB
604 1400 229 (attributes ) 230 SB
834 1400 142 (apply ) 143 SB
977 1400 60 (to ) 61 SB
1038 1400 156 (arrays ) 157 SB
1195 1400 62 (of ) 63 SB
1258 1400 41 (a ) 42 SB
1300 1400 129 (type. ) 131 SB
1431 1400 15 ( ) 17 SB
1448 1400 96 (We ) 98 SB
1546 1400 102 (will ) 104 SB
1650 1400 157 (define ) 159 SB
1809 1400 41 (a ) 43 SB
1852 1400 248 (bit_vector,) 248 SB
375 1500 890 (bv, as: bv\(5 DOWNTO 0\) = "011110") 890 SB
375 1700 394 (array'LENGTH[\() 394 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
769 1701 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
798 1700 38 (\)]) 38 SB
/fm 256 def
460 2 375 1759 B
1 F
n
450 1800 690 (Returns the number of values ) 691 SB
1141 1800 58 (in ) 59 SB
1200 1800 16 (t) 16 SB
1216 1800 69 (he ) 70 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1286 1801 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1315 1800 59 (th ) 60 SB
1375 1800 266 (dimension, ) 267 SB
1642 1800 48 (if ) 49 SB
1691 1800 43 (n ) 44 SB
1735 1800 53 (is ) 54 SB
1789 1800 88 (not ) 89 SB
1878 1800 222 (specified,) 222 SB
375 1900 346 (it defaults to 1.) 346 SB
450 2000 392 (bv'LENGTH is 6) 392 SB
375 2200 300 (array'LEFT[\() 300 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
675 2201 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
704 2200 38 (\)]) 38 SB
/fm 256 def
366 2 375 2259 B
1 F
n
450 2300 674 (Returns the left bound of the ) 674 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1124 2301 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1153 2300 310 (th dimension.) 310 SB
450 2400 331 (bv'LEFT is '0'.) 331 SB
375 2500 341 (array'RIGHT[\() 341 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
716 2501 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
745 2500 38 (\)]) 38 SB
/fm 256 def
407 2 375 2559 B
1 F
n
450 2600 705 (Returns the right bound of the ) 705 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1155 2601 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1184 2600 310 (th dimension.) 310 SB
450 2700 372 (bv'RIGHT is '0'.) 372 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Italic
%%+ font Times-Roman
%%Page: 12 12
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (12) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 364 (array'RANGE[\() 364 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
739 301 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
768 300 38 (\)]) 38 SB
0 0 0 fC
/fm 256 def
430 2 375 359 B
1 F
n
450 400 279 (Returns the ) 279 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
729 401 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
758 400 647 (th dimension range of array.) 647 SB
450 500 694 (bv'RANGE is 5 DOWNTO 0.) 694 SB
375 700 650 (array'REVERSE_RANGE[\() 650 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1025 701 29 (n) 29 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1054 700 38 (\)]) 38 SB
/fm 256 def
716 2 375 759 B
1 F
n
450 800 617 (Returns the range reversed) 617 SB
450 900 743 (br'REVERSE_RANGE is 0 to 5) 743 SB
300 1100 985 (2.2.3 Signal Attributes that Return a Value) 985 SB
/fm 256 def
984 2 300 1159 B
1 F
n
450 1200 104 (The ) 110 SB
560 1200 234 (following ) 240 SB
800 1200 229 (attributes ) 235 SB
1035 1200 151 (return ) 157 SB
1192 1200 161 (values ) 167 SB
1359 1200 148 (based ) 154 SB
1513 1200 129 (upon ) 135 SB
1648 1200 85 (the ) 91 SB
1739 1200 150 (signal ) 156 SB
1895 1200 60 (to ) 66 SB
1961 1200 139 (which) 139 SB
375 1300 407 (they are attached.) 407 SB
375 1500 333 (signal'EVENT) 333 SB
/fm 256 def
332 2 375 1559 B
1 F
n
450 1600 194 (Returns ) 208 SB
658 1600 166 (TRUE ) 181 SB
839 1600 139 (when ) 154 SB
993 1600 69 (an ) 84 SB
1077 1600 139 (event ) 154 SB
1231 1600 166 (occurs ) 181 SB
1412 1600 72 (on ) 87 SB
1499 1600 85 (the ) 100 SB
1599 1600 165 (signal. ) 180 SB
1779 1600 15 ( ) 30 SB
1809 1600 84 (An ) 99 SB
1908 1600 139 (event ) 154 SB
2062 1600 38 (is) 38 SB
375 1700 1322 (defined as whenever a signal has its value changed, even ) 1323 SB
1698 1700 48 (if ) 49 SB
1747 1700 85 (the ) 86 SB
1833 1700 142 (result ) 143 SB
1976 1700 53 (is ) 54 SB
2030 1700 70 (the) 70 SB
375 1800 590 (same, i.e. from a '1' -> '1'.) 590 SB
375 2000 504 (signal'LAST_EVENT) 504 SB
/fm 256 def
503 2 375 2059 B
1 F
n
450 2100 1067 (Returns time elapsed since last event occurred) 1067 SB
375 2300 509 (signal'LAST_VALUE) 509 SB
/fm 256 def
508 2 375 2359 B
1 F
n
450 2400 1402 (Returns previous value on signal, before the previous change) 1402 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Italic
%%+ font Times-Roman
%%Page: 13 13
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (13) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 992 (2.2.4 Signal Attributes that Return a Signal) 992 SB
0 0 0 fC
/fm 256 def
991 2 300 359 B
1 F
n
450 400 104 (The ) 106 SB
556 400 234 (following ) 236 SB
792 400 229 (attributes ) 231 SB
1023 400 151 (return ) 154 SB
1177 400 41 (a ) 44 SB
1221 400 150 (signal ) 153 SB
1374 400 148 (based ) 151 SB
1525 400 129 (upon ) 132 SB
1657 400 85 (the ) 88 SB
1745 400 150 (signal ) 153 SB
1898 400 60 (to ) 63 SB
1961 400 139 (which) 139 SB
375 500 46 (it ) 47 SB
422 500 53 (is ) 54 SB
476 500 223 (attached. ) 225 SB
701 500 15 ( ) 17 SB
718 500 153 (These ) 155 SB
873 500 229 (attributes ) 231 SB
1104 500 86 (are ) 88 SB
1192 500 132 (more ) 134 SB
1326 500 244 (expensive ) 246 SB
1572 500 60 (to ) 62 SB
1634 500 107 (use, ) 109 SB
1743 500 64 (as ) 66 SB
1809 500 41 (a ) 43 SB
1852 500 111 (new ) 113 SB
1965 500 135 (signal) 135 SB
375 600 53 (is ) 63 SB
438 600 183 (created ) 193 SB
631 600 129 (upon ) 139 SB
770 600 121 (each ) 131 SB
901 600 92 (use ) 103 SB
1004 600 62 (of ) 73 SB
1077 600 69 (an ) 80 SB
1157 600 221 (attribute. ) 232 SB
1389 600 15 ( ) 26 SB
1415 600 56 (A ) 67 SB
1482 600 150 (signal ) 161 SB
1643 600 53 (is ) 64 SB
1707 600 265 (considered ) 276 SB
1983 600 117 (more) 117 SB
375 700 244 (expensive ) 261 SB
636 700 60 (to ) 77 SB
713 700 92 (use ) 109 SB
822 700 64 (as ) 81 SB
903 700 46 (it ) 63 SB
966 700 53 (is ) 70 SB
1036 700 200 (globally ) 217 SB
1253 700 250 (accessible ) 267 SB
1520 700 98 (and ) 115 SB
1635 700 125 (must ) 142 SB
1777 700 70 (be ) 88 SB
1865 700 235 (constantly) 235 SB
375 800 900 (monitored as it may be used anywhere.) 900 SB
375 1000 453 (signal'DELAYED[\() 453 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
828 1001 100 (time) 100 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
928 1000 38 (\)]) 38 SB
/fm 256 def
590 2 375 1059 B
1 F
n
450 1100 758 (Creates a new signal delayed by ) 758 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1208 1101 100 (time) 100 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1308 1100 564 ( from the original signal.) 564 SB
375 1300 397 (signal'STABLE[\() 397 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
772 1301 100 (time) 100 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
872 1300 38 (\)]) 38 SB
/fm 256 def
534 2 375 1359 B
1 F
n
450 1400 190 (Creates ) 200 SB
650 1400 41 (a ) 52 SB
702 1400 197 (boolean ) 208 SB
910 1400 150 (signal ) 161 SB
1071 1400 101 (that ) 112 SB
1183 1400 53 (is ) 64 SB
1247 1400 166 (TRUE ) 177 SB
1424 1400 139 (when ) 150 SB
1574 1400 150 (signal ) 161 SB
1735 1400 92 (has ) 103 SB
1838 1400 88 (not ) 99 SB
1937 1400 98 (had ) 109 SB
2046 1400 54 (an) 54 SB
375 1500 220 (event for ) 220 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
595 1501 115 (time.) 115 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 1700 355 (signal'QUIET[\() 355 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
730 1701 100 (time) 100 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
830 1700 38 (\)]) 38 SB
/fm 256 def
492 2 375 1759 B
1 F
n
450 1800 190 (Creates ) 207 SB
657 1800 41 (a ) 58 SB
715 1800 206 (Boolean ) 223 SB
938 1800 150 (signal ) 167 SB
1105 1800 101 (that ) 119 SB
1224 1800 53 (is ) 71 SB
1295 1800 104 (true ) 122 SB
1417 1800 139 (when ) 157 SB
1574 1800 150 (signal ) 168 SB
1742 1800 92 (has ) 110 SB
1852 1800 88 (not ) 106 SB
1958 1800 98 (had ) 116 SB
2074 1800 26 (a) 26 SB
375 1900 267 (transaction ) 286 SB
661 1900 81 (for ) 100 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
761 1901 130 (time. ) 149 SB
910 1901 15 ( ) 34 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
944 1900 56 (A ) 75 SB
1019 1900 267 (transaction ) 286 SB
1305 1900 163 (differs ) 182 SB
1487 1900 124 (from ) 143 SB
1630 1900 69 (an ) 88 SB
1718 1900 139 (event ) 158 SB
1876 1900 58 (in ) 77 SB
1953 1900 101 (that ) 121 SB
2074 1900 26 (a) 26 SB
375 2000 1071 (transaction is whenever a signal changes state.) 1071 SB
375 2200 551 (signal'TRANSACTION) 551 SB
/fm 256 def
550 2 375 2259 B
1 F
n
450 2300 190 (Creates ) 194 SB
644 2300 41 (a ) 45 SB
689 2300 150 (signal ) 154 SB
843 2300 62 (of ) 66 SB
909 2300 114 (type ) 118 SB
1027 2300 75 (bit ) 79 SB
1106 2300 101 (that ) 105 SB
1211 2300 180 (toggles ) 184 SB
1395 2300 138 (value ) 143 SB
1538 2300 81 (for ) 86 SB
1624 2300 142 (every ) 147 SB
1771 2300 267 (transaction ) 272 SB
2043 2300 57 (on) 57 SB
375 2400 150 (signal.) 150 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Italic
%%+ font Times-Roman
%%Page: 14 14
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (14) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 419 (2.3 Signal Drivers) 419 SB
0 0 0 fC
/fm 256 def
418 2 300 359 B
1 F
n
450 400 187 (Drivers ) 193 SB
643 400 86 (are ) 92 SB
735 400 183 (created ) 190 SB
925 400 238 (whenever ) 245 SB
1170 400 97 (any ) 104 SB
1274 400 62 (of ) 69 SB
1343 400 85 (the ) 92 SB
1435 400 234 (following ) 241 SB
1676 400 174 (VHDL ) 181 SB
1857 400 243 (statements) 243 SB
375 500 207 (are used:) 207 SB
450 600 487 (- Signal Assignments) 487 SB
450 700 261 (- Processes) 261 SB
450 800 291 (- Procedures) 291 SB
450 900 624 (- Component Instantiations) 624 SB
450 1000 56 (A ) 57 SB
507 1000 164 (Driver ) 165 SB
672 1000 206 (contains ) 208 SB
880 1000 16 (t) 16 SB
896 1000 69 (he ) 71 SB
967 1000 177 (current ) 179 SB
1146 1000 138 (value ) 140 SB
1286 1000 62 (of ) 64 SB
1350 1000 85 (the ) 87 SB
1437 1000 151 (driver ) 153 SB
1590 1000 64 (as ) 66 SB
1656 1000 113 (well ) 115 SB
1771 1000 64 (as ) 66 SB
1837 1000 41 (a ) 43 SB
1880 1000 84 (list ) 86 SB
1966 1000 62 (of ) 64 SB
2030 1000 70 (the) 70 SB
375 1100 245 (scheduled ) 246 SB
621 1100 150 (future ) 151 SB
772 1100 161 (values ) 162 SB
934 1100 62 (of ) 64 SB
998 1100 85 (the ) 87 SB
1085 1100 166 (driver. ) 168 SB
1253 1100 15 ( ) 17 SB
1270 1100 116 (This ) 118 SB
1388 1100 150 (future ) 152 SB
1540 1100 84 (list ) 86 SB
1626 1100 53 (is ) 55 SB
1681 1100 108 (also ) 110 SB
1791 1100 171 (known ) 173 SB
1964 1100 64 (as ) 66 SB
2030 1100 70 (the) 70 SB
375 1200 267 (transaction ) 277 SB
652 1200 167 (queue. ) 177 SB
829 1200 15 ( ) 25 SB
854 1200 52 (If ) 62 SB
916 1200 41 (a ) 51 SB
967 1200 150 (signal ) 160 SB
1127 1200 92 (has ) 102 SB
1229 1200 132 (more ) 142 SB
1371 1200 113 (than ) 123 SB
1494 1200 98 (one ) 108 SB
1602 1200 166 (driver, ) 176 SB
1778 1200 113 (then ) 124 SB
1902 1200 85 (the ) 96 SB
1998 1200 102 (final) 102 SB
375 1300 150 (signal ) 152 SB
527 1300 138 (value ) 140 SB
667 1300 102 (will ) 104 SB
771 1300 70 (be ) 72 SB
843 1300 41 (a ) 43 SB
886 1300 203 (function ) 205 SB
1091 1300 62 (of ) 64 SB
1155 1300 71 (all ) 73 SB
1228 1300 214 (effective ) 216 SB
1444 1300 151 (driver ) 153 SB
1597 1300 176 (values. ) 178 SB
1775 1300 15 ( ) 18 SB
1793 1300 116 (This ) 119 SB
1912 1300 188 (function) 188 SB
375 1400 984 (is known as  the signal resolution function.) 984 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
750 1567 300 (PROCESS\(b\)) 300 SB
900 1617 150 (BEGIN) 150 SB
900 1667 210 (a <= b;) 210 SB
750 1717 360 (END PROCESS;) 360 SB
750 1767 300 (PROCESS\(c\)) 300 SB
900 1817 150 (BEGIN) 150 SB
900 1867 210 (a <= c;) 210 SB
750 1917 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
869 2000 661 (Listing 7. Signal Contention.) 661 SB
450 2100 104 (The ) 105 SB
555 2100 153 (above ) 154 SB
709 2100 125 (code ) 126 SB
835 2100 158 (would ) 159 SB
994 2100 103 (caus) 103 SB
1097 2100 41 (e ) 42 SB
1139 2100 41 (a ) 43 SB
1182 2100 256 (contention ) 258 SB
1440 2100 15 ( ) 17 SB
1457 2100 124 (from ) 126 SB
1583 2100 85 (the ) 87 SB
1670 2100 102 (two ) 104 SB
1774 2100 190 (process ) 192 SB
1966 2100 134 (trying) 134 SB
375 2200 60 (to ) 70 SB
445 2200 132 (drive ) 142 SB
587 2200 150 (signal ) 160 SB
747 2200 56 (a. ) 66 SB
813 2200 15 ( ) 25 SB
838 2200 129 (Thus ) 139 SB
977 2200 41 (a ) 51 SB
1028 2200 125 (must ) 135 SB
1163 2200 70 (be ) 80 SB
1243 2200 186 (defined ) 196 SB
1439 2200 64 (as ) 74 SB
1513 2200 41 (a ) 52 SB
1565 2200 210 (resolved ) 221 SB
1786 2200 150 (signal ) 161 SB
1947 2200 116 (with ) 127 SB
2074 2200 26 (a) 26 SB
375 2300 243 (resolution ) 261 SB
636 2300 218 (function, ) 236 SB
872 2300 63 (or ) 82 SB
954 2300 85 (the ) 104 SB
1058 2300 217 (compiler ) 236 SB
1294 2300 102 (will ) 121 SB
1415 2300 210 (generate ) 229 SB
1644 2300 69 (an ) 88 SB
1732 2300 142 (error. ) 161 SB
1893 2300 15 ( ) 34 SB
1927 2300 116 (This ) 135 SB
2062 2300 38 (is) 38 SB
375 2400 671 (explained in the next section.) 671 SB
300 2600 734 (2.4 Signal Resolution Functions) 734 SB
/fm 256 def
733 2 300 2659 B
1 F
n
450 2700 56 (A ) 59 SB
509 2700 243 (resolution ) 246 SB
755 2700 203 (function ) 206 SB
961 2700 187 (accepts ) 190 SB
1151 2700 69 (an ) 72 SB
1223 2700 133 (array ) 136 SB
1359 2700 62 (of ) 65 SB
1424 2700 161 (values ) 164 SB
1588 2700 98 (and ) 101 SB
1689 2700 174 (returns ) 177 SB
1866 2700 41 (a ) 45 SB
1911 2700 138 (value ) 142 SB
2053 2700 47 (of) 47 SB
375 2800 85 (the ) 98 SB
473 2800 210 (resolved ) 223 SB
696 2800 129 (type. ) 142 SB
838 2800 15 ( ) 28 SB
866 2800 104 (The ) 117 SB
983 2800 243 (resolution ) 256 SB
1239 2800 203 (function ) 216 SB
1455 2800 125 (must ) 138 SB
1593 2800 112 (take ) 126 SB
1719 2800 103 (into ) 117 SB
1836 2800 194 (account ) 208 SB
2044 2800 56 (all) 56 SB
375 2900 204 (possible ) 213 SB
588 2900 131 (input ) 140 SB
728 2900 173 (signals ) 182 SB
910 2900 63 (or ) 72 SB
982 2900 69 (an ) 78 SB
1060 2900 127 (error ) 137 SB
1197 2900 102 (will ) 112 SB
1309 2900 142 (result ) 152 SB
1461 2900 139 (when ) 149 SB
1610 2900 149 (trying ) 159 SB
1769 2900 60 (to ) 70 SB
1839 2900 181 (resolve ) 191 SB
2030 2900 70 (the) 70 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 15 15
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (15) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 938 (signals.  VHDL comes with no standard ) 939 SB
1314 300 243 (resolution ) 244 SB
1558 300 241 (functions, ) 242 SB
1800 300 71 (all ) 72 SB
1872 300 228 (resolution) 228 SB
375 400 226 (functions ) 242 SB
617 400 125 (must ) 142 SB
759 400 70 (be ) 87 SB
846 400 111 (user ) 128 SB
974 400 192 (written. ) 209 SB
1183 400 15 ( ) 32 SB
1215 400 233 (Currently ) 250 SB
1465 400 130 (there ) 147 SB
1612 400 86 (are ) 103 SB
1715 400 140 (many ) 157 SB
1872 400 228 (resolution) 228 SB
375 500 226 (functions ) 236 SB
611 500 221 (available ) 231 SB
842 500 98 (and ) 108 SB
950 500 126 (most ) 136 SB
1086 500 174 (VHDL ) 185 SB
1271 500 197 (systems ) 208 SB
1479 500 139 (come ) 150 SB
1629 500 116 (with ) 127 SB
1756 500 211 (standard ) 222 SB
1978 500 15 ( ) 26 SB
2004 500 96 (user) 96 SB
375 600 177 (written ) 184 SB
559 600 243 (resolution ) 251 SB
810 600 241 (functions, ) 249 SB
1059 600 88 (but ) 96 SB
1155 600 113 (they ) 121 SB
1276 600 86 (are ) 94 SB
1370 600 88 (not ) 96 SB
1466 600 105 (part ) 113 SB
1579 600 62 (of ) 70 SB
1649 600 85 (the ) 93 SB
1742 600 139 (IEEE ) 147 SB
1889 600 211 (standard.) 211 SB
375 700 263 (Resolution ) 266 SB
641 700 226 (functions ) 229 SB
870 700 86 (are ) 90 SB
960 700 85 (the ) 89 SB
1049 700 127 (main ) 131 SB
1180 700 166 (reason ) 170 SB
1350 700 101 (that ) 105 SB
1455 700 162 (makes ) 166 SB
1621 700 174 (VHDL ) 178 SB
1799 700 301 (transportable) 301 SB
375 800 208 (amongst ) 218 SB
593 800 210 (different ) 220 SB
813 800 319 (technologies. ) 329 SB
1142 800 15 ( ) 25 SB
1167 800 50 (It ) 60 SB
1227 800 158 (would ) 168 SB
1395 800 70 (be ) 80 SB
1475 800 204 (possible ) 215 SB
1690 800 60 (to ) 71 SB
1761 800 133 (write ) 144 SB
1905 800 195 (different) 195 SB
375 900 226 (functions ) 229 SB
604 900 81 (for ) 84 SB
688 900 210 (different ) 213 SB
901 900 319 (technologies, ) 322 SB
1223 900 41 (a ) 44 SB
1267 900 180 (CMOS ) 183 SB
1450 900 218 (function, ) 222 SB
1672 900 119 (TTL ) 123 SB
1795 900 218 (function, ) 222 SB
2017 900 83 (etc.) 83 SB
375 1000 182 (Signals ) 192 SB
567 1000 116 (with ) 126 SB
693 1000 202 (multiple ) 212 SB
905 1000 174 (drivers ) 184 SB
1089 1000 86 (are ) 96 SB
1185 1000 152 (called ) 162 SB
1347 1000 233 ("resolved ) 243 SB
1590 1000 211 (signals". ) 222 SB
1812 1000 15 ( ) 26 SB
1838 1000 56 (A ) 67 SB
1905 1000 195 (resolved) 195 SB
375 1100 1301 (signal must have a resolution function associated with it.) 1301 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
300 1267 1775 (    -------------------------------------------------------------------) 1775 SB
300 1309 650 (    -- Resolution function) 650 SB
300 1351 1775 (    -------------------------------------------------------------------) 1775 SB
300 1393 1275 (    CONSTANT resolution_table : stdlogic_table := \() 1275 SB
450 1435 1625 (--      ---------------------------------------------------------) 1625 SB
450 1477 1325 (--      |  U    X    0    1    Z    W    L    H    - ) 1325 SB
1800 1477 225 (    |   |) 225 SB
450 1519 1475 (--      ---------------------------------------------------) 1475 SB
1925 1519 150 (------) 150 SB
300 1561 1725 (            \( 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U', 'U' \), -- | U |) 1725 SB
300 1603 1725 (            \( 'U', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' \), -- | X |) 1725 SB
300 1645 1725 (            \( 'U', 'X', '0', 'X', '0', '0', '0', '0', '0' \), -- | 0 |) 1725 SB
300 1687 1725 (            \( 'U', 'X', 'X', '1', '1', '1', '1', '1', '1' \), -- | 1 |) 1725 SB
300 1729 1725 (            \( 'U', 'X', '0', '1', 'Z', 'W', 'L', 'H', 'Z' \), -- | Z |) 1725 SB
300 1771 1725 (            \( 'U', 'X', '0', '1', 'W', 'W', 'W', 'W', 'W' \), -- | W |) 1725 SB
300 1813 1725 (            \( 'U', 'X', '0', '1', 'L', 'W', 'L', 'W', 'L' \), -- | L |) 1725 SB
300 1855 1725 (            \( 'U', 'X', '0', '1', 'H', 'W', 'W', 'H', 'H' \), -- | H |) 1725 SB
300 1897 1725 (            \( 'U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-' \)  -- | - |) 1725 SB
300 1939 250 (        \);) 250 SB
300 2023 1700 (    FUNCTION resolved \( s : std_ulogic_vector \) RETURN std_ulogic IS) 1700 SB
300 2065 1750 (        VARIABLE result : std_ulogic := '-';  -- weakest state default) 1750 SB
300 2107 225 (    BEGIN) 225 SB
300 2149 1325 (        IF    \(s'LENGTH = 1\) THEN    RETURN s\(s'LOW\);) 1325 SB
300 2191 300 (        ELSE) 300 SB
300 2233 1025 (            -- Iterate through all inputs) 1025 SB
300 2275 825 (            FOR i IN s'RANGE LOOP) 825 SB
300 2317 1425 (                result := resolution_table\(result, s\(i\)\);) 1425 SB
300 2359 525 (            END LOOP;) 525 SB
300 2401 1025 (            -- Return the resultant value) 1025 SB
300 2443 650 (            RETURN result;) 650 SB
300 2485 375 (        END IF;) 375 SB
300 2527 425 (    END resolved;) 425 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
758 2602 883 (Listing 8. Sample Resolution Function) 883 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 16 16
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (16) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 309 (2.5 Variables) 309 SB
0 0 0 fC
/fm 256 def
308 2 300 359 B
1 F
n
450 400 236 (Variables ) 254 SB
704 400 86 (are ) 104 SB
808 400 213 (assigned ) 231 SB
1039 400 312 (immediately. ) 330 SB
1369 400 15 ( ) 33 SB
1402 400 153 (These ) 172 SB
1574 400 86 (are ) 105 SB
1679 400 130 (good ) 149 SB
1828 400 81 (for ) 100 SB
1928 400 172 (holding) 172 SB
375 500 300 (intermediate ) 302 SB
677 500 161 (values ) 163 SB
840 500 162 (during ) 164 SB
1004 500 150 (signal ) 153 SB
1157 500 294 (assignments ) 297 SB
1454 500 63 (or ) 66 SB
1520 500 338 (computations. ) 341 SB
1861 500 15 ( ) 18 SB
1879 500 221 (Variables) 221 SB
375 600 86 (are ) 87 SB
462 600 115 (only ) 116 SB
578 600 126 (local ) 128 SB
706 600 60 (to ) 62 SB
768 600 41 (a ) 43 SB
811 600 205 (process, ) 207 SB
1018 600 86 (are ) 88 SB
1106 600 115 (only ) 117 SB
1223 600 70 (be ) 72 SB
1295 600 249 (monitored ) 251 SB
1546 600 159 (within ) 161 SB
1707 600 101 (that ) 103 SB
1810 600 205 (process, ) 207 SB
2017 600 83 (and) 83 SB
375 700 815 (only accessible within that process.) 815 SB
300 900 316 (2.6 Constants) 316 SB
/fm 256 def
315 2 300 959 B
1 F
n
450 1000 1540 (Constants are any object declared and defined during initialization.) 1540 SB
300 1200 293 (2.7 Generics) 293 SB
/fm 256 def
292 2 300 1259 B
1 F
n
450 1300 220 (Generics ) 229 SB
679 1300 86 (are ) 95 SB
774 1300 121 (used ) 130 SB
904 1300 60 (to ) 69 SB
973 1300 116 (pass ) 125 SB
1098 1300 126 (local ) 135 SB
1233 1300 207 (constant ) 216 SB
1449 1300 161 (values ) 170 SB
1619 1300 103 (into ) 113 SB
1732 1300 85 (the ) 95 SB
1827 1300 180 (entities ) 190 SB
2017 1300 83 (and) 83 SB
375 1400 318 (architecture's ) 345 SB
720 1400 62 (of ) 89 SB
809 1400 189 (VHDL. ) 216 SB
1025 1400 15 ( ) 43 SB
1068 1400 226 (Common ) 254 SB
1322 1400 115 (uses ) 143 SB
1465 1400 182 (include ) 210 SB
1675 1400 187 (passing ) 215 SB
1890 1400 58 (in ) 86 SB
1976 1400 124 (delay) 124 SB
375 1500 1066 (information, counts and values into entities or ) 1067 SB
1442 1500 333 (architecture's. ) 334 SB
1776 1500 15 ( ) 16 SB
1792 1500 220 (Generics ) 221 SB
2013 1500 15 ( ) 16 SB
2029 1500 71 (are) 71 SB
375 1600 173 (treated ) 189 SB
564 1600 64 (as ) 81 SB
645 1600 126 (local ) 143 SB
788 1600 230 (constants ) 247 SB
1035 1600 159 (within ) 176 SB
1211 1600 85 (the ) 102 SB
1313 1600 140 (given ) 157 SB
1470 1600 180 (entities ) 197 SB
1667 1600 98 (and ) 115 SB
1782 1600 318 (architecture's.) 318 SB
375 1700 301 (Architecture ) 304 SB
679 1700 206 (generics ) 209 SB
888 1700 235 (overwrite ) 238 SB
1126 1700 206 (generics ) 210 SB
1336 1700 159 (within ) 163 SB
1499 1700 85 (the ) 89 SB
1588 1700 159 (entity. ) 163 SB
1751 1700 15 ( ) 19 SB
1770 1700 116 (This ) 120 SB
1890 1700 53 (is ) 57 SB
1947 1700 153 (useful,) 153 SB
375 1800 124 (once ) 130 SB
505 1800 46 (it ) 52 SB
557 1800 165 (allows ) 171 SB
728 1800 41 (a ) 47 SB
775 1800 208 (program ) 214 SB
989 1800 154 (which ) 160 SB
1149 1800 273 (instantiates ) 279 SB
1428 1800 41 (a ) 47 SB
1475 1800 269 (component ) 275 SB
1750 1800 60 (to ) 66 SB
1816 1800 182 (declare ) 188 SB
2004 1800 96 (new) 96 SB
375 1900 162 (delays ) 170 SB
545 1900 58 (in ) 66 SB
611 1900 85 (the ) 93 SB
704 1900 111 (new ) 120 SB
824 1900 146 (upper ) 155 SB
979 1900 125 (level ) 134 SB
1113 1900 284 (component. ) 293 SB
1406 1900 15 ( ) 24 SB
1430 1900 116 (This ) 125 SB
1555 1900 95 (can ) 104 SB
1659 1900 70 (be ) 79 SB
1738 1900 153 (useful ) 162 SB
1900 1900 81 (for ) 90 SB
1990 1900 110 (back) 110 SB
375 2000 676 (annotation.  Back annotation ) 677 SB
1052 2000 53 (is ) 54 SB
1106 2000 168 (usefull ) 169 SB
1275 2000 81 (for ) 82 SB
1357 2000 167 (testing ) 168 SB
1525 2000 225 (synthesis ) 226 SB
1751 2000 180 (results. ) 181 SB
1932 2000 15 ( ) 16 SB
1948 2000 152 (Actual) 152 SB
375 2100 160 (timing ) 168 SB
543 2100 162 (delays ) 170 SB
713 2100 95 (can ) 103 SB
816 2100 70 (be ) 78 SB
894 2100 171 (passed ) 179 SB
1073 2100 103 (into ) 111 SB
1184 2100 85 (the ) 93 SB
1277 2100 174 (VHDL ) 182 SB
1459 2100 208 (program ) 217 SB
1676 2100 81 (for ) 90 SB
1766 2100 132 (more ) 141 SB
1907 2100 193 (accurate) 193 SB
375 2200 165 (results.) 165 SB
450 2300 188 (Finally, ) 197 SB
647 2300 206 (generics ) 215 SB
862 2300 159 (within ) 168 SB
1030 2300 85 (the ) 94 SB
1124 2300 320 (configuration ) 330 SB
1454 2300 206 (override ) 216 SB
1670 2300 71 (all ) 81 SB
1751 2300 133 (other ) 143 SB
1894 2300 206 (generics.) 206 SB
375 2400 1419 (This is especially useful for back annotation, as one top level ) 1420 SB
1795 2400 305 (configuration) 305 SB
375 2500 1596 (can be back annotated with delays for an entire design at a later time.) 1596 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 17 17
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (17) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 1054 (CHAPTER 3: VHDL DATA STRUCTURES) 1054 SB
0 0 0 fC
/fm 256 def
1053 2 300 359 B
1 F
n
300 500 403 (3.0 VHDL Types) 403 SB
/fm 256 def
402 2 300 559 B
1 F
n
450 600 174 (VHDL ) 179 SB
629 600 206 (contains ) 211 SB
840 600 140 (many ) 145 SB
985 600 137 (types ) 143 SB
1128 600 62 (of ) 68 SB
1196 600 112 (data ) 118 SB
1314 600 254 (structures, ) 260 SB
1574 600 124 (from ) 130 SB
1704 600 166 (simple ) 172 SB
1876 600 173 (signals ) 179 SB
2055 600 45 (to) 45 SB
375 700 251 (composite ) 258 SB
633 700 152 (types, ) 159 SB
792 700 171 (arrays, ) 179 SB
971 700 98 (and ) 106 SB
1077 700 89 (file ) 97 SB
1174 700 152 (types. ) 160 SB
1334 700 15 ( ) 23 SB
1357 700 86 (All ) 94 SB
1451 700 174 (VHDL ) 182 SB
1633 700 180 (objects ) 188 SB
1821 700 123 (have ) 131 SB
1952 700 41 (a ) 49 SB
2001 700 99 (type) 99 SB
375 800 498 (associated with them.) 498 SB
300 1000 847 (3.1 Signals, Variables and Constants) 847 SB
/fm 256 def
846 2 300 1059 B
1 F
n
450 1100 1325 (We have already looked at these VHDL types. In review:) 1325 SB
300 1300 299 (3.1.1 Signals) 299 SB
/fm 256 def
298 2 300 1359 B
1 F
n
450 1400 182 (Signals ) 193 SB
643 1400 227 (represent ) 238 SB
881 1400 205 (physical ) 216 SB
1097 1400 112 (data ) 123 SB
1220 1400 304 (connections. ) 315 SB
1535 1400 15 ( ) 26 SB
1561 1400 86 (All ) 97 SB
1658 1400 161 (values ) 172 SB
1830 1400 213 (assigned ) 225 SB
2055 1400 45 (to) 45 SB
375 1500 173 (signals ) 185 SB
560 1500 86 (are ) 98 SB
658 1500 291 ("scheduled" ) 303 SB
961 1500 81 (for ) 93 SB
1054 1500 41 (a ) 53 SB
1107 1500 115 (time ) 127 SB
1234 1500 58 (in ) 70 SB
1304 1500 85 (the ) 97 SB
1401 1500 165 (future. ) 177 SB
1578 1500 15 ( ) 28 SB
1606 1500 182 (Signals ) 195 SB
1801 1500 86 (are ) 99 SB
1900 1500 121 (used ) 134 SB
2034 1500 66 (for) 66 SB
375 1600 367 (communication ) 375 SB
750 1600 208 (between ) 217 SB
967 1600 254 (processes, ) 263 SB
1230 1600 64 (as ) 73 SB
1303 1600 97 (this ) 106 SB
1409 1600 53 (is ) 62 SB
1471 1600 85 (the ) 94 SB
1565 1600 115 (only ) 124 SB
1689 1600 111 (way ) 120 SB
1809 1600 60 (to ) 69 SB
1878 1600 116 (pass ) 125 SB
2003 1600 97 (data) 97 SB
375 1700 208 (between ) 213 SB
588 1700 210 (different ) 215 SB
803 1700 254 (processes. ) 259 SB
1062 1700 15 ( ) 21 SB
1083 1700 185 (Present ) 191 SB
1274 1700 98 (and ) 104 SB
1378 1700 150 (future ) 156 SB
1534 1700 161 (values ) 167 SB
1701 1700 86 (are ) 92 SB
1793 1700 157 (stored ) 163 SB
1956 1700 144 (within) 144 SB
375 1800 1370 (the drivers, which allows us to use attributes on the signals.) 1370 SB
300 2000 353 (3.1.2 Variables) 353 SB
/fm 256 def
352 2 300 2059 B
1 F
n
450 2100 236 (Variables ) 241 SB
691 2100 227 (represent ) 232 SB
923 2100 126 (local ) 131 SB
1054 2100 182 (storage ) 187 SB
1241 2100 188 (internal ) 193 SB
1434 2100 60 (to ) 66 SB
1500 2100 41 (a ) 47 SB
1547 2100 190 (process ) 196 SB
1743 2100 63 (or ) 69 SB
1812 2100 288 (subprogram.) 288 SB
375 2200 213 (Variable ) 216 SB
591 2200 294 (assignments ) 297 SB
888 2200 112 (take ) 116 SB
1004 2200 137 (place ) 141 SB
1145 2200 385 (instantaneously, ) 389 SB
1534 2200 156 (unlike ) 160 SB
1694 2200 173 (signals ) 177 SB
1871 2200 154 (which ) 158 SB
2029 2200 71 (are) 71 SB
375 2300 245 (scheduled.) 245 SB
300 2500 360 (3.1.3 Constants) 360 SB
/fm 256 def
359 2 300 2559 B
1 F
n
450 2600 1411 (Constants can only be assigned a value once, at initialization.) 1411 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 18 18
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (18) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 388 (3.2 Scalar Types) 388 SB
0 0 0 fC
/fm 256 def
387 2 300 359 B
1 F
n
450 400 159 (Scalar ) 184 SB
634 400 137 (types ) 163 SB
797 400 86 (are ) 112 SB
909 400 112 (data ) 138 SB
1047 400 137 (types ) 163 SB
1210 400 154 (which ) 180 SB
1390 400 126 (don't ) 152 SB
1542 400 189 (directly ) 215 SB
1757 400 272 (correspond ) 298 SB
2055 400 45 (to) 45 SB
375 500 245 (hardware. ) 270 SB
645 500 15 ( ) 40 SB
685 500 149 (There ) 174 SB
859 500 86 (are ) 111 SB
970 500 109 (four ) 134 SB
1104 500 150 (scalar ) 175 SB
1279 500 152 (types. ) 177 SB
1456 500 132 (They ) 157 SB
1613 500 101 (are: ) 126 SB
1739 500 192 (Integer, ) 217 SB
1956 500 144 (Reals,) 144 SB
375 600 612 (Enumerated, and Physical.) 612 SB
300 800 294 (3.2.1 Integer) 294 SB
/fm 256 def
293 2 300 859 B
1 F
n
450 900 174 (VHDL ) 182 SB
632 900 250 (represents ) 258 SB
890 900 196 (integers ) 204 SB
1094 900 58 (in ) 66 SB
1160 900 85 (the ) 93 SB
1253 900 133 (same ) 141 SB
1394 900 111 (way ) 120 SB
1514 900 64 (as ) 73 SB
1587 900 85 (the ) 94 SB
1681 900 146 (target ) 155 SB
1836 900 207 (machine ) 216 SB
2052 900 48 (or) 48 SB
375 1000 232 (compiler. ) 241 SB
616 1000 15 ( ) 24 SB
640 1000 116 (This ) 125 SB
765 1000 53 (is ) 62 SB
827 1000 60 (to ) 69 SB
896 1000 92 (say ) 101 SB
997 1000 101 (that ) 110 SB
1107 1000 196 (integers ) 205 SB
1312 1000 86 (are ) 95 SB
1407 1000 62 (of ) 72 SB
1479 1000 207 (machine ) 217 SB
1696 1000 252 (dependent ) 262 SB
1958 1000 142 (range.) 142 SB
375 1100 200 (Integers ) 207 SB
582 1100 86 (are ) 93 SB
675 1100 85 (the ) 92 SB
767 1100 133 (same ) 140 SB
907 1100 64 (as ) 71 SB
978 1100 175 (normal ) 182 SB
1160 1100 196 (integers ) 204 SB
1364 1100 58 (in ) 66 SB
1430 1100 143 (math, ) 151 SB
1581 1100 98 (and ) 106 SB
1687 1100 175 (normal ) 183 SB
1870 1100 230 (arithmetic) 230 SB
375 1200 606 (functions \(+, -, *, /\) apply.) 606 SB
300 1400 238 (3.2.2 Real) 238 SB
/fm 256 def
237 2 300 1459 B
1 F
n
450 1500 121 (Real ) 128 SB
578 1500 211 (numbers ) 218 SB
796 1500 86 (are ) 93 SB
889 1500 64 (as ) 71 SB
960 1500 211 (integers, ) 218 SB
1178 1500 207 (machine ) 214 SB
1392 1500 208 (specific. ) 215 SB
1607 1500 15 ( ) 23 SB
1630 1500 132 (They ) 140 SB
1770 1500 142 (allow ) 150 SB
1920 1500 41 (a ) 49 SB
1969 1500 131 (wider) 131 SB
375 1600 1336 (variation in values than integer, the largest range possible.) 1336 SB
300 1800 408 (3.2.3 Enumerated) 408 SB
/fm 256 def
407 2 300 1859 B
1 F
n
450 1900 811 (Enumerated types are user defined ) 812 SB
1262 1900 152 (types. ) 153 SB
1415 1900 15 ( ) 16 SB
1431 1900 50 (It ) 51 SB
1482 1900 53 (is ) 54 SB
1536 1900 236 (important ) 237 SB
1773 1900 139 (when ) 140 SB
1913 1900 187 (defining) 187 SB
375 2000 85 (the ) 87 SB
462 2000 137 (order ) 139 SB
601 2000 62 (of ) 64 SB
665 2000 85 (the ) 88 SB
753 2000 176 (names, ) 179 SB
932 2000 60 (to ) 63 SB
995 2000 88 (put ) 91 SB
1086 2000 128 (them ) 131 SB
1217 2000 58 (in ) 61 SB
1278 2000 166 (lexical ) 169 SB
1447 2000 152 (order. ) 155 SB
1602 2000 15 ( ) 18 SB
1620 2000 116 (This ) 119 SB
1739 2000 53 (is ) 56 SB
1795 2000 236 (important ) 239 SB
2034 2000 66 (for) 66 SB
375 2100 85 (the ) 102 SB
477 2100 173 (default ) 190 SB
667 2100 315 (initialization, ) 332 SB
999 2100 174 ('LEFT. ) 191 SB
1190 2100 15 ( ) 32 SB
1222 2100 175 (Names ) 193 SB
1415 2100 95 (can ) 113 SB
1528 2100 70 (be ) 88 SB
1616 2100 150 (single ) 168 SB
1784 2100 250 (characters ) 268 SB
2052 2100 48 (or) 48 SB
375 2200 260 (identifiers. ) 266 SB
641 2200 15 ( ) 21 SB
662 2200 143 (Note, ) 149 SB
811 2200 111 (user ) 117 SB
928 2200 186 (defined ) 192 SB
1120 2200 282 (enumerated ) 288 SB
1408 2200 137 (types ) 143 SB
1551 2200 125 (must ) 131 SB
1682 2200 123 (have ) 129 SB
1811 2200 111 (user ) 118 SB
1929 2200 171 (defined) 171 SB
375 2300 226 (functions ) 245 SB
620 2300 98 (and ) 118 SB
738 2300 243 (resolution ) 263 SB
1001 2300 241 (functions, ) 261 SB
1262 2300 64 (as ) 84 SB
1346 2300 211 (standard ) 231 SB
1577 2300 174 (VHDL ) 194 SB
1771 2300 226 (functions ) 246 SB
2017 2300 83 (and) 83 SB
375 2400 933 (operators will not apply to the new type.) 933 SB
450 2500 84 (An ) 90 SB
540 2500 282 (enumerated ) 288 SB
828 2500 114 (type ) 121 SB
949 2500 208 (example ) 215 SB
1164 2500 95 (can ) 102 SB
1266 2500 70 (be ) 77 SB
1343 2500 227 (anything. ) 234 SB
1577 2500 127 (Here ) 134 SB
1711 2500 83 (we ) 90 SB
1801 2500 102 (will ) 109 SB
1910 2500 157 (define ) 164 SB
2074 2500 26 (a) 26 SB
375 2600 1363 (type, traffic which will have values of red, yellow or green.) 1363 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2817 1110 (TYPE traffic IS \(red, yellow, green\);) 1110 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
867 2900 665 (Listing 9. Enumerated Types) 665 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 19 19
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (19) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 325 (3.2.4 Physical) 325 SB
0 0 0 fC
/fm 256 def
324 2 300 359 B
1 F
n
450 400 208 (Physical ) 213 SB
663 400 137 (types ) 142 SB
805 400 86 (are ) 91 SB
896 400 186 (defined ) 191 SB
1087 400 60 (to ) 65 SB
1152 400 227 (represent ) 233 SB
1385 400 205 (physical ) 211 SB
1596 400 252 (quantities. ) 258 SB
1854 400 15 ( ) 21 SB
1875 400 225 (Examples) 225 SB
375 500 994 (would be: time, distance, and weight.  The ) 995 SB
1370 500 119 (base ) 120 SB
1490 500 102 (unit ) 103 SB
1593 500 125 (must ) 126 SB
1719 500 70 (be ) 71 SB
1790 500 226 (declared, ) 227 SB
2017 500 83 (and) 83 SB
375 600 1228 (then new values can be calculated from the base unit.) 1228 SB
450 700 208 (Physical ) 222 SB
672 700 137 (types ) 151 SB
823 700 227 (represent ) 241 SB
1064 700 205 (physical ) 219 SB
1283 700 252 (quantities. ) 266 SB
1549 700 127 (Here ) 141 SB
1690 700 83 (we ) 97 SB
1787 700 102 (will ) 116 SB
1903 700 157 (define ) 171 SB
2074 700 26 (a) 26 SB
375 800 864 (type, capac, to represent capacitance.) 864 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 942 1050 (TYPE capac IS RANGE 0 to 1000000000) 1050 SB
540 992 150 (UNITS) 150 SB
600 1042 90 (pf;) 90 SB
900 1042 390 (--pico farads) 390 SB
600 1092 390 (nf = 1000 pf;) 390 SB
1050 1092 420 (-- nano farads) 420 SB
600 1142 390 (uf = 1000 nf;) 390 SB
1050 1142 450 (-- micro farads) 450 SB
600 1192 390 (mf = 1000 uf;) 390 SB
1050 1192 480 (-- milli farads;) 480 SB
540 1242 300 (END UNITS;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
894 1375 611 (Listing 10. Physical Types) 611 SB
300 1550 493 (3.3 Composite Types) 493 SB
/fm 256 def
492 2 300 1609 B
1 F
n
450 1650 149 (There ) 171 SB
621 1650 86 (are ) 108 SB
729 1650 102 (two ) 124 SB
853 1650 251 (composite ) 273 SB
1126 1650 137 (types ) 160 SB
1286 1650 221 (available ) 244 SB
1530 1650 58 (in ) 81 SB
1611 1650 189 (VHDL, ) 212 SB
1823 1650 171 (Arrays ) 194 SB
2017 1650 83 (and) 83 SB
375 1750 206 (Records.) 206 SB
300 1950 288 (3.3.1 Arrays) 288 SB
/fm 256 def
287 2 300 2009 B
1 F
n
450 2050 171 (Arrays ) 182 SB
632 2050 86 (are ) 97 SB
729 2050 171 (groups ) 182 SB
911 2050 62 (of ) 74 SB
985 2050 218 (elements ) 230 SB
1215 2050 62 (of ) 74 SB
1289 2050 85 (the ) 97 SB
1386 2050 133 (same ) 145 SB
1531 2050 129 (type. ) 141 SB
1672 2050 15 ( ) 27 SB
1699 2050 227 (Elements ) 239 SB
1938 2050 95 (can ) 107 SB
2045 2050 55 (be) 55 SB
375 2150 173 (scalars ) 178 SB
553 2150 63 (or ) 68 SB
621 2150 251 (composite ) 256 SB
877 2150 152 (types. ) 157 SB
1034 2150 15 ( ) 20 SB
1054 2150 171 (Arrays ) 176 SB
1230 2150 86 (are ) 91 SB
1321 2150 168 (useful, ) 173 SB
1494 2150 58 (in ) 63 SB
1557 2150 101 (that ) 107 SB
1664 2150 113 (they ) 119 SB
1783 2150 86 (are ) 92 SB
1875 2150 153 (useful ) 159 SB
2034 2150 66 (for) 66 SB
375 2250 228 (modeling ) 235 SB
610 2250 170 (RAMs ) 177 SB
787 2250 63 (or ) 70 SB
857 2250 186 (ROMs. ) 193 SB
1050 2250 15 ( ) 22 SB
1072 2250 132 (They ) 139 SB
1211 2250 86 (are ) 93 SB
1304 2250 277 (particularly ) 284 SB
1588 2250 153 (useful ) 160 SB
1748 2250 58 (in ) 65 SB
1813 2250 101 (that ) 109 SB
1922 2250 178 (specific) 178 SB
375 2350 828 (values can be accessed by an index.) 828 SB
450 2450 1536 (The following is a sample array of four eight bit \(std_logic\) words.) 1536 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2592 150 (TYPE ) 170 SB
635 2592 150 (four ) 170 SB
805 2592 90 (IS ) 110 SB
915 2592 210 (ARRAY\( ) 231 SB
1146 2592 60 (0 ) 81 SB
1227 2592 90 (TO ) 111 SB
1338 2592 90 (7\) ) 111 SB
1449 2592 90 (OF ) 111 SB
1560 2592 540 (std_logic_vector\(7) 540 SB
540 2642 300 (DOWNTO 0\);) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
894 2775 612 (Listing 11. Array Example) 612 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 20 20
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (20) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 323 (3.3.2 Records) 323 SB
0 0 0 fC
/fm 256 def
322 2 300 359 B
1 F
n
450 400 206 (Records ) 227 SB
677 400 86 (are ) 107 SB
784 400 171 (groups ) 192 SB
976 400 62 (of ) 83 SB
1059 400 210 (different ) 232 SB
1291 400 114 (type ) 136 SB
1427 400 195 (objects. ) 217 SB
1644 400 15 ( ) 37 SB
1681 400 119 (Like ) 141 SB
1822 400 186 (Arrays, ) 208 SB
2030 400 70 (the) 70 SB
375 500 218 (elements ) 220 SB
595 500 95 (can ) 97 SB
692 500 70 (be ) 72 SB
764 500 150 (scalar ) 152 SB
916 500 63 (or ) 66 SB
982 500 251 (composite ) 254 SB
1236 500 152 (types. ) 155 SB
1391 500 15 ( ) 18 SB
1409 500 132 (They ) 135 SB
1544 500 86 (are ) 89 SB
1633 500 242 (extremely ) 245 SB
1878 500 153 (useful ) 156 SB
2034 500 66 (for) 66 SB
375 600 187 (passing ) 188 SB
563 600 127 (data. ) 128 SB
691 600 15 ( ) 16 SB
707 600 94 (For ) 95 SB
802 600 218 (instance, ) 219 SB
1021 600 46 (it ) 47 SB
1068 600 53 (is ) 54 SB
1122 600 204 (possible ) 205 SB
1327 600 60 (to ) 61 SB
1388 600 166 (format ) 167 SB
1555 600 41 (a ) 43 SB
1598 600 163 (record ) 165 SB
1763 600 60 (to ) 62 SB
1825 600 117 (look ) 119 SB
1944 600 100 (like ) 102 SB
2046 600 54 (an) 54 SB
375 700 73 (op ) 110 SB
485 700 125 (code ) 162 SB
647 700 98 (and ) 135 SB
782 700 216 (operand, ) 253 SB
1035 700 169 (further ) 206 SB
1241 700 233 (clarifying ) 270 SB
1511 700 85 (the ) 122 SB
1633 700 303 (functionality ) 341 SB
1974 700 62 (of ) 100 SB
2074 700 26 (a) 26 SB
375 800 544 (microprocessor system.) 544 SB
450 900 56 (A ) 60 SB
510 900 166 (simple ) 171 SB
681 900 163 (record ) 168 SB
849 900 208 (example ) 213 SB
1062 900 158 (would ) 163 SB
1225 900 70 (be ) 75 SB
1300 900 69 (an ) 74 SB
1374 900 128 (eight ) 133 SB
1507 900 75 (bit ) 80 SB
1587 900 73 (op ) 78 SB
1665 900 125 (code ) 130 SB
1795 900 116 (with ) 121 SB
1916 900 41 (a ) 46 SB
1962 900 73 (16 ) 78 SB
2040 900 60 (bit) 60 SB
375 1000 201 (operand.) 201 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1142 570 (TYPE instruction IS) 570 SB
540 1192 180 (RECORD) 180 SB
600 1242 180 (opcode) 180 SB
900 1242 870 (: std_logic_vector\(7 DOWNTO 0) 870 SB
1770 1242 60 (\);) 60 SB
600 1292 120 (data) 120 SB
900 1292 960 (: std_logic_vector\(15 DOWNTO 0\);) 960 SB
540 1342 330 (END RECORD;) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
876 1400 647 (Listing 12. Record Example) 647 SB
300 1575 299 (3.4 Subtypes) 299 SB
/fm 256 def
298 2 300 1634 B
1 F
n
450 1675 56 (A ) 61 SB
511 1675 194 (subtype ) 199 SB
710 1675 53 (is ) 58 SB
768 1675 41 (a ) 46 SB
814 1675 160 (subset ) 166 SB
980 1675 62 (of ) 68 SB
1048 1675 41 (a ) 47 SB
1095 1675 119 (base ) 125 SB
1220 1675 129 (type. ) 135 SB
1355 1675 15 ( ) 21 SB
1376 1675 309 (Assignments ) 315 SB
1691 1675 208 (between ) 214 SB
1905 1675 85 (the ) 91 SB
1996 1675 104 (base) 104 SB
375 1775 114 (type ) 129 SB
504 1775 98 (and ) 113 SB
617 1775 85 (the ) 100 SB
717 1775 217 (subtypes ) 232 SB
949 1775 86 (are ) 102 SB
1051 1775 212 (allowed. ) 228 SB
1279 1775 15 ( ) 31 SB
1310 1775 104 (The ) 120 SB
1430 1775 92 (use ) 108 SB
1538 1775 62 (of ) 78 SB
1616 1775 217 (subtypes ) 233 SB
1849 1775 165 (allows ) 181 SB
2030 1775 70 (the) 70 SB
375 1875 202 (addition ) 210 SB
585 1875 62 (of ) 70 SB
655 1875 264 (constraints ) 272 SB
927 1875 60 (to ) 69 SB
996 1875 204 (increase ) 213 SB
1209 1875 85 (the ) 94 SB
1303 1875 253 (usefulness ) 262 SB
1565 1875 62 (of ) 71 SB
1636 1875 142 (range ) 151 SB
1787 1875 221 (checking ) 230 SB
2017 1875 83 (and) 83 SB
375 1975 1241 (minimize the number of options in a CASE statement.) 1241 SB
450 2075 84 (An ) 96 SB
546 2075 208 (example ) 220 SB
766 2075 62 (of ) 74 SB
840 2075 41 (a ) 53 SB
893 2075 194 (subtype ) 207 SB
1100 2075 158 (would ) 171 SB
1271 2075 70 (be ) 83 SB
1354 2075 60 (to ) 73 SB
1427 2075 157 (define ) 170 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1597 2076 181 (positive) 181 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1778 2075 30 (, ) 43 SB
1821 2075 85 (the ) 98 SB
1919 2075 181 (positive) 181 SB
375 2175 196 (integers ) 199 SB
574 2175 124 (from ) 128 SB
702 2175 44 (1 ) 48 SB
750 2175 60 (to ) 64 SB
814 2175 182 ('HIGH. ) 186 SB
1000 2175 15 ( ) 19 SB
1019 2175 104 (The ) 108 SB
1127 2175 114 (type ) 118 SB
1245 2175 173 (integer ) 177 SB
1422 2175 53 (is ) 57 SB
1479 2175 279 (pre-defined ) 283 SB
1762 2175 64 (as ) 68 SB
1830 2175 85 (the ) 89 SB
1919 2175 181 (integers) 181 SB
375 2275 153 (from 2) 153 SB
528 2262 58 (32) 58 SB
586 2275 399 (-1 DOWNTO - 2) 399 SB
985 2262 73 (32.) 73 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2417 1410 (SUBTYPE pos IS integer RANGE 0 TO integer'HIGH;) 1410 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
866 2525 667 (Listing 13. Subtype Example) 667 SB
450 2600 128 (Note ) 136 SB
586 2600 85 (the ) 93 SB
679 2600 92 (use ) 101 SB
780 2600 62 (of ) 71 SB
851 2600 85 (the ) 94 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
945 2601 158 ('HIGH) 158 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1103 2600 15 ( ) 24 SB
1127 2600 223 (operator. ) 232 SB
1359 2600 15 ( ) 24 SB
1383 2600 116 (This ) 125 SB
1508 2600 165 (allows ) 174 SB
1682 2600 66 (us ) 75 SB
1757 2600 60 (to ) 69 SB
1826 2600 189 (express ) 198 SB
2024 2600 76 (our) 76 SB
375 2675 194 (subtype ) 196 SB
571 2675 58 (in ) 60 SB
631 2675 41 (a ) 43 SB
674 2675 132 (more ) 134 SB
808 2675 211 (readable ) 213 SB
1021 2675 200 (manner. ) 202 SB
1223 2675 15 ( ) 17 SB
1240 2675 162 (Recall ) 164 SB
1404 2675 101 (that ) 103 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1507 2676 158 ('HIGH) 158 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1665 2675 15 ( ) 17 SB
1682 2675 174 (returns ) 177 SB
1859 2675 85 (the ) 88 SB
1947 2675 153 (largest) 153 SB
375 2750 373 (value of integer.) 373 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 21 21
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (21) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 208 (3.5 Alias) 208 SB
0 0 0 fC
/fm 256 def
207 2 300 359 B
1 F
n
450 400 184 (Aliases ) 186 SB
636 400 86 (are ) 88 SB
724 400 69 (an ) 71 SB
795 400 256 (alternative ) 258 SB
1053 400 278 (designation ) 280 SB
1333 400 81 (for ) 83 SB
1416 400 41 (a ) 43 SB
1459 400 165 (signal, ) 167 SB
1626 400 199 (variable ) 201 SB
1827 400 63 (or ) 66 SB
1893 400 207 (constant.) 207 SB
375 500 184 (Aliases ) 189 SB
564 500 86 (are ) 91 SB
655 500 116 (very ) 121 SB
776 500 153 (useful ) 158 SB
934 500 81 (for ) 86 SB
1020 500 200 (splitting ) 205 SB
1225 500 182 (vectors ) 188 SB
1413 500 103 (into ) 109 SB
1522 500 175 (pieces. ) 181 SB
1703 500 94 (For ) 100 SB
1803 500 223 (example, ) 229 SB
2032 500 68 (we) 68 SB
375 600 1055 (can split up a word into op code and operand:) 1055 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 742 1500 (SIGNAL instruction: std_logic_vector\(15 DOWNTO 0\);) 1500 SB
465 792 180 (ALIAS ) 222 SB
687 792 90 (op ) 132 SB
819 792 180 (code: ) 222 SB
1041 792 570 (std_logic_vector\(7 ) 613 SB
1654 792 210 (DOWNTO ) 253 SB
1907 792 90 (0\) ) 133 SB
2040 792 60 (IS) 60 SB
540 842 750 (instruction\(15 DOWNTO 8\);) 750 SB
465 892 180 (ALIAS ) 231 SB
696 892 270 (operand: ) 321 SB
1017 892 570 (std_logic_vector\(7 ) 621 SB
1638 892 210 (DOWNTO ) 261 SB
1899 892 90 (0\) ) 141 SB
2040 892 60 (IS) 60 SB
540 942 720 (instruction\(7 DOWNTO 0\);) 720 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
900 1050 599 (Listing 14. Alias Example) 599 SB
300 1225 579 (3.6 Unconstrained Types) 579 SB
/fm 256 def
578 2 300 1284 B
1 F
n
450 1325 350 (Unconstrained ) 362 SB
812 1325 137 (types ) 149 SB
961 1325 86 (are ) 98 SB
1059 1325 153 (useful ) 166 SB
1225 1325 81 (for ) 94 SB
1319 1325 202 (defining ) 215 SB
1534 1325 213 (common ) 226 SB
1760 1325 226 (functions ) 239 SB
1999 1325 101 (with) 101 SB
375 1425 210 (different ) 222 SB
597 1425 145 (width ) 157 SB
754 1425 169 (inputs. ) 182 SB
936 1425 15 ( ) 28 SB
964 1425 81 (By ) 94 SB
1058 1425 137 (using ) 150 SB
1208 1425 69 (an ) 82 SB
1290 1425 336 (unconstrained ) 349 SB
1639 1425 129 (type, ) 142 SB
1781 1425 98 (one ) 111 SB
1892 1425 208 (universal) 208 SB
375 1525 203 (function ) 206 SB
581 1525 95 (can ) 98 SB
679 1525 70 (be ) 73 SB
752 1525 192 (written. ) 196 SB
948 1525 15 ( ) 19 SB
967 1525 104 (The ) 108 SB
1075 1525 111 (way ) 115 SB
1190 1525 83 (we ) 87 SB
1277 1525 95 (can ) 99 SB
1376 1525 73 (do ) 77 SB
1453 1525 97 (this ) 101 SB
1554 1525 53 (is ) 57 SB
1611 1525 60 (to ) 64 SB
1675 1525 157 (define ) 161 SB
1836 1525 41 (a ) 45 SB
1881 1525 114 (type ) 118 SB
1999 1525 101 (with) 101 SB
375 1625 72 (no ) 89 SB
464 1625 157 (range, ) 174 SB
638 1625 137 (using ) 154 SB
792 1625 85 (the ) 102 SB
894 1625 119 ('box' ) 136 SB
1030 1625 182 (symbol ) 199 SB
1229 1625 114 ('<>'. ) 131 SB
1360 1625 15 ( ) 32 SB
1392 1625 116 (This ) 134 SB
1526 1625 165 (allows ) 183 SB
1709 1625 66 (us ) 84 SB
1793 1625 60 (to ) 78 SB
1871 1625 157 (define ) 175 SB
2046 1625 54 (an) 54 SB
375 1725 336 (unconstrained ) 349 SB
724 1725 133 (array ) 146 SB
870 1725 62 (of ) 75 SB
945 1725 211 (integers. ) 224 SB
1169 1725 15 ( ) 28 SB
1197 1725 96 (We ) 109 SB
1306 1725 125 (must ) 138 SB
1444 1725 157 (define ) 170 SB
1614 1725 97 (this ) 110 SB
1724 1725 142 (range ) 155 SB
1879 1725 139 (when ) 153 SB
2032 1725 68 (we) 68 SB
375 1825 449 (instantiate the type.) 449 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1967 150 (TYPE ) 160 SB
625 1967 510 (std_logic_vector ) 520 SB
1145 1967 90 (IS ) 101 SB
1246 1967 180 (ARRAY ) 191 SB
1437 1967 270 (\(INTEGER ) 281 SB
1718 1967 180 (RANGE ) 191 SB
1909 1967 120 (<>\) ) 131 SB
2040 1967 60 (OF) 60 SB
540 2017 300 (std_logic;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
823 2150 753 (Listing 15. Unconstrained Types) 753 SB
450 2250 104 (The ) 114 SB
564 2250 300 (Instantiation ) 310 SB
874 2250 158 (would ) 168 SB
1042 2250 85 (be: ) 96 SB
1138 2250 475 (std_logic_vector\(31 ) 486 SB
1624 2250 273 (DOWNTO ) 284 SB
1908 2250 78 (0\). ) 89 SB
1997 2250 15 ( ) 26 SB
2023 2250 77 (\(31) 77 SB
375 2350 1089 (DOWNTO 0\) would replace the box character.) 1089 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 22 22
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (22) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 373 (3.7 Overloading) 373 SB
0 0 0 fC
/fm 256 def
372 2 300 359 B
1 F
n
450 400 104 (The ) 107 SB
557 400 195 (concept ) 198 SB
755 400 62 (of ) 65 SB
820 400 287 (overloading ) 290 SB
1110 400 53 (is ) 57 SB
1167 400 60 (to ) 64 SB
1231 400 154 (create ) 158 SB
1389 400 202 (multiple ) 206 SB
1595 400 311 (subprograms ) 315 SB
1910 400 116 (with ) 120 SB
2030 400 70 (the) 70 SB
375 500 133 (same ) 135 SB
510 500 153 (name, ) 155 SB
665 500 63 (or ) 65 SB
730 500 133 (same ) 135 SB
865 500 299 (enumeration ) 302 SB
1167 500 138 (value ) 141 SB
1308 500 58 (in ) 61 SB
1369 500 202 (multiple ) 205 SB
1574 500 152 (types. ) 155 SB
1729 500 15 ( ) 18 SB
1747 500 116 (This ) 119 SB
1866 500 165 (allows ) 168 SB
2034 500 66 (for) 66 SB
375 600 132 (more ) 142 SB
517 600 211 (readable ) 222 SB
739 600 195 (models, ) 206 SB
945 600 81 (for ) 92 SB
1037 600 218 (instance, ) 229 SB
1266 600 69 (an ) 80 SB
1346 600 140 (AND ) 151 SB
1497 600 203 (function ) 214 SB
1711 600 95 (can ) 106 SB
1817 600 70 (be ) 81 SB
1898 600 121 (used ) 132 SB
2030 600 70 (the) 70 SB
375 700 1512 (same on std_logic, tw_logic\(a 46 value logic system\) or bit types.) 1512 SB
300 900 641 (3.8 User Defined Attributes) 641 SB
/fm 256 def
640 2 300 959 B
1 F
n
450 1000 125 (User ) 137 SB
587 1000 186 (defined ) 198 SB
785 1000 229 (attributes ) 241 SB
1026 1000 86 (are ) 99 SB
1125 1000 41 (a ) 54 SB
1179 1000 111 (user ) 124 SB
1303 1000 186 (defined ) 199 SB
1502 1000 112 (data ) 125 SB
1627 1000 187 (passing ) 200 SB
1827 1000 273 (mechanism.) 273 SB
375 1100 132 (They ) 135 SB
510 1100 142 (allow ) 145 SB
655 1100 85 (the ) 88 SB
743 1100 266 (attachment ) 269 SB
1012 1100 62 (of ) 65 SB
1077 1100 218 (elements ) 221 SB
1298 1100 60 (to ) 64 SB
1362 1100 174 (VHDL ) 178 SB
1540 1100 308 (descriptions. ) 312 SB
1852 1100 15 ( ) 19 SB
1871 1100 229 (Attributes) 229 SB
375 1200 125 (must ) 138 SB
513 1200 175 (consist ) 188 SB
701 1200 62 (of ) 75 SB
776 1200 41 (a ) 55 SB
831 1200 129 (type, ) 143 SB
974 1200 98 (and ) 112 SB
1086 1200 119 (their ) 133 SB
1219 1200 161 (values ) 175 SB
1394 1200 86 (are ) 100 SB
1494 1200 265 (considered ) 279 SB
1773 1200 230 (constants ) 244 SB
2017 1200 83 (and) 83 SB
375 1300 168 (cannot ) 185 SB
560 1300 70 (be ) 87 SB
647 1300 273 (reassigned. ) 290 SB
937 1300 15 ( ) 32 SB
969 1300 244 (Attributes ) 261 SB
1230 1300 95 (can ) 112 SB
1342 1300 70 (be ) 87 SB
1429 1300 254 (associated ) 271 SB
1700 1300 116 (with ) 133 SB
1833 1300 167 (almost ) 185 SB
2018 1300 82 (any) 82 SB
375 1400 174 (VHDL ) 195 SB
570 1400 241 (construct, ) 262 SB
832 1400 205 (whereas ) 226 SB
1058 1400 298 (GENERICS ) 319 SB
1377 1400 95 (can ) 117 SB
1494 1400 115 (only ) 137 SB
1631 1400 70 (be ) 92 SB
1723 1400 254 (associated ) 276 SB
1999 1400 101 (with) 101 SB
375 1500 180 (entities.) 180 SB
300 1700 297 (3.9 Generate) 297 SB
/fm 256 def
296 2 300 1759 B
1 F
n
450 1800 224 (Generate ) 239 SB
689 1800 258 (statements ) 273 SB
962 1800 142 (allow ) 157 SB
1119 1800 85 (the ) 100 SB
1219 1800 174 (VHDL ) 190 SB
1409 1800 296 (programmer ) 312 SB
1721 1800 60 (to ) 76 SB
1797 1800 148 (easily ) 164 SB
1961 1800 139 (create) 139 SB
375 1900 231 (repetitive ) 233 SB
608 1900 254 (structures. ) 256 SB
864 1900 15 ( ) 17 SB
881 1900 116 (This ) 118 SB
999 1900 165 (allows ) 167 SB
1166 1900 81 (for ) 83 SB
1249 1900 166 (simple ) 168 SB
1417 1900 256 (generation ) 258 SB
1675 1900 62 (of ) 64 SB
1739 1900 203 (memory ) 205 SB
1944 1900 156 (arrays,) 156 SB
375 2000 210 (registers ) 215 SB
590 2000 98 (and ) 103 SB
693 2000 133 (other ) 138 SB
831 2000 231 (repetitive ) 237 SB
1068 2000 264 (constructs. ) 270 SB
1338 2000 15 ( ) 21 SB
1359 2000 50 (It ) 56 SB
1415 2000 53 (is ) 59 SB
1474 2000 204 (possible ) 210 SB
1684 2000 60 (to ) 66 SB
1750 2000 92 (use ) 98 SB
1848 2000 65 (IF ) 71 SB
1919 2000 63 (or ) 69 SB
1988 2000 112 (FOR) 112 SB
375 2100 1461 (clauses to allow conditional generation for even further control.) 1461 SB
300 2300 438 (3.10 Access Types) 438 SB
/fm 256 def
437 2 300 2359 B
1 F
n
450 2400 180 (Access ) 211 SB
661 2400 152 (types, ) 183 SB
844 2400 171 (similar ) 202 SB
1046 2400 60 (to ) 91 SB
1137 2400 200 (pointers ) 231 SB
1368 2400 58 (in ) 89 SB
1457 2400 69 (C, ) 100 SB
1557 2400 86 (are ) 117 SB
1674 2400 121 (used ) 152 SB
1826 2400 60 (to ) 91 SB
1917 2400 183 (perform) 183 SB
375 2500 322 (programming ) 353 SB
728 2500 220 (language ) 251 SB
979 2500 255 (operations ) 286 SB
1265 2500 154 (which ) 185 SB
1450 2500 123 (have ) 154 SB
1604 2500 72 (no ) 103 SB
1707 2500 146 (direct ) 178 SB
1885 2500 215 (hardware) 215 SB
375 2600 249 (definition. ) 254 SB
629 2600 15 ( ) 20 SB
649 2600 228 (Although ) 233 SB
882 2600 113 (they ) 118 SB
1000 2600 73 (do ) 78 SB
1078 2600 88 (not ) 93 SB
1171 2600 189 (directly ) 194 SB
1365 2600 157 (model ) 162 SB
1527 2600 245 (hardware, ) 250 SB
1777 2600 113 (they ) 118 SB
1895 2600 73 (do ) 78 SB
1973 2600 127 (allow) 127 SB
375 2700 81 (for ) 95 SB
470 2700 85 (the ) 99 SB
569 2700 200 (creation ) 214 SB
783 2700 62 (of ) 76 SB
859 2700 210 (dynamic ) 225 SB
1084 2700 203 (memory ) 218 SB
1302 2700 240 (allocation ) 255 SB
1557 2700 81 (for ) 96 SB
1653 2700 199 (queue's, ) 214 SB
1867 2700 170 (FIFO's ) 185 SB
2052 2700 48 (or) 48 SB
375 2800 254 (memories. ) 274 SB
649 2800 15 ( ) 35 SB
684 2800 104 (The ) 124 SB
808 2800 161 (values ) 181 SB
989 2800 62 (of ) 82 SB
1071 2800 165 (access ) 185 SB
1256 2800 137 (types ) 157 SB
1413 2800 86 (are ) 106 SB
1519 2800 200 (pointers ) 221 SB
1740 2800 60 (to ) 81 SB
1821 2800 279 (dynamically) 279 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 23 23
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (23) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 223 (allocated ) 235 SB
610 300 152 (types. ) 164 SB
774 300 15 ( ) 27 SB
801 300 62 (In ) 74 SB
875 300 85 (the ) 97 SB
972 300 234 (following ) 246 SB
1218 300 223 (example, ) 235 SB
1453 300 83 (we ) 95 SB
1548 300 182 (declare ) 194 SB
1742 300 69 (an ) 81 SB
1823 300 165 (access ) 178 SB
2001 300 99 (type) 99 SB
375 400 1099 (ptr_fifo, which acts as a pointer to the type fifo.) 1099 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
375 567 1440 (TYPE fifo_element IS ARRAY\(0 TO 3\) OF std_logic;) 1440 SB
375 617 1110 (TYPE ptr_fifo IS ACCESS fifo_element;) 1110 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
908 700 583 (Listing 16. Access Types) 583 SB
300 900 530 (3.11 Incomplete Types) 530 SB
0 0 0 fC
/fm 256 def
529 2 300 959 B
1 F
n
450 1000 272 (Incomplete ) 278 SB
728 1000 137 (types ) 143 SB
871 1000 86 (are ) 92 SB
963 1000 121 (used ) 127 SB
1090 1000 64 (as ) 70 SB
1160 1000 41 (a ) 47 SB
1207 1000 137 (place ) 143 SB
1350 1000 161 (holder ) 168 SB
1518 1000 81 (for ) 88 SB
1606 1000 41 (a ) 48 SB
1654 1000 114 (type ) 121 SB
1775 1000 154 (which ) 161 SB
1936 1000 102 (will ) 109 SB
2045 1000 55 (be) 55 SB
375 1100 1357 (defined later.  They are useful for access type declarations.) 1357 SB
300 1300 360 (3.12 File Types) 360 SB
/fm 256 def
359 2 300 1359 B
1 F
n
450 1400 102 (File ) 113 SB
563 1400 137 (types ) 148 SB
711 1400 142 (allow ) 153 SB
864 1400 81 (for ) 92 SB
956 1400 85 (the ) 96 SB
1052 1400 131 (input ) 142 SB
1194 1400 62 (of ) 73 SB
1267 1400 127 (files. ) 138 SB
1405 1400 15 ( ) 26 SB
1431 1400 102 (File ) 114 SB
1545 1400 137 (types ) 149 SB
1694 1400 112 (may ) 124 SB
1818 1400 88 (not ) 100 SB
1918 1400 70 (be ) 82 SB
2000 1400 62 (of ) 74 SB
2074 1400 26 (a) 26 SB
375 1500 186 (straight ) 194 SB
569 1500 165 (ASCII ) 173 SB
742 1500 181 (format. ) 189 SB
931 1500 15 ( ) 23 SB
954 1500 125 (Files ) 133 SB
1087 1500 86 (are ) 94 SB
1181 1500 62 (of ) 70 SB
1251 1500 41 (a ) 49 SB
1300 1500 111 (user ) 119 SB
1419 1500 186 (defined ) 194 SB
1613 1500 89 (file ) 98 SB
1711 1500 114 (type ) 123 SB
1834 1500 98 (and ) 107 SB
1941 1500 95 (can ) 104 SB
2045 1500 55 (be) 55 SB
375 1600 139 (made ) 154 SB
529 1600 72 (up ) 87 SB
616 1600 62 (of ) 78 SB
694 1600 161 (values ) 177 SB
871 1600 62 (of ) 78 SB
949 1600 41 (a ) 57 SB
1006 1600 234 (particular ) 250 SB
1256 1600 129 (type. ) 145 SB
1401 1600 15 ( ) 31 SB
1432 1600 104 (The ) 120 SB
1552 1600 89 (file ) 105 SB
1657 1600 114 (type ) 130 SB
1787 1600 53 (is ) 69 SB
1856 1600 186 (defined ) 202 SB
2058 1600 42 (at) 42 SB
375 1700 285 (declaration. ) 293 SB
668 1700 15 ( ) 23 SB
691 1700 171 (Types, ) 180 SB
871 1700 76 (IN ) 85 SB
956 1700 63 (or ) 72 SB
1028 1700 149 (OUT, ) 158 SB
1186 1700 86 (are ) 95 SB
1281 1700 236 (available, ) 245 SB
1526 1700 195 (INOUT ) 204 SB
1730 1700 53 (is ) 62 SB
1792 1700 103 (not. ) 112 SB
1904 1700 15 ( ) 24 SB
1928 1700 172 (READ,) 172 SB
375 1800 213 (WRITE, ) 216 SB
591 1800 98 (and ) 101 SB
692 1800 98 (end ) 101 SB
793 1800 62 (of ) 65 SB
858 1800 89 (file ) 92 SB
950 1800 226 (functions ) 229 SB
1179 1800 86 (are ) 89 SB
1268 1800 219 (provided ) 222 SB
1490 1800 58 (in ) 61 SB
1551 1800 189 (VHDL. ) 192 SB
1743 1800 15 ( ) 18 SB
1761 1800 15 ( ) 19 SB
1780 1800 125 (Files ) 129 SB
1909 1800 86 (are ) 90 SB
1999 1800 101 (very) 101 SB
375 1900 1085 (useful in the generation of VHDL test benches.) 1085 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 24 24
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (24) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 841 (CHAPTER 4: VHDL EXECUTION) 841 SB
0 0 0 fC
/fm 256 def
840 2 300 359 B
1 F
n
300 500 610 (4.0 Concurrent Processing) 610 SB
/fm 256 def
609 2 300 559 B
1 F
n
450 600 104 (The ) 118 SB
568 600 235 (statement ) 249 SB
817 600 178 (section ) 192 SB
1009 600 62 (of ) 76 SB
1085 600 85 (the ) 99 SB
1184 600 286 (architecture ) 300 SB
1484 600 214 (executes ) 228 SB
1712 600 58 (in ) 72 SB
1784 600 201 (parallel. ) 215 SB
1999 600 15 ( ) 30 SB
2029 600 71 (All) 71 SB
375 700 258 (statements ) 270 SB
645 700 58 (in ) 70 SB
715 700 97 (this ) 109 SB
824 700 178 (section ) 190 SB
1014 700 102 (will ) 115 SB
1129 700 70 (be ) 83 SB
1212 700 220 (executed ) 233 SB
1445 700 57 (at ) 70 SB
1515 700 85 (the ) 98 SB
1613 700 133 (same ) 146 SB
1759 700 130 (time, ) 143 SB
1902 700 85 (the ) 98 SB
2000 700 100 (only) 100 SB
375 800 238 (exception ) 268 SB
643 800 60 (to ) 90 SB
733 800 97 (this ) 127 SB
860 800 53 (is ) 84 SB
944 800 101 (that ) 132 SB
1076 800 258 (statements ) 289 SB
1365 800 159 (within ) 190 SB
1555 800 41 (a ) 72 SB
1627 800 266 (PROCESS ) 297 SB
1924 800 176 (execute) 176 SB
375 900 290 (sequentially ) 299 SB
674 900 159 (within ) 168 SB
842 900 85 (the ) 94 SB
936 900 281 (PROCESS, ) 290 SB
1226 900 88 (but ) 98 SB
1324 900 58 (in ) 68 SB
1392 900 186 (parallel ) 196 SB
1588 900 116 (with ) 126 SB
1714 900 133 (other ) 143 SB
1857 900 243 (statements) 243 SB
375 1000 159 (within ) 166 SB
541 1000 85 (the ) 92 SB
633 1000 235 (statement ) 242 SB
875 1000 193 (section. ) 201 SB
1076 1000 15 ( ) 23 SB
1099 1000 96 (We ) 104 SB
1203 1000 102 (will ) 110 SB
1313 1000 182 (discuss ) 190 SB
1503 1000 97 (this ) 105 SB
1608 1000 58 (in ) 66 SB
1674 1000 132 (more ) 140 SB
1814 1000 142 (detail ) 150 SB
1964 1000 58 (in ) 66 SB
2030 1000 70 (the) 70 SB
375 1100 247 (sequential ) 267 SB
642 1100 261 (processing ) 281 SB
923 1100 193 (section. ) 213 SB
1136 1100 15 ( ) 35 SB
1171 1100 99 (See ) 119 SB
1290 1100 85 (the ) 105 SB
1395 1100 234 (following ) 254 SB
1649 1100 125 (code ) 145 SB
1794 1100 219 (fragment ) 240 SB
2034 1100 66 (for) 66 SB
375 1200 231 (examples.) 231 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1317 150 (BEGIN) 150 SB
32 0 0 50 50 0 0 0 40 /Courier-Oblique /font11 ANSIFont font
465 1367 30 (1) 30 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
540 1367 750 (c <= a AND b AFTER delay;) 750 SB
1350 1367 690 (-- executes in parallel) 690 SB
32 0 0 50 50 0 0 0 40 /Courier-Oblique /font11 ANSIFont font
465 1417 30 (2) 30 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
540 1417 750 (d <= b AND c AFTER delay;) 750 SB
1350 1417 690 (-- executes in parallel) 690 SB
540 1467 150 (PROCE) 150 SB
690 1467 60 (SS) 60 SB
900 1467 1140 (-- executes serially, but in parallel ) 1140 SB
1050 1517 120 (with) 120 SB
600 1567 150 (BEGIN) 150 SB
900 1567 960 (-- other statements in this code) 960 SB
32 0 0 50 50 0 0 0 40 /Courier-Oblique /font11 ANSIFont font
465 1617 30 (3) 30 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
750 1617 1110 (e <= a AND b AFTER delay; -- fragment) 1110 SB
750 1667 420 (WAIT FOR 0 ns;) 420 SB
32 0 0 50 50 0 0 0 40 /Courier-Oblique /font11 ANSIFont font
465 1717 30 (4) 30 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
750 1717 390 (f <= b AND c;) 390 SB
540 1767 360 (END PROCESS;) 360 SB
465 1817 270 (END arch;) 270 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
808 1950 784 (Listing 17. Concurrent Processing) 784 SB
450 2125 578 (In the above fragment 1, ) 579 SB
1029 2125 59 (2, ) 60 SB
1089 2125 98 (and ) 99 SB
1188 2125 44 (3 ) 45 SB
1233 2125 102 (will ) 103 SB
1336 2125 191 (execute ) 192 SB
1528 2125 373 (simultaneously, ) 374 SB
1902 2125 198 (however) 198 SB
375 2225 235 (statement ) 253 SB
628 2225 44 (4 ) 62 SB
690 2225 102 (will ) 120 SB
810 2225 88 (not ) 106 SB
916 2225 70 (be ) 88 SB
1004 2225 220 (executed ) 238 SB
1242 2225 117 (until ) 136 SB
1378 2225 85 (the ) 104 SB
1482 2225 113 (next ) 132 SB
1614 2225 115 (time ) 134 SB
1748 2225 117 (unit, ) 136 SB
1884 2225 58 (in ) 77 SB
1961 2225 139 (which) 139 SB
375 2325 258 (statements ) 261 SB
636 2325 59 (1, ) 62 SB
698 2325 59 (2, ) 62 SB
760 2325 98 (and ) 101 SB
861 2325 44 (4 ) 47 SB
908 2325 102 (will ) 106 SB
1014 2325 70 (be ) 74 SB
1088 2325 220 (executed ) 224 SB
1312 2325 58 (in ) 62 SB
1374 2325 201 (parallel. ) 205 SB
1579 2325 15 ( ) 19 SB
1598 2325 104 (The ) 108 SB
1706 2325 166 (reason ) 170 SB
1876 2325 81 (for ) 85 SB
1961 2325 97 (this ) 101 SB
2062 2325 38 (is) 38 SB
375 2425 85 (the ) 95 SB
470 2425 165 (WAIT ) 175 SB
645 2425 127 (FOR ) 137 SB
782 2425 95 (0ns ) 105 SB
887 2425 114 (line, ) 124 SB
1011 2425 154 (which ) 164 SB
1175 2425 165 (allows ) 175 SB
1350 2425 98 (one ) 108 SB
1458 2425 115 (time ) 125 SB
1583 2425 102 (unit ) 113 SB
1696 2425 60 (to ) 71 SB
1767 2425 131 (pass. ) 142 SB
1909 2425 15 ( ) 26 SB
1935 2425 116 (This ) 127 SB
2062 2425 38 (is) 38 SB
375 2525 1369 (important in that it allows us to model hardware as parallel ) 1370 SB
1745 2525 166 (blocks ) 167 SB
1912 2525 62 (of ) 63 SB
1975 2525 125 (code,) 125 SB
375 2625 41 (a ) 48 SB
423 2625 155 (whole ) 162 SB
585 2625 370 (microprocessor ) 377 SB
962 2625 142 (could ) 149 SB
1111 2625 70 (be ) 77 SB
1188 2625 212 (modeled ) 219 SB
1407 2625 57 (at ) 64 SB
1471 2625 139 (once, ) 147 SB
1618 2625 71 (all ) 79 SB
1697 2625 244 (functional ) 252 SB
1949 2625 151 (blocks) 151 SB
375 2725 475 (operating in parallel.) 475 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Courier-Oblique
%%+ font Times-Roman
%%Page: 25 25
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (25) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 256 (Sequential ) 258 SB
708 300 166 (blocks ) 168 SB
876 300 86 (are ) 88 SB
964 300 130 (good ) 132 SB
1096 300 81 (for ) 83 SB
1179 300 228 (modeling ) 231 SB
1410 300 166 (blocks ) 169 SB
1579 300 62 (of ) 65 SB
1644 300 125 (code ) 128 SB
1772 300 154 (which ) 157 SB
1929 300 171 (operate) 171 SB
375 400 305 (sequentially, ) 307 SB
682 400 178 (usually ) 180 SB
862 400 215 (sensitive ) 217 SB
1079 400 60 (to ) 63 SB
1142 400 41 (a ) 44 SB
1186 400 155 (clock. ) 158 SB
1344 400 15 ( ) 18 SB
1362 400 104 (The ) 107 SB
1469 400 109 (best ) 112 SB
1581 400 208 (example ) 211 SB
1792 400 62 (of ) 65 SB
1857 400 97 (this ) 100 SB
1957 400 143 (would) 143 SB
375 500 70 (be ) 82 SB
457 500 228 (modeling ) 240 SB
697 500 41 (a ) 54 SB
751 500 133 (finite ) 146 SB
897 500 122 (state ) 135 SB
1032 500 222 (machine, ) 235 SB
1267 500 41 (a ) 54 SB
1321 500 247 (sequential ) 260 SB
1581 500 144 (adder ) 157 SB
1738 500 63 (or ) 76 SB
1814 500 41 (a ) 54 SB
1868 500 232 (sequential) 232 SB
375 600 251 (multiplier. ) 256 SB
631 600 15 ( ) 20 SB
651 600 202 (Another ) 208 SB
859 600 208 (example ) 214 SB
1073 600 158 (would ) 164 SB
1237 600 70 (be ) 76 SB
1313 600 228 (modeling ) 234 SB
1547 600 41 (a ) 47 SB
1594 600 227 (pipelined ) 233 SB
1827 600 189 (system. ) 195 SB
2022 600 15 ( ) 21 SB
2043 600 57 (At) 57 SB
375 700 85 (the ) 103 SB
478 700 89 (top ) 107 SB
585 700 140 (level, ) 158 SB
743 700 178 (usually ) 196 SB
939 700 130 (there ) 148 SB
1087 700 102 (will ) 120 SB
1207 700 70 (be ) 88 SB
1295 700 247 (sequential ) 265 SB
1560 700 166 (blocks ) 184 SB
1744 700 62 (of ) 81 SB
1825 700 125 (code ) 144 SB
1969 700 131 (wired) 131 SB
375 800 781 (together and executing in parallel.) 781 SB
300 1000 764 (4.1 Transport and Inertial Delays) 764 SB
0 0 0 fC
/fm 256 def
763 2 300 1059 B
1 F
n
450 1100 179 (Inertial ) 180 SB
630 1100 162 (delays ) 163 SB
793 1100 86 (are ) 87 SB
880 1100 85 (the ) 86 SB
966 1100 173 (default ) 175 SB
1141 1100 174 (VHDL ) 176 SB
1317 1100 139 (delay ) 141 SB
1458 1100 98 (and ) 100 SB
1558 1100 85 (the ) 87 SB
1645 1100 213 (common ) 215 SB
1860 1100 139 (delay ) 141 SB
2001 1100 99 (type) 99 SB
375 1200 121 (used ) 129 SB
504 1200 58 (in ) 66 SB
570 1200 189 (VHDL. ) 197 SB
767 1200 15 ( ) 23 SB
790 1200 104 (The ) 112 SB
902 1200 315 (disadvantage ) 323 SB
1225 1200 62 (of ) 70 SB
1295 1200 97 (this ) 106 SB
1401 1200 114 (type ) 123 SB
1524 1200 53 (is ) 62 SB
1586 1200 101 (that ) 110 SB
1696 1200 48 (if ) 57 SB
1753 1200 41 (a ) 50 SB
1803 1200 137 (spike ) 146 SB
1949 1200 151 (occurs) 151 SB
375 1300 154 (which ) 155 SB
530 1300 53 (is ) 54 SB
584 1300 182 (smaller ) 183 SB
767 1300 113 (than ) 115 SB
882 1300 85 (the ) 87 SB
969 1300 139 (delay ) 141 SB
1110 1300 191 (through ) 193 SB
1303 1300 85 (the ) 87 SB
1390 1300 180 (device, ) 182 SB
1572 1300 85 (the ) 87 SB
1659 1300 137 (spike ) 139 SB
1798 1300 53 (is ) 55 SB
1853 1300 247 (swallowed) 247 SB
375 1400 1232 (and lost.  This may or may not reflect the true device.) 1232 SB
450 1500 239 (Transport ) 249 SB
699 1500 162 (delays ) 172 SB
871 1500 86 (are ) 96 SB
967 1500 173 (treated ) 183 SB
1150 1500 64 (as ) 74 SB
1224 1500 126 (ideal ) 136 SB
1360 1500 177 (delays. ) 187 SB
1547 1500 120 (That ) 130 SB
1677 1500 68 (is, ) 78 SB
1755 1500 97 (any ) 108 SB
1863 1500 105 (size ) 116 SB
1979 1500 121 (pulse) 121 SB
375 1600 145 (width ) 151 SB
526 1600 102 (will ) 108 SB
634 1600 243 (propagate ) 249 SB
883 1600 191 (through ) 197 SB
1080 1600 85 (the ) 91 SB
1171 1600 180 (device. ) 186 SB
1357 1600 15 ( ) 21 SB
1378 1600 116 (This ) 123 SB
1501 1600 114 (type ) 121 SB
1622 1600 62 (of ) 69 SB
1691 1600 139 (delay ) 146 SB
1837 1600 53 (is ) 60 SB
1897 1600 130 (good ) 137 SB
2034 1600 66 (for) 66 SB
375 1700 820 (wire delay and delay line modeling.) 820 SB
450 1800 458 (Comparing the two ) 459 SB
909 1800 162 (delays ) 163 SB
1072 1800 94 (usin) 94 SB
1166 1800 43 (g ) 44 SB
1210 1800 85 (the ) 86 SB
1296 1800 234 (following ) 235 SB
1531 1800 140 (code, ) 141 SB
1672 1800 48 (if ) 49 SB
1721 1800 83 (we ) 84 SB
1805 1800 131 (input ) 132 SB
1937 1800 41 (a ) 42 SB
1979 1800 121 (pulse) 121 SB
375 1900 102 (less ) 107 SB
482 1900 113 (than ) 119 SB
601 1900 139 (20ns, ) 145 SB
746 1900 85 (the ) 91 SB
837 1900 136 (pulse ) 142 SB
979 1900 102 (will ) 108 SB
1087 1900 70 (be ) 76 SB
1163 1900 113 (lost. ) 119 SB
1282 1900 15 ( ) 21 SB
1303 1900 128 (Only ) 134 SB
1437 1900 159 (pulses ) 165 SB
1602 1900 62 (of ) 68 SB
1670 1900 175 (greater ) 181 SB
1851 1900 145 (width ) 151 SB
2002 1900 98 (than) 98 SB
375 2000 763 (20ns will be assigned to signal b.) 763 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2142 1530 (b <= TRANSPORT a AFTER 20 ns; -- model a delay line) 1530 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
783 2275 833 (Listing 18. Transport delay example) 833 SB
300 2450 613 (4.2 Concurrent Statements) 613 SB
/fm 256 def
612 2 300 2509 B
1 F
n
450 2550 50 (It ) 56 SB
506 2550 106 (was ) 112 SB
618 2550 260 (introduced ) 266 SB
884 2550 162 (before ) 168 SB
1052 2550 101 (that ) 107 SB
1159 2550 174 (VHDL ) 180 SB
1339 2550 230 (simulates ) 236 SB
1575 2550 58 (in ) 64 SB
1639 2550 201 (parallel, ) 207 SB
1846 2550 98 (and ) 104 SB
1950 2550 58 (in ) 64 SB
2014 2550 86 (fact) 86 SB
375 2650 85 (the ) 102 SB
477 2650 155 (whole ) 173 SB
650 2650 220 (language ) 238 SB
888 2650 53 (is ) 71 SB
959 2650 148 (based ) 166 SB
1125 2650 174 (around ) 192 SB
1317 2650 213 (allowing ) 231 SB
1548 2650 247 (sequential ) 265 SB
1813 2650 98 (and ) 116 SB
1929 2650 171 (parallel) 171 SB
375 2750 166 (blocks ) 175 SB
550 2750 60 (to ) 70 SB
620 2750 191 (execute ) 201 SB
821 2750 57 (at ) 67 SB
888 2750 85 (the ) 95 SB
983 2750 133 (same ) 143 SB
1126 2750 130 (time. ) 140 SB
1266 2750 15 ( ) 25 SB
1291 2750 104 (The ) 114 SB
1405 2750 234 (following ) 244 SB
1649 2750 258 (statements ) 268 SB
1917 2750 63 (or ) 73 SB
1990 2750 110 (code) 110 SB
375 2850 791 (blocks run concurrently in VHDL.) 791 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 26 26
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (26) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 487 (- Signal Assignments) 487 SB
450 400 624 (- Component Instantiations) 624 SB
450 500 261 (- Processes) 261 SB
450 600 194 (- Blocks) 194 SB
450 700 378 (- Procedure Call) 378 SB
450 800 512 (- Assertion statements) 512 SB
450 900 510 (- Generate Statements) 510 SB
450 1000 153 (These ) 165 SB
615 1000 258 (statements ) 270 SB
885 1000 71 (all ) 83 SB
968 1000 191 (execute ) 203 SB
1171 1000 58 (in ) 71 SB
1242 1000 186 (parallel ) 199 SB
1441 1000 139 (when ) 152 SB
1593 1000 296 (encountered ) 309 SB
1902 1000 159 (within ) 172 SB
2074 1000 26 (a) 26 SB
375 1100 174 (VHDL ) 185 SB
560 1100 223 (program. ) 234 SB
794 1100 15 ( ) 26 SB
820 1100 184 (Certain ) 195 SB
1015 1100 239 (structures ) 250 SB
1265 1100 120 (such ) 131 SB
1396 1100 64 (as ) 75 SB
1471 1100 242 (Processes ) 253 SB
1724 1100 90 (run ) 101 SB
1825 1100 275 (sequentially) 275 SB
375 1200 1412 (internally, but they also run concurrent with other statements.) 1412 SB
300 1400 593 (4.3 Sequential Processing) 593 SB
0 0 0 fC
/fm 256 def
592 2 300 1459 B
1 F
n
450 1500 256 (Sequential ) 257 SB
707 1500 239 (processes ) 240 SB
947 1500 90 (run ) 91 SB
1038 1500 64 (as ) 65 SB
1103 1500 97 (any ) 98 SB
1201 1500 133 (other ) 134 SB
1335 1500 322 (programming ) 323 SB
1658 1500 235 (language, ) 236 SB
1894 1500 121 (each ) 122 SB
2016 1500 84 (line) 84 SB
375 1600 53 (is ) 60 SB
435 1600 220 (executed ) 227 SB
662 1600 58 (in ) 65 SB
727 1600 242 (sequence. ) 249 SB
976 1600 15 ( ) 22 SB
998 1600 104 (The ) 111 SB
1109 1600 127 (main ) 135 SB
1244 1600 104 (tool ) 112 SB
1356 1600 81 (for ) 89 SB
1445 1600 247 (sequential ) 255 SB
1700 1600 261 (processing ) 269 SB
1969 1600 53 (is ) 61 SB
2030 1600 70 (the) 70 SB
375 1700 266 (PROCESS.) 266 SB
300 1900 315 (4.4 Processes) 315 SB
/fm 256 def
314 2 300 1959 B
1 F
n
450 2000 242 (Processes ) 248 SB
698 2000 86 (are ) 93 SB
791 2000 85 (the ) 92 SB
883 2000 134 (basic ) 141 SB
1024 2000 102 (unit ) 109 SB
1133 2000 62 (of ) 69 SB
1202 2000 256 (behavioral ) 263 SB
1465 2000 308 (descriptions. ) 315 SB
1780 2000 15 ( ) 22 SB
1802 2000 56 (A ) 63 SB
1865 2000 190 (process ) 197 SB
2062 2000 38 (is) 38 SB
375 2100 265 (considered ) 278 SB
653 2100 41 (a ) 55 SB
708 2100 147 (series ) 161 SB
869 2100 62 (of ) 76 SB
945 2100 247 (sequential ) 261 SB
1206 2100 258 (statements ) 272 SB
1478 2100 154 (which ) 168 SB
1646 2100 250 (represents ) 264 SB
1910 2100 41 (a ) 55 SB
1965 2100 135 (single) 135 SB
375 2200 155 (action ) 160 SB
535 2200 162 (during ) 167 SB
702 2200 268 (simulation. ) 273 SB
975 2200 15 ( ) 20 SB
995 2200 175 (During ) 180 SB
1175 2200 268 (simulation, ) 273 SB
1448 2200 85 (the ) 90 SB
1538 2200 190 (process ) 195 SB
1733 2200 214 (executes ) 219 SB
1952 2200 117 (until ) 122 SB
2074 2200 26 (a) 26 SB
375 2300 114 (wait ) 121 SB
496 2300 235 (statement ) 243 SB
739 2300 63 (or ) 71 SB
810 2300 85 (the ) 93 SB
903 2300 98 (end ) 106 SB
1009 2300 62 (of ) 70 SB
1079 2300 190 (process ) 198 SB
1277 2300 53 (is ) 61 SB
1338 2300 210 (reached, ) 218 SB
1556 2300 97 (this ) 105 SB
1661 2300 53 (is ) 61 SB
1722 2300 71 (all ) 79 SB
1801 2300 265 (considered ) 273 SB
2074 2300 26 (a) 26 SB
375 2400 150 (single ) 153 SB
528 2400 260 (concurrent ) 263 SB
791 2400 170 (action. ) 173 SB
964 2400 15 ( ) 18 SB
982 2400 242 (Processes ) 245 SB
1227 2400 86 (are ) 89 SB
1316 2400 173 (treated ) 177 SB
1493 2400 64 (as ) 68 SB
1561 2400 243 (individual ) 247 SB
1808 2400 292 (components,) 292 SB
375 2500 113 (they ) 119 SB
494 2500 123 (have ) 129 SB
623 2500 165 (access ) 171 SB
794 2500 60 (to ) 66 SB
860 2500 85 (the ) 91 SB
951 2500 131 (ports ) 137 SB
1088 2500 98 (and ) 104 SB
1192 2500 173 (signals ) 179 SB
1371 2500 211 (declared ) 217 SB
1588 2500 58 (in ) 64 SB
1652 2500 85 (the ) 91 SB
1743 2500 159 (entity, ) 165 SB
1908 2500 88 (but ) 95 SB
2003 2500 97 (may) 97 SB
375 2600 108 (also ) 111 SB
486 2600 123 (have ) 126 SB
612 2600 119 (their ) 123 SB
735 2600 114 (own ) 118 SB
853 2600 126 (local ) 130 SB
983 2600 237 (variables, ) 241 SB
1224 2600 245 (constants, ) 249 SB
1473 2600 137 (types ) 141 SB
1614 2600 98 (and ) 102 SB
1716 2600 326 (subprograms. ) 330 SB
2046 2600 15 ( ) 19 SB
2065 2600 35 (It) 35 SB
375 2700 53 (is ) 59 SB
434 2700 236 (important ) 242 SB
676 2700 60 (to ) 66 SB
742 2700 168 (realize ) 174 SB
916 2700 101 (that ) 107 SB
1023 2700 41 (a ) 47 SB
1070 2700 190 (process ) 197 SB
1267 2700 102 (will ) 109 SB
1376 2700 90 (run ) 97 SB
1473 2700 117 (until ) 124 SB
1597 2700 41 (a ) 48 SB
1645 2700 230 (condition ) 237 SB
1882 2700 166 (occurs ) 173 SB
2055 2700 45 (to) 45 SB
375 2800 1177 (cause it to halt execution.  It is possible to set up a ) 1178 SB
1553 2800 190 (process ) 191 SB
1744 2800 60 (to ) 61 SB
1805 2800 90 (run ) 91 SB
1896 2800 204 (infinitely) 204 SB
375 2900 189 (without ) 202 SB
577 2900 249 (advancing ) 262 SB
839 2900 130 (time. ) 143 SB
982 2900 15 ( ) 28 SB
1010 2900 116 (This ) 129 SB
1139 2900 158 (would ) 171 SB
1310 2900 144 (cause ) 157 SB
1467 2900 85 (the ) 98 SB
1565 2900 229 (simulator ) 242 SB
1807 2900 60 (to ) 73 SB
1880 2900 136 (cycle ) 150 SB
2030 2900 70 (the) 70 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 27 27
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (27) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 190 (process ) 195 SB
570 300 116 (with ) 121 SB
691 300 72 (no ) 78 SB
769 300 127 (error ) 133 SB
902 300 239 (generated ) 245 SB
1147 300 63 (or ) 69 SB
1216 300 212 (anything ) 218 SB
1434 300 195 (actually ) 201 SB
1635 300 251 (simulated. ) 257 SB
1892 300 15 ( ) 21 SB
1913 300 187 (Another) 187 SB
375 400 116 (very ) 120 SB
495 400 236 (important ) 240 SB
735 400 132 (point ) 136 SB
871 400 53 (is ) 58 SB
929 400 101 (that ) 106 SB
1035 400 133 (since ) 138 SB
1173 400 239 (processes ) 244 SB
1417 400 191 (execute ) 196 SB
1613 400 290 (sequentially ) 295 SB
1908 400 117 (until ) 122 SB
2030 400 70 (the) 70 SB
375 500 98 (end ) 107 SB
482 500 62 (of ) 71 SB
553 500 85 (the ) 94 SB
647 500 205 (process, ) 214 SB
861 500 115 (only ) 124 SB
985 500 85 (the ) 94 SB
1079 500 95 (last ) 104 SB
1183 500 150 (signal ) 159 SB
1342 500 271 (assignment ) 280 SB
1622 500 60 (to ) 69 SB
1691 500 41 (a ) 50 SB
1741 500 140 (given ) 150 SB
1891 500 161 (output ) 171 SB
2062 500 38 (is) 38 SB
375 600 930 (made.  For example, the following code:) 930 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
540 742 720 (c <= a AND b AFTER 0 ns;) 720 SB
540 792 720 (c <= d OR e AFTER 10 ns;) 720 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
600 900 540 (would be equivalent to:) 540 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
540 1067 270 (c <= d OR) 270 SB
810 1067 450 ( e AFTER 10 ns;) 450 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
831 1200 737 (Listing 19. Process Equivalence) 737 SB
450 1300 104 (The ) 107 SB
557 1300 106 (first ) 109 SB
666 1300 271 (assignment ) 274 SB
940 1300 60 (to ) 63 SB
1003 1300 41 (c ) 44 SB
1047 1300 53 (is ) 56 SB
1103 1300 113 (lost. ) 116 SB
1219 1300 104 (The ) 107 SB
1326 1300 190 (original ) 193 SB
1519 1300 209 (meaning ) 213 SB
1732 1300 60 (to ) 64 SB
1796 1300 230 (multiplex ) 234 SB
2030 1300 70 (the) 70 SB
375 1400 161 (output ) 164 SB
539 1400 41 (c ) 44 SB
583 1400 116 (with ) 119 SB
702 1400 85 (the ) 88 SB
790 1400 102 (two ) 105 SB
895 1400 258 (statements ) 261 SB
1156 1400 92 (has ) 96 SB
1252 1400 124 (been ) 128 SB
1380 1400 113 (lost. ) 117 SB
1497 1400 15 ( ) 19 SB
1516 1400 104 (The ) 108 SB
1624 1400 161 (option ) 165 SB
1789 1400 60 (to ) 64 SB
1853 1400 173 (restore ) 177 SB
2030 1400 70 (the) 70 SB
375 1500 190 (original ) 219 SB
594 1500 209 (meaning ) 238 SB
832 1500 158 (would ) 187 SB
1019 1500 70 (be ) 99 SB
1118 1500 60 (to ) 89 SB
1207 1500 92 (use ) 121 SB
1328 1500 220 (transport ) 249 SB
1577 1500 162 (delays ) 191 SB
1768 1500 63 (or ) 93 SB
1861 1500 139 (make ) 169 SB
2030 1500 70 (the) 70 SB
375 1600 1423 (assignments separately and OR the results together, the latter ) 1424 SB
1799 1600 141 (being ) 142 SB
1941 1600 41 (a ) 42 SB
1983 1600 117 (more) 117 SB
375 1700 519 (realistic interpretation.) 519 SB
300 1900 583 (4.4.1 Sensitive Processes) 583 SB
0 0 0 fC
/fm 256 def
582 2 300 1959 B
1 F
n
450 2000 56 (A ) 57 SB
507 2000 215 (sensitive ) 216 SB
723 2000 190 (process ) 191 SB
914 2000 53 (is ) 54 SB
968 2000 98 (one ) 99 SB
1067 2000 154 (which ) 155 SB
1222 2000 106 (isn't ) 108 SB
1330 2000 223 (activated ) 225 SB
1555 2000 117 (until ) 119 SB
1674 2000 41 (a ) 43 SB
1717 2000 230 (transition ) 232 SB
1949 2000 151 (occurs) 151 SB
375 2100 72 (on ) 77 SB
452 2100 41 (a ) 46 SB
498 2100 150 (signal ) 155 SB
653 2100 139 (listed ) 145 SB
798 2100 58 (in ) 64 SB
862 2100 85 (the ) 91 SB
953 2100 248 (sensitivity ) 254 SB
1207 2100 99 (list. ) 105 SB
1312 2100 15 ( ) 21 SB
1333 2100 116 (This ) 122 SB
1455 2100 114 (type ) 120 SB
1575 2100 62 (of ) 68 SB
1643 2100 190 (process ) 196 SB
1839 2100 53 (is ) 59 SB
1898 2100 130 (good ) 136 SB
2034 2100 66 (for) 66 SB
375 2200 330 (asynchronous ) 333 SB
708 2200 307 (components, ) 310 SB
1018 2200 88 (but ) 92 SB
1110 2200 88 (not ) 92 SB
1202 2200 116 (very ) 120 SB
1322 2200 130 (good ) 134 SB
1456 2200 81 (for ) 85 SB
1541 2200 304 (synchronous ) 308 SB
1849 2200 136 (ones. ) 140 SB
1989 2200 15 ( ) 19 SB
2008 2200 50 (It ) 54 SB
2062 2200 38 (is) 38 SB
375 2300 236 (important ) 243 SB
618 2300 60 (to ) 67 SB
685 2300 129 (note, ) 136 SB
821 2300 48 (if ) 55 SB
876 2300 41 (a ) 48 SB
924 2300 215 (sensitive ) 222 SB
1146 2300 190 (process ) 197 SB
1343 2300 53 (is ) 60 SB
1403 2300 136 (used, ) 143 SB
1546 2300 114 (wait ) 121 SB
1667 2300 258 (statements ) 266 SB
1933 2300 86 (are ) 94 SB
2027 2300 73 (not) 73 SB
375 2400 793 (allowed and will result in an error.) 793 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2542 390 (PROCESS\(a, b\)) 390 SB
465 2592 150 (BEGIN) 150 SB
540 2642 900 (c <= NOT\(a AND b\) AFTER delay;) 900 SB
465 2692 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
730 2800 939 (Listing 20. Sensitive Process \(nand gate\)) 939 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 28 28
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (28) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 104 (The ) 105 SB
555 300 153 (above ) 154 SB
709 300 190 (process ) 192 SB
901 300 158 (would ) 160 SB
1061 300 194 (activate ) 196 SB
1257 300 57 (on) 57 SB
1314 300 58 (ly ) 60 SB
1374 300 139 (when ) 141 SB
1515 300 41 (a ) 43 SB
1558 300 230 (transition ) 232 SB
1790 300 63 (\(0 ) 65 SB
1855 300 67 (-> ) 69 SB
1924 300 44 (1 ) 46 SB
1970 300 63 (or ) 65 SB
2035 300 44 (1 ) 46 SB
2081 300 19 (-) 19 SB
375 400 48 (> ) 52 SB
427 400 63 (0\) ) 67 SB
494 400 166 (occurs ) 170 SB
664 400 72 (on ) 76 SB
740 400 85 (the ) 89 SB
829 400 41 (a ) 45 SB
874 400 63 (or ) 67 SB
941 400 44 (b ) 48 SB
989 400 188 (signals. ) 192 SB
1181 400 15 ( ) 19 SB
1200 400 152 (When ) 156 SB
1356 400 145 (either ) 149 SB
1505 400 150 (signal ) 154 SB
1659 400 229 (switches, ) 233 SB
1892 400 41 (c ) 46 SB
1938 400 102 (will ) 107 SB
2045 400 55 (be) 55 SB
375 500 1133 (assigned NOT\(a AND b\) AFTER a delay period.) 1133 SB
300 675 652 (4.4.2 Non-Sensitive Process) 652 SB
0 0 0 fC
/fm 256 def
651 2 300 734 B
1 F
n
450 775 56 (A ) 59 SB
509 775 190 (process ) 193 SB
702 775 154 (which ) 158 SB
860 775 175 (doesn't ) 179 SB
1039 775 183 (contain ) 187 SB
1226 775 41 (a ) 45 SB
1271 775 248 (sensitivity ) 252 SB
1523 775 84 (list ) 88 SB
1611 775 53 (is ) 57 SB
1668 775 130 (good ) 134 SB
1802 775 81 (for ) 85 SB
1887 775 213 (modeling) 213 SB
375 875 304 (synchronous ) 313 SB
688 875 254 (processes. ) 263 SB
951 875 15 ( ) 24 SB
975 875 104 (The ) 113 SB
1088 875 166 (reason ) 175 SB
1263 875 81 (for ) 91 SB
1354 875 112 (this, ) 122 SB
1476 875 53 (is ) 63 SB
1539 875 101 (that ) 111 SB
1650 875 83 (we ) 93 SB
1743 875 95 (can ) 105 SB
1848 875 92 (use ) 102 SB
1950 875 41 (a ) 51 SB
2001 875 99 (wait) 99 SB
375 975 250 (statement, ) 254 SB
629 975 165 (WAIT ) 169 SB
798 975 187 (UNTIL ) 191 SB
989 975 338 (clock'EVENT ) 342 SB
1331 975 98 (and ) 103 SB
1434 975 140 (clock ) 145 SB
1579 975 48 (= ) 53 SB
1632 975 77 ('1', ) 82 SB
1714 975 15 ( ) 20 SB
1734 975 154 (which ) 159 SB
1893 975 102 (will ) 107 SB
2000 975 100 (only) 100 SB
375 1075 70 (be ) 74 SB
449 1075 104 (true ) 108 SB
557 1075 72 (on ) 76 SB
633 1075 85 (the ) 89 SB
722 1075 143 (rising ) 147 SB
869 1075 124 (edge ) 128 SB
997 1075 62 (of ) 66 SB
1063 1075 41 (a ) 45 SB
1108 1075 155 (clock. ) 159 SB
1267 1075 15 ( ) 19 SB
1286 1075 56 (A ) 60 SB
1346 1075 215 (sensitive ) 220 SB
1566 1075 190 (process ) 195 SB
1761 1075 158 (would ) 163 SB
1924 1075 176 (execute) 176 SB
375 1175 72 (on ) 102 SB
477 1175 117 (both ) 147 SB
624 1175 85 (the ) 115 SB
739 1175 143 (rising ) 173 SB
912 1175 98 (and ) 129 SB
1041 1175 160 (falling ) 191 SB
1232 1175 140 (clock ) 171 SB
1403 1175 162 (edges. ) 193 SB
1596 1175 15 ( ) 46 SB
1642 1175 56 (A ) 87 SB
1729 1175 203 (function ) 234 SB
1963 1175 137 (called) 137 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
375 1276 435 (rising_edge\(clock\)) 435 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
810 1275 15 ( ) 17 SB
827 1275 53 (is ) 55 SB
882 1275 136 (used, ) 138 SB
1020 1275 46 (it ) 48 SB
1068 1275 53 (is ) 55 SB
1123 1275 252 (equivalent ) 254 SB
1377 1275 60 (to ) 62 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1439 1276 344 (\(clock'EVENT ) 347 SB
1786 1276 131 (AND ) 134 SB
1920 1276 138 (clock ) 141 SB
2061 1276 39 (=) 39 SB
375 1376 74 ('1'\)) 74 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
449 1375 129 (. See ) 130 SB
579 1375 178 (section ) 179 SB
758 1375 132 (2.2.3 ) 133 SB
891 1375 72 (on ) 73 SB
964 1375 229 (attributes ) 230 SB
1194 1375 81 (for ) 82 SB
1276 1375 132 (more ) 133 SB
1409 1375 296 (information. ) 297 SB
1706 1375 15 ( ) 16 SB
1722 1375 104 (The ) 105 SB
1827 1375 234 (following ) 235 SB
2062 1375 38 (is) 38 SB
375 1475 1132 (an example of a process without a sensitivity list:) 1132 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1617 210 (PROCESS) 210 SB
465 1667 150 (BEGIN) 150 SB
540 1717 960 (WAIT UNTIL \(rising_edge\(clock\)\);) 960 SB
540 1767 570 (q <= d AFTER delay;) 570 SB
540 1817 750 (qb <= NOT\(d\) AFTER delay;) 750 SB
465 1867 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
712 1975 976 (Listing 21. Process Example \(D Flip Flop\)) 976 SB
300 2150 995 (4.4.3 Important Notes Regarding Synthesis) 995 SB
/fm 256 def
994 2 300 2209 B
1 F
n
450 2250 50 (It ) 51 SB
501 2250 53 (is ) 54 SB
555 2250 41 (a ) 42 SB
597 2250 130 (good ) 131 SB
728 2250 111 (idea ) 112 SB
840 2250 60 (to ) 61 SB
901 2250 231 (introduce ) 232 SB
1133 2250 85 (the ) 86 SB
1219 2250 111 (idea ) 112 SB
1331 2250 62 (of ) 63 SB
1394 2250 225 (synthesis ) 226 SB
1620 2250 57 (at ) 58 SB
1678 2250 97 (this ) 98 SB
1776 2250 147 (point. ) 148 SB
1924 2250 15 ( ) 17 SB
1941 2250 159 (VHDL) 159 SB
375 2350 234 (Synthesis ) 248 SB
623 2350 127 (tools ) 141 SB
764 2350 86 (are ) 100 SB
864 2350 116 (very ) 131 SB
995 2350 210 (different ) 225 SB
1220 2350 98 (and ) 113 SB
1333 2350 121 (each ) 136 SB
1469 2350 98 (one ) 113 SB
1582 2350 92 (has ) 107 SB
1689 2350 210 (different ) 225 SB
1914 2350 126 (rules ) 141 SB
2055 2350 45 (to) 45 SB
375 2450 1563 (follow.  At this time, however, the following general rules do apply.) 1563 SB
375 2650 1692 (- Sensitive processes do not synthesize well.  Most synthesizers drop the ) 1692 SB
450 2750 332 (sensitivity list.) 332 SB
375 2850 1588 (- Use only one wait statement within a process, preferably at the top.) 1588 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 29 29
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (29) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 1495 (These general rules are good guidelines to generating processes. ) 1496 SB
1946 300 15 ( ) 16 SB
1962 300 52 (If ) 53 SB
2015 300 85 (you) 85 SB
375 400 117 (look ) 126 SB
501 400 57 (at ) 66 SB
567 400 85 (the ) 94 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
661 401 113 (wait ) 122 SB
783 401 106 (until) 106 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
889 400 15 ( ) 24 SB
913 400 241 (construct, ) 250 SB
1163 400 100 (you ) 109 SB
1272 400 95 (can ) 104 SB
1376 400 90 (see ) 99 SB
1475 400 101 (that ) 111 SB
1586 400 41 (a ) 51 SB
1637 400 215 (sensitive ) 225 SB
1862 400 190 (process ) 200 SB
2062 400 38 (is) 38 SB
375 500 187 (nothing ) 190 SB
565 500 132 (more ) 135 SB
700 500 113 (than ) 116 SB
816 500 41 (a ) 44 SB
860 500 190 (process ) 193 SB
1053 500 116 (with ) 119 SB
1172 500 41 (a ) 45 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1217 501 113 (wait ) 117 SB
1334 501 58 (on) 58 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1392 500 15 ( ) 19 SB
1411 500 235 (statement ) 239 SB
1650 500 57 (at ) 61 SB
1711 500 85 (the ) 89 SB
1800 500 104 (top. ) 108 SB
1908 500 15 ( ) 19 SB
1927 500 99 (See ) 103 SB
2030 500 70 (the) 70 SB
375 600 1185 (wait section, section 4.2.2.5,  for more information.) 1185 SB
300 800 596 (4.5 Sequential Statements) 596 SB
0 0 0 fC
/fm 256 def
595 2 300 859 B
1 F
n
450 900 104 (The ) 128 SB
578 900 125 (code ) 149 SB
727 900 154 (which ) 178 SB
905 900 162 (makes ) 186 SB
1091 900 72 (up ) 96 SB
1187 900 41 (a ) 65 SB
1252 900 190 (process ) 214 SB
1466 900 53 (is ) 77 SB
1543 900 41 (a ) 66 SB
1609 900 147 (series ) 172 SB
1781 900 62 (of ) 87 SB
1868 900 232 (sequential) 232 SB
375 1000 273 (statements. ) 278 SB
653 1000 15 ( ) 20 SB
673 1000 163 (Assert ) 168 SB
841 1000 258 (statements ) 263 SB
1104 1000 86 (are ) 91 SB
1195 1000 85 (the ) 90 SB
1285 1000 115 (only ) 120 SB
1405 1000 258 (statements ) 263 SB
1668 1000 154 (which ) 159 SB
1827 1000 86 (are ) 91 SB
1918 1000 182 (allowed) 182 SB
375 1100 1079 (in either a process or as concurrent statements.) 1079 SB
300 1300 509 (4.5.1 IF-THEN-ELSE) 509 SB
/fm 256 def
508 2 300 1359 B
1 F
n
450 1400 1650 (The if-then-else clause is used only within a process or function.  These) 1650 SB
375 1500 258 (statements ) 287 SB
662 1500 158 (would ) 187 SB
849 1500 58 (in ) 88 SB
937 1500 101 (fact ) 131 SB
1068 1500 70 (be ) 100 SB
1168 1500 296 (meaningless ) 326 SB
1494 1500 181 (outside ) 211 SB
1705 1500 62 (of ) 92 SB
1797 1500 41 (a ) 71 SB
1868 1500 232 (sequential) 232 SB
375 1600 1333 (environment.  A VHDL if statement is defined as follows:) 1333 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1742 660 (IF \(if_condition\) THEN) 660 SB
540 1792 330 (Statements_) 330 SB
870 1792 240 (if_true;) 240 SB
465 1842 870 (ELSIF \(elsif_condition\) THEN ) 870 SB
1350 1842 720 (-- more than one allowed) 720 SB
540 1892 570 (Statements_if_true;) 570 SB
1350 1892 750 (-- note spelling \(this is) 750 SB
1500 1942 270 (optional\)) 270 SB
465 1992 870 (ELSIF \(elsif_condition\) THEN ) 870 SB
1350 1992 720 (-- more than one allowed) 720 SB
540 2042 570 (Statements_if_true;) 570 SB
1350 2042 750 (-- note spelling \(this is) 750 SB
1500 2092 270 (optional\)) 270 SB
465 2142 120 (ELSE) 120 SB
1350 2142 570 (-- only one allowed) 570 SB
540 2192 330 (Statements;) 330 SB
465 2242 210 (END IF;) 210 SB
1350 2242 330 (-- required) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
714 2375 972 (Listing 22. VHDL IF-THEN-ELSE clause) 972 SB
375 2550 1720 (More than one ELSIF is allowed, but only one ELSE statement is allowed.) 1720 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 30 30
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (30) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 490 (4.5.2 Case Statement) 490 SB
0 0 0 fC
/fm 256 def
489 2 300 359 B
1 F
n
450 400 104 (The ) 128 SB
578 400 116 (case ) 140 SB
718 400 235 (statement ) 259 SB
977 400 53 (is ) 77 SB
1054 400 98 (one ) 122 SB
1176 400 62 (of ) 87 SB
1263 400 85 (the ) 110 SB
1373 400 126 (most ) 151 SB
1524 400 209 (versatile ) 234 SB
1758 400 62 (of ) 87 SB
1845 400 71 (all ) 96 SB
1941 400 159 (VHDL) 159 SB
375 500 273 (statements. ) 287 SB
662 500 15 ( ) 29 SB
691 500 50 (It ) 64 SB
755 500 92 (has ) 106 SB
861 500 140 (many ) 154 SB
1015 500 130 (uses, ) 144 SB
1159 500 85 (the ) 100 SB
1259 500 218 (foremost ) 233 SB
1492 500 141 (being ) 156 SB
1648 500 101 (that ) 116 SB
1764 500 46 (it ) 61 SB
1825 500 53 (is ) 68 SB
1893 500 126 (ideal ) 141 SB
2034 500 66 (for) 66 SB
375 600 240 (emulating ) 241 SB
616 600 122 (state ) 123 SB
739 600 245 (machines. ) 246 SB
985 600 15 ( ) 16 SB
1001 600 142 (Since ) 143 SB
1144 600 126 (most ) 127 SB
1271 600 247 (sequential ) 248 SB
1519 600 128 (logic ) 130 SB
1649 600 209 (operates ) 211 SB
1860 600 58 (in ) 60 SB
1920 600 180 (discrete) 180 SB
375 700 1252 (steps, this statement will prove to be extremely useful.) 1252 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 867 540 (CASE expression IS) 540 SB
540 917 480 (WHEN choice_1 =>) 480 SB
600 967 390 (statements_1;) 390 SB
750 1017 30 (.) 30 SB
750 1067 30 (.) 30 SB
540 1117 480 (WHEN choice_n =>) 480 SB
1200 1117 600 (-- as many as needed) 600 SB
600 1167 390 (statements_n;) 390 SB
540 1217 420 (WHEN OTHERS =>) 420 SB
1200 1217 780 (-- optional "fall through") 780 SB
600 1267 540 (statements_others;) 540 SB
465 1317 270 (END CASE;) 270 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
791 1450 818 (Listing 23. VHDL CASE statement) 818 SB
450 1625 129 (Case ) 142 SB
592 1625 258 (statements ) 271 SB
863 1625 125 (must ) 138 SB
1001 1625 70 (be ) 83 SB
1084 1625 186 (defined ) 199 SB
1283 1625 81 (for ) 95 SB
1378 1625 142 (every ) 156 SB
1534 1625 104 (poss) 104 SB
1638 1625 100 (ible ) 114 SB
1752 1625 137 (state. ) 151 SB
1903 1625 15 ( ) 29 SB
1932 1625 116 (This ) 130 SB
2062 1625 38 (is) 38 SB
375 1725 156 (where ) 172 SB
547 1725 85 (the ) 101 SB
648 1725 239 (OTHERS ) 255 SB
903 1725 165 (choice ) 181 SB
1084 1725 162 (comes ) 178 SB
1262 1725 73 (in. ) 89 SB
1351 1725 15 ( ) 31 SB
1382 1725 174 (VHDL ) 190 SB
1572 1725 137 (types ) 153 SB
1725 1725 95 (can ) 111 SB
1836 1725 123 (have ) 139 SB
1975 1725 125 (many) 125 SB
375 1825 210 (different ) 216 SB
591 1825 222 (strengths ) 228 SB
819 1825 98 (and ) 104 SB
923 1825 176 (values. ) 182 SB
1105 1825 15 ( ) 21 SB
1126 1825 94 (For ) 100 SB
1226 1825 223 (example, ) 229 SB
1455 1825 225 (std_logic ) 231 SB
1686 1825 92 (has ) 98 SB
1784 1825 44 (9 ) 50 SB
1834 1825 176 (values, ) 183 SB
2017 1825 83 (and) 83 SB
375 1925 215 (tw_logic ) 236 SB
611 1925 92 (has ) 113 SB
724 1925 73 (46 ) 94 SB
818 1925 176 (values. ) 197 SB
1015 1925 15 ( ) 36 SB
1051 1925 153 (These ) 174 SB
1225 1925 128 (logic ) 149 SB
1374 1925 197 (systems ) 218 SB
1592 1925 293 (differentiate ) 315 SB
1907 1925 193 (between) 193 SB
375 2025 851 (different strengths of ones and zeros.) 851 SB
450 2125 192 (Usually ) 206 SB
656 2125 100 (you ) 114 SB
770 2125 102 (will ) 116 SB
886 2125 127 (want ) 141 SB
1027 2125 60 (to ) 74 SB
1101 2125 96 (test ) 110 SB
1211 2125 81 (for ) 95 SB
1306 2125 158 (strong ) 172 SB
1478 2125 137 (types ) 151 SB
1629 2125 98 (and ) 113 SB
1742 2125 142 (allow ) 157 SB
1899 2125 138 (weak ) 153 SB
2052 2125 48 (or) 48 SB
375 2225 242 (undefined ) 266 SB
641 2225 137 (types ) 161 SB
802 2225 60 (to ) 84 SB
886 2225 210 (generate ) 235 SB
1121 2225 165 (errors. ) 190 SB
1311 2225 15 ( ) 40 SB
1351 2225 104 (The ) 129 SB
1480 2225 234 (following ) 259 SB
1739 2225 116 (case ) 141 SB
1880 2225 220 (statement) 220 SB
375 2325 376 (exemplifies this:) 376 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2467 210 (PROCESS) 210 SB
540 2517 1470 (VARIABLE switcher : std_logic_vector\(1 DOWNTO 0\);) 1470 SB
465 2567 150 (BEGIN) 150 SB
540 2617 480 (CASE switcher IS) 480 SB
600 2667 180 (WHEN ") 180 SB
780 2667 180 (00" =>) 180 SB
750 2717 360 (ASSERT FALSE) 360 SB
1200 2717 510 (-- always execute) 510 SB
900 2767 450 (REPORT "case 0") 450 SB
1050 2817 420 (SEVERITY note;) 420 SB
600 2867 360 (WHEN "01" =>) 360 SB
750 2917 360 (ASSERT FALSE) 360 SB
1200 2917 510 (-- always execute) 510 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 31 31
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (31) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
900 267 450 (REPORT "case 1") 450 SB
1050 317 420 (SEVERITY note;) 420 SB
600 367 360 (WHEN "10" =>) 360 SB
750 417 360 (ASSERT FALSE) 360 SB
1200 417 510 (-- always execute) 510 SB
900 467 450 (REPORT "case 2") 450 SB
1050 517 420 (SEVERITY note;) 420 SB
600 567 360 (WHEN "11" =>) 360 SB
750 617 360 (ASSERT FALSE) 360 SB
1200 617 510 (-- always execute) 510 SB
900 667 450 (REPORT "case 3") 450 SB
1050 717 420 (SEVERITY note;) 420 SB
600 767 420 (WHEN OTHERS =>) 420 SB
750 817 360 (ASSERT FALSE) 360 SB
1200 817 510 (-- always execute) 510 SB
900 867 990 (REPORT "invalid state, undefined") 990 SB
1050 917 450 (SEVERITY error;) 450 SB
540 967 270 (END CASE;) 270 SB
465 1017 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
774 1150 852 (Listing 24. CASE statement example) 852 SB
300 1300 920 (Now for a finite state machine example:) 920 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1442 210 (PROCESS) 210 SB
540 1492 1470 (VARIABLE state : integer :=0; -- start at state 0) 1470 SB
465 1542 150 (BEGIN) 150 SB
540 1592 1260 (WAIT UNTIL \(rising_edge\(clock\)\); -- make a) 1260 SB
1350 1642 660 (-- synchronous process) 660 SB
540 1692 390 (CASE state IS) 390 SB
600 1742 780 (WHEN 0 => -- initial state) 780 SB
750 1792 390 (reset <= '0';) 390 SB
1200 1792 690 (-- <= signal assignment) 690 SB
750 1842 330 (state := 1;) 330 SB
1200 1842 900 (-- := is a variable assignment) 900 SB
600 1892 600 (WHEN 1 => -- state 1) 600 SB
750 1942 390 (reset <= '1';) 390 SB
750 1992 570 (input <= "0010100";) 570 SB
750 2042 330 (state := 2;) 330 SB
600 2092 270 (WHEN 2 =>) 270 SB
750 2142 330 (run <= '0';) 330 SB
750 2192 330 (state := 3;) 330 SB
600 2242 420 (WHEN OTHERS =>) 420 SB
1050 2242 210 (-- done) 210 SB
750 2292 30 (A) 30 SB
780 2292 330 (SSERT FALSE) 330 SB
900 2342 390 (REPORT "done") 390 SB
1050 2392 420 (SEVERITY note;) 420 SB
540 2442 270 (END CASE;) 270 SB
465 2492 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
726 2625 948 (Listing 25. Finite State Machine example) 948 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 32 32
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (32) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 300 104 (The ) 110 SB
560 300 114 (wait ) 120 SB
680 300 235 (statement ) 241 SB
921 300 58 (in ) 64 SB
985 300 85 (the ) 91 SB
1076 300 153 (above ) 159 SB
1235 300 190 (process ) 196 SB
1431 300 162 (makes ) 168 SB
1599 300 46 (it ) 53 SB
1652 300 304 (synchronous ) 311 SB
1963 300 60 (to ) 67 SB
2030 300 70 (the) 70 SB
375 400 1077 (rising edge of the clock.  We define a variable ) 1078 SB
1453 400 137 (state, ) 138 SB
1591 400 154 (which ) 155 SB
1746 400 53 (is ) 54 SB
1800 400 121 (used ) 122 SB
1922 400 60 (to ) 61 SB
1983 400 117 (point) 117 SB
375 500 60 (to ) 66 SB
441 500 85 (the ) 91 SB
532 500 113 (next ) 119 SB
651 500 122 (state ) 128 SB
779 500 62 (of ) 68 SB
847 500 85 (the ) 91 SB
938 500 222 (machine. ) 228 SB
1166 500 15 ( ) 21 SB
1187 500 50 (It ) 56 SB
1243 500 53 (is ) 59 SB
1302 500 241 (initialized ) 247 SB
1549 500 60 (to ) 67 SB
1616 500 59 (0, ) 66 SB
1682 500 120 (such ) 127 SB
1809 500 101 (that ) 108 SB
1917 500 85 (the ) 92 SB
2009 500 91 (first) 91 SB
375 600 122 (state ) 127 SB
502 600 102 (will ) 108 SB
610 600 70 (be ) 76 SB
686 600 139 (equal ) 145 SB
831 600 60 (to ) 66 SB
897 600 44 (0 ) 50 SB
947 600 98 (and ) 104 SB
1051 600 113 (then ) 119 SB
1170 600 83 (we ) 89 SB
1259 600 102 (will ) 108 SB
1367 600 109 (step ) 115 SB
1482 600 191 (through ) 197 SB
1679 600 142 (every ) 148 SB
1827 600 143 (rising ) 149 SB
1976 600 124 (edge,) 124 SB
375 700 199 (because ) 211 SB
586 700 83 (we ) 95 SB
681 700 177 (change ) 189 SB
870 700 85 (the ) 97 SB
967 700 122 (state ) 134 SB
1101 700 199 (variable ) 211 SB
1312 700 60 (to ) 72 SB
1384 700 132 (point ) 144 SB
1528 700 60 (to ) 72 SB
1600 700 85 (the ) 97 SB
1697 700 113 (next ) 125 SB
1822 700 137 (state. ) 149 SB
1971 700 15 ( ) 28 SB
1999 700 50 (It ) 63 SB
2062 700 38 (is) 38 SB
375 800 236 (important ) 243 SB
618 800 60 (to ) 67 SB
685 800 129 (note, ) 136 SB
821 800 115 (only ) 122 SB
943 800 98 (one ) 105 SB
1048 800 188 (WHEN ) 195 SB
1243 800 159 (clause ) 166 SB
1409 800 102 (will ) 109 SB
1518 800 70 (be ) 78 SB
1596 800 220 (executed ) 228 SB
1824 800 162 (during ) 170 SB
1994 800 106 (each) 106 SB
375 900 1048 (cycle, this is in fact what allows us to do this.) 1048 SB
300 1100 324 (4.5.3 Looping) 324 SB
0 0 0 fC
/fm 256 def
323 2 300 1159 B
1 F
n
450 1200 174 (VHDL ) 180 SB
630 1200 213 (provides ) 219 SB
849 1200 303 (functionality ) 309 SB
1158 1200 81 (for ) 87 SB
1245 1200 188 (looping ) 194 SB
1439 1200 116 (with ) 123 SB
1562 1200 102 (two ) 109 SB
1671 1200 264 (constructs, ) 271 SB
1942 1200 85 (the ) 92 SB
2034 1200 66 (for) 66 SB
375 1300 1339 (loop and the while loop.  Each loop type has its own uses.) 1339 SB
300 1500 495 (4.5.3.1 The For Loop) 495 SB
/fm 256 def
494 2 300 1559 B
1 F
n
450 1600 94 (For ) 95 SB
545 1600 140 (loops ) 141 SB
686 1600 86 (are ) 87 SB
773 1600 153 (useful ) 154 SB
927 1600 81 (for ) 82 SB
1009 1600 209 (stepping ) 210 SB
1219 1600 305 (sequentially. ) 306 SB
1525 1600 149 (There ) 150 SB
1675 1600 86 (are ) 87 SB
1762 1600 41 (a ) 42 SB
1804 1600 101 (few ) 102 SB
1906 1600 126 (rules ) 128 SB
2034 1600 66 (for) 66 SB
375 1700 788 (using a FOR statement.  They are:) 788 SB
375 1900 820 (- Can't manipulate the loop variable) 820 SB
375 2000 544 (- Can only step by ones) 544 SB
375 2100 1026 (- You don't need to declare the loop variable) 1026 SB
375 2300 31 (F) 31 SB
406 2300 63 (or ) 80 SB
486 2300 140 (loops ) 157 SB
643 2300 86 (are ) 103 SB
746 2300 132 (more ) 149 SB
895 2300 174 (limited ) 192 SB
1087 2300 113 (than ) 131 SB
1218 2300 141 (while ) 159 SB
1377 2300 155 (loops, ) 173 SB
1550 2300 213 (however ) 231 SB
1781 2300 113 (they ) 131 SB
1912 2300 86 (are ) 104 SB
2016 2300 84 (still) 84 SB
375 2400 221 (powerful.) 221 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2542 750 (FOR i in 10 DOWNTO 0 LOOP) 750 SB
540 2592 390 (a\(i\) <= b\(i\);) 390 SB
465 2642 270 (END LOOP;) 270 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
850 2750 699 (Listing 26. FOR loop example) 699 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 33 33
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (33) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 455 (4.5.3.2 While loops) 455 SB
0 0 0 fC
/fm 256 def
454 2 300 359 B
1 F
n
450 400 154 (While ) 159 SB
609 400 140 (loops ) 145 SB
754 400 142 (allow ) 147 SB
901 400 100 (you ) 105 SB
1006 400 60 (to ) 65 SB
1071 400 117 (loop ) 122 SB
1193 400 141 (while ) 146 SB
1339 400 85 (the ) 90 SB
1429 400 230 (condition ) 235 SB
1664 400 53 (is ) 58 SB
1722 400 119 (true, ) 124 SB
1846 400 98 (and ) 103 SB
1949 400 60 (to ) 66 SB
2015 400 85 (exit) 85 SB
375 500 85 (the ) 91 SB
466 500 117 (loop ) 123 SB
589 500 139 (when ) 145 SB
734 500 85 (the ) 91 SB
825 500 230 (condition ) 236 SB
1061 500 217 (becomes ) 223 SB
1284 500 138 (false. ) 144 SB
1428 500 15 ( ) 21 SB
1449 500 154 (While ) 160 SB
1609 500 140 (loops ) 147 SB
1756 500 140 (differ ) 147 SB
1903 500 124 (from ) 131 SB
2034 500 66 (for) 66 SB
375 600 651 (loops in the following ways:) 651 SB
375 800 34 (- ) 57 SB
432 800 104 (The ) 127 SB
559 800 117 (loop ) 141 SB
700 800 199 (variable ) 223 SB
923 800 147 (needs ) 171 SB
1094 800 60 (to ) 84 SB
1178 800 70 (be ) 94 SB
1272 800 296 (manipulated ) 320 SB
1592 800 72 (by ) 96 SB
1688 800 85 (the ) 109 SB
1797 800 223 (program, ) 247 SB
2044 800 56 (all) 56 SB
375 900 280 (increments, ) 290 SB
665 900 277 (decrements ) 287 SB
952 900 63 (or ) 73 SB
1025 900 200 (changes ) 210 SB
1235 900 60 (to ) 70 SB
1305 900 85 (the ) 95 SB
1400 900 199 (variable ) 209 SB
1609 900 125 (must ) 136 SB
1745 900 139 (come ) 150 SB
1895 900 124 (from ) 135 SB
2030 900 70 (the) 70 SB
375 1000 486 (code within the loop.) 486 SB
375 1100 34 (- ) 41 SB
416 1100 208 (Because ) 215 SB
631 1100 62 (of ) 69 SB
700 1100 85 (the ) 92 SB
792 1100 168 (above, ) 175 SB
967 1100 85 (the ) 92 SB
1059 1100 199 (variable ) 206 SB
1265 1100 95 (can ) 102 SB
1367 1100 70 (be ) 78 SB
1445 1100 193 (stepped ) 201 SB
1646 1100 58 (in ) 66 SB
1712 1100 97 (any ) 105 SB
1817 1100 218 (direction ) 226 SB
2043 1100 57 (by) 57 SB
375 1200 239 (any count.) 239 SB
375 1300 1196 (- The loop variable must be declared in the program) 1196 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1517 300 (PROCESS\(a\)) 300 SB
540 1567 930 (VARIABLE looper : integer := 0;) 930 SB
465 1617 150 (BEGIN) 150 SB
540 1667 630 (WHILE looper < 8 LOOP) 630 SB
600 1717 690 (b\(looper\) <= a\(looper\);) 690 SB
600 1767 1470 (looper = looper + 1; -- must include to increment) 1470 SB
1200 1817 330 (-- variable) 330 SB
540 1867 270 (END LOOP;) 270 SB
465 1917 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
823 2050 754 (Listing 27. While Loop Example) 754 SB
300 2225 270 (4.5.3.3 Exit) 270 SB
/fm 256 def
269 2 300 2284 B
1 F
n
450 2325 534 (The exit statement can ) 535 SB
985 2325 70 (be ) 71 SB
1056 2325 121 (used ) 122 SB
1178 2325 60 (to ) 61 SB
1239 2325 144 (break ) 145 SB
1384 2325 88 (out ) 89 SB
1473 2325 62 (of ) 63 SB
1536 2325 41 (a ) 42 SB
1578 2325 117 (loop ) 118 SB
1696 2325 57 (at ) 58 SB
1754 2325 97 (any ) 98 SB
1852 2325 130 (time. ) 131 SB
1983 2325 15 ( ) 16 SB
1999 2325 101 (This) 101 SB
375 2425 95 (can ) 97 SB
472 2425 70 (be ) 72 SB
544 2425 153 (useful ) 155 SB
699 2425 81 (for ) 83 SB
782 2425 228 (modeling ) 230 SB
1012 2425 234 (interrupts ) 236 SB
1248 2425 58 (in ) 60 SB
1308 2425 41 (a ) 43 SB
1351 2425 238 (processor ) 240 SB
1591 2425 63 (or ) 65 SB
1656 2425 127 (error ) 129 SB
1785 2425 227 (handling. ) 229 SB
2014 2425 15 ( ) 17 SB
2031 2425 69 (An) 69 SB
375 2525 716 (example of this appears below:) 716 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
525 2667 240 (counter:) 240 SB
525 2717 210 (PROCESS) 210 SB
600 2767 690 (BEGIN\(clock, interrupt\)) 690 SB
600 2817 120 (LOOP) 120 SB
750 2867 330 (i <= i + 1;) 330 SB
750 2917 450 (WAIT FOR 10 ns;) 450 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 34 34
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (34) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
750 267 750 (IF \(interrupt = '1'\) THEN) 750 SB
900 317 150 (exit;) 150 SB
750 367 210 (END IF;) 210 SB
600 417 270 (END LOOP;) 270 SB
525 467 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
913 550 573 (Listing 28. Exit Example) 573 SB
450 650 1467 (When the loop starts, it will only stop when an interrupt occurs.) 1467 SB
300 850 236 (4.6 Assert) 236 SB
0 0 0 fC
/fm 256 def
235 2 300 909 B
1 F
n
450 950 104 (The ) 106 SB
556 950 148 (assert ) 150 SB
706 950 235 (statement ) 237 SB
943 950 165 (allows ) 167 SB
1110 950 85 (the ) 87 SB
1197 950 296 (programmer ) 299 SB
1496 950 60 (to ) 63 SB
1559 950 210 (generate ) 213 SB
1772 950 127 (error ) 130 SB
1902 950 63 (or ) 66 SB
1968 950 132 (status) 132 SB
375 1050 233 (messages ) 234 SB
609 1050 60 (to ) 61 SB
670 1050 85 (the ) 86 SB
756 1050 191 (console ) 192 SB
948 1050 162 (during ) 163 SB
1111 1050 208 (program ) 210 SB
1321 1050 252 (execution. ) 254 SB
1575 1050 15 ( ) 17 SB
1592 1050 50 (It ) 52 SB
1644 1050 53 (is ) 55 SB
1699 1050 116 (very ) 118 SB
1817 1050 236 (important ) 238 SB
2055 1050 45 (to) 45 SB
375 1150 92 (use ) 95 SB
470 1150 186 (asserts, ) 189 SB
659 1150 123 (even ) 126 SB
785 1150 48 (if ) 51 SB
836 1150 98 (just ) 101 SB
937 1150 60 (to ) 63 SB
1000 1150 72 (let ) 75 SB
1075 1150 85 (the ) 88 SB
1163 1150 111 (user ) 114 SB
1277 1150 143 (know ) 146 SB
1423 1150 101 (that ) 104 SB
1527 1150 85 (the ) 88 SB
1615 1150 208 (program ) 212 SB
1827 1150 53 (is ) 57 SB
1884 1150 216 (operating) 216 SB
375 1250 309 (successfully. ) 316 SB
691 1250 15 ( ) 22 SB
713 1250 285 (Simulations ) 293 SB
1006 1250 229 (involving ) 237 SB
1243 1250 129 (large ) 137 SB
1380 1250 98 (and ) 106 SB
1486 1250 211 (complex ) 219 SB
1705 1250 187 (designs ) 195 SB
1900 1250 95 (can ) 103 SB
2003 1250 97 (take) 97 SB
375 1350 1312 (from minutes to days to simulate, and the user should be ) 1313 SB
1688 1350 104 (told ) 105 SB
1793 1350 307 (intermittently) 307 SB
375 1450 101 (that ) 108 SB
483 1450 85 (the ) 92 SB
575 1450 125 (code ) 132 SB
707 1450 53 (is ) 61 SB
768 1450 236 (executing ) 244 SB
1012 1450 98 (and ) 106 SB
1118 1450 85 (the ) 93 SB
1211 1450 147 (status ) 155 SB
1366 1450 62 (of ) 70 SB
1436 1450 61 (it. ) 69 SB
1505 1450 15 ( ) 23 SB
1528 1450 79 (To ) 87 SB
1615 1450 113 (help ) 121 SB
1736 1450 116 (with ) 124 SB
1860 1450 85 (the ) 93 SB
1953 1450 92 (use ) 100 SB
2053 1450 47 (of) 47 SB
375 1550 186 (asserts, ) 193 SB
568 1550 130 (there ) 138 SB
706 1550 86 (are ) 94 SB
800 1550 210 (different ) 218 SB
1018 1550 148 (levels ) 156 SB
1174 1550 62 (of ) 70 SB
1244 1550 211 (severity. ) 219 SB
1463 1550 15 ( ) 23 SB
1486 1550 132 (They ) 140 SB
1626 1550 101 (are: ) 109 SB
1735 1550 143 (Note, ) 151 SB
1886 1550 214 (Warning,) 214 SB
375 1650 151 (Error, ) 160 SB
535 1650 98 (and ) 107 SB
642 1650 190 (Failure. ) 199 SB
841 1650 15 ( ) 24 SB
865 1650 186 (Asserts ) 195 SB
1060 1650 86 (are ) 95 SB
1155 1650 130 (good ) 139 SB
1294 1650 81 (for ) 91 SB
1385 1650 160 (timing ) 170 SB
1555 1650 188 (checks, ) 198 SB
1753 1650 254 (debugging ) 264 SB
2017 1650 83 (and) 83 SB
375 1750 428 (status information.) 428 SB
300 1950 469 (4.6.1 Timing checks) 469 SB
/fm 256 def
468 2 300 2009 B
1 F
n
450 2050 50 (It ) 52 SB
502 2050 53 (is ) 55 SB
557 2050 236 (important ) 238 SB
795 2050 60 (to ) 62 SB
857 2050 123 (have ) 126 SB
983 2050 130 (good ) 133 SB
1116 2050 137 (setup ) 140 SB
1256 2050 98 (and ) 101 SB
1357 2050 116 (hold ) 119 SB
1476 2050 236 (checking, ) 239 SB
1715 2050 98 (and ) 101 SB
1816 2050 171 (asserts ) 174 SB
1990 2050 110 (offer) 110 SB
375 2150 920 (a very good method for performing this:) 920 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2292 360 (setup_check:) 360 SB
465 2342 810 (PROCESS\(rising_edge\(clock\)\)) 810 SB
465 2392 150 (BEGIN) 150 SB
540 2442 1380 (ASSERT \(input'LAST_EVENT > setup_time\) -- will) 1380 SB
1350 2492 570 (-- execute if false) 570 SB
600 2542 600 (REPORT "setup error") 600 SB
750 2592 450 (SEVERITY error;) 450 SB
465 2642 360 (END PROCESS;) 360 SB
465 2692 330 (hold_check:) 330 SB
465 2742 990 (PROCESS\(clock'DELAYED\(hold_time\)\)) 990 SB
465 2792 150 (BEGIN) 150 SB
540 2842 210 (ASSERT ) 307 SB
847 2842 540 (\(input'LAST_EVENT ) 637 SB
1484 2842 60 (> ) 158 SB
1642 2842 300 (hold_time ) 398 SB
2040 2842 60 (OR) 60 SB
540 2892 630 (input'LAST_EVENT = 0\)) 630 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 35 35
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (35) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
600 267 690 (REPORT "hold violation") 690 SB
750 317 450 (SEVERITY error;) 450 SB
465 367 360 (END PROCESS;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
846 500 707 (Listing 29. ASSERT examples) 707 SB
300 600 238 (4.7 WAIT) 238 SB
0 0 0 fC
/fm 256 def
237 2 300 659 B
1 F
n
450 700 127 (Wait ) 151 SB
601 700 258 (statements ) 282 SB
883 700 86 (are ) 111 SB
994 700 121 (used ) 146 SB
1140 700 81 (for ) 106 SB
1246 700 190 (process ) 215 SB
1461 700 394 (synchronization. ) 419 SB
1880 700 15 ( ) 40 SB
1920 700 56 (A ) 81 SB
2001 700 99 (wait) 99 SB
375 800 235 (statement ) 252 SB
627 800 58 (in ) 76 SB
703 800 41 (a ) 59 SB
762 800 190 (process ) 208 SB
970 800 167 (causes ) 185 SB
1155 800 85 (the ) 103 SB
1258 800 190 (process ) 208 SB
1466 800 60 (to ) 78 SB
1544 800 201 (suspend ) 219 SB
1763 800 117 (until ) 135 SB
1898 800 85 (the ) 103 SB
2001 800 99 (wait) 99 SB
375 900 235 (statement ) 236 SB
611 900 217 (becomes ) 218 SB
829 900 119 (true. ) 120 SB
949 900 15 ( ) 16 SB
965 900 224 (Sensitive ) 225 SB
1190 900 239 (processes ) 240 SB
1430 900 184 (already ) 185 SB
1615 900 123 (have ) 125 SB
1740 900 69 (an ) 71 SB
1811 900 189 (implicit ) 191 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
2002 901 98 (wait) 98 SB
375 1001 58 (on) 58 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
433 1000 15 ( ) 20 SB
453 1000 235 (statement ) 240 SB
693 1000 98 (and ) 103 SB
796 1000 168 (cannot ) 173 SB
969 1000 183 (contain ) 188 SB
1157 1000 41 (a ) 46 SB
1203 1000 114 (wait ) 119 SB
1322 1000 250 (statement. ) 255 SB
1577 1000 15 ( ) 20 SB
1597 1000 149 (There ) 154 SB
1751 1000 86 (are ) 91 SB
1842 1000 130 (three ) 136 SB
1978 1000 122 (types) 122 SB
375 1100 655 (of wait statements available.) 655 SB
375 1300 34 (- ) 34 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
409 1301 171 (wait on) 171 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
580 1300 946 (, wait until a transition occurs on a signal) 946 SB
375 1400 34 (- ) 34 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
409 1401 219 (wait until) 219 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
628 1400 919 (, waits until a specified condition is true) 919 SB
375 1500 34 (- ) 34 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
409 1501 181 (wait for) 181 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
590 1500 669 (, wait a specified time period) 669 SB
450 1700 104 (The ) 105 SB
555 1700 153 (above ) 154 SB
709 1700 137 (types ) 138 SB
847 1700 95 (can ) 96 SB
943 1700 70 (be ) 71 SB
1014 1700 240 (combined ) 241 SB
1255 1700 60 (to ) 61 SB
1316 1700 124 (form ) 125 SB
1441 1700 211 (complex ) 212 SB
1653 1700 114 (wait ) 115 SB
1768 1700 273 (statements. ) 274 SB
2042 1700 15 ( ) 17 SB
2059 1700 41 (A) 41 SB
375 1800 190 (process ) 200 SB
575 1800 116 (with ) 126 SB
701 1800 72 (no ) 82 SB
783 1800 114 (wait ) 124 SB
907 1800 235 (statement ) 246 SB
1153 1800 63 (or ) 74 SB
1227 1800 248 (sensitivity ) 259 SB
1486 1800 84 (list ) 95 SB
1581 1800 102 (will ) 113 SB
1694 1800 70 (be ) 81 SB
1775 1800 185 (flagged ) 196 SB
1971 1800 64 (as ) 75 SB
2046 1800 54 (an) 54 SB
375 1900 1236 (error, as it would loop infinitely with no time passing.) 1236 SB
300 2100 484 (4.7.1 Wait Examples) 484 SB
/fm 256 def
483 2 300 2159 B
1 F
n
450 2200 104 (The ) 121 SB
571 2200 234 (following ) 251 SB
822 2200 86 (are ) 103 SB
925 2200 210 (different ) 227 SB
1152 2200 206 (versions ) 223 SB
1375 2200 62 (of ) 79 SB
1454 2200 85 (the ) 102 SB
1556 2200 114 (wait ) 131 SB
1687 2200 235 (statement ) 253 SB
1940 2200 116 (with ) 134 SB
2074 2200 26 (a) 26 SB
375 2300 645 (description of what they do.) 645 SB
375 2500 166 (WAIT;) 166 SB
/fm 256 def
165 2 375 2559 B
1 F
n
450 2600 193 (Process ) 210 SB
660 2600 102 (will ) 119 SB
779 2600 191 (execute ) 208 SB
987 2600 117 (until ) 134 SB
1121 2600 97 (this ) 114 SB
1235 2600 235 (statement ) 252 SB
1487 2600 53 (is ) 70 SB
1557 2600 195 (reached ) 212 SB
1769 2600 98 (and ) 115 SB
1884 2600 113 (then ) 131 SB
2015 2600 85 (halt) 85 SB
375 2700 180 (forever.) 180 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 36 36
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (36) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 519 (WAIT ON \(a, b, ... c\);) 519 SB
0 0 0 fC
/fm 256 def
518 2 375 359 B
1 F
n
450 400 1520 (Halts on this statement until an event occurs on any of the signals.) 1520 SB
375 600 371 (WAIT UNTIL \() 371 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
746 601 250 (expression) 250 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
996 600 35 (\);) 35 SB
/fm 256 def
655 2 375 659 B
1 F
n
450 700 400 (Halts program un) 400 SB
850 700 61 (til ) 61 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
911 701 250 (expression) 250 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1161 700 336 ( becomes true.) 336 SB
375 900 402 (WAIT FOR n ns;) 402 SB
/fm 256 def
401 2 375 959 B
1 F
n
450 1000 904 (Suspends execution for n nanoseconds.) 904 SB
300 1200 393 (4.8 Subprograms) 393 SB
/fm 256 def
392 2 300 1259 B
1 F
n
450 1300 320 (Subprograms ) 326 SB
776 1300 86 (are ) 93 SB
869 1300 226 (functions ) 233 SB
1102 1300 63 (or ) 70 SB
1172 1300 269 (procedures ) 276 SB
1448 1300 154 (which ) 161 SB
1609 1300 86 (are ) 93 SB
1702 1300 152 (called ) 159 SB
1861 1300 72 (by ) 79 SB
1940 1300 41 (a ) 48 SB
1988 1300 112 (main) 112 SB
375 1400 174 (VHDL ) 192 SB
567 1400 223 (program. ) 241 SB
808 1400 15 ( ) 34 SB
842 1400 320 (Subprograms ) 339 SB
1181 1400 183 (contain ) 202 SB
1383 1400 247 (sequential ) 266 SB
1649 1400 174 (VHDL ) 193 SB
1842 1400 258 (statements,) 258 SB
375 1500 171 (similar ) 186 SB
561 1500 60 (to ) 75 SB
636 1500 254 (processes. ) 269 SB
905 1500 15 ( ) 30 SB
935 1500 119 (Like ) 134 SB
1069 1500 254 (processes, ) 269 SB
1338 1500 311 (subprograms ) 326 SB
1664 1500 112 (may ) 127 SB
1791 1500 182 (declare ) 198 SB
1989 1500 111 (local) 111 SB
375 1600 237 (variables, ) 242 SB
617 1600 230 (constants ) 235 SB
852 1600 98 (and ) 103 SB
955 1600 345 (sub-programs. ) 350 SB
1305 1600 15 ( ) 20 SB
1325 1600 320 (Subprograms ) 325 SB
1650 1600 86 (are ) 91 SB
1741 1600 88 (not ) 93 SB
1834 1600 215 (sensitive ) 221 SB
2055 1600 45 (to) 45 SB
375 1700 227 (anything, ) 240 SB
615 1700 67 (so ) 80 SB
695 1700 113 (they ) 126 SB
821 1700 102 (will ) 115 SB
936 1700 191 (execute ) 204 SB
1140 1700 58 (in ) 71 SB
1211 1700 227 (sequence ) 240 SB
1451 1700 117 (until ) 130 SB
1581 1700 240 (complete. ) 254 SB
1835 1700 15 ( ) 29 SB
1864 1700 236 (Whenever) 236 SB
375 1800 311 (subprograms ) 323 SB
698 1800 86 (are ) 98 SB
796 1800 167 (called, ) 179 SB
975 1800 119 (their ) 131 SB
1106 1800 222 (variables ) 234 SB
1340 1800 86 (are ) 98 SB
1438 1800 256 (initialized, ) 269 SB
1707 1800 156 (unlike ) 169 SB
1876 1800 224 (processes) 224 SB
375 1900 154 (which ) 167 SB
542 1900 115 (only ) 128 SB
670 1900 212 (initialize ) 225 SB
895 1900 85 (the ) 98 SB
993 1900 106 (first ) 119 SB
1112 1900 115 (time ) 128 SB
1240 1900 113 (they ) 126 SB
1366 1900 105 (run. ) 118 SB
1484 1900 15 ( ) 28 SB
1512 1900 320 (Subprograms ) 333 SB
1845 1900 86 (are ) 99 SB
1944 1900 156 (passed) 156 SB
375 2000 161 (values ) 163 SB
538 2000 191 (through ) 193 SB
731 2000 41 (a ) 43 SB
774 2000 245 (parameter ) 247 SB
1021 2000 99 (list, ) 101 SB
1122 2000 213 (however ) 215 SB
1337 2000 252 (references ) 254 SB
1591 2000 60 (to ) 62 SB
1653 2000 159 (higher ) 161 SB
1814 2000 125 (level ) 128 SB
1942 2000 158 (signals) 158 SB
375 2100 86 (are ) 90 SB
465 2100 212 (allowed. ) 216 SB
681 2100 15 ( ) 19 SB
700 2100 149 (There ) 153 SB
853 2100 53 (is ) 57 SB
910 2100 41 (a ) 45 SB
955 2100 108 (side ) 113 SB
1068 2100 145 (effect ) 150 SB
1218 2100 60 (to ) 65 SB
1283 2100 112 (this, ) 117 SB
1400 2100 101 (that ) 106 SB
1506 2100 53 (is ) 58 SB
1564 2100 101 (that ) 106 SB
1670 2100 100 (you ) 105 SB
1775 2100 112 (may ) 117 SB
1892 2100 177 (modify ) 182 SB
2074 2100 26 (a) 26 SB
375 2200 710 (signal not in the parameter list.) 710 SB
300 2400 132 (4.8.1 ) 132 SB
32 0 0 58 58 1 0 0 57 /NewCenturySchlbk-Roman /font23 ANSIFont font
432 2396 267 (Functions) 267 SB
/fm 256 def
131 2 300 2459 B
1 F
n
32 0 0 58 58 0 0 0 57 /NewCenturySchlbk-Roman /font23 ANSIFont font
450 2498 283 (Functions ) 306 SB
756 2498 160 (differ ) 183 SB
939 2498 217 (slightly ) 241 SB
1180 2498 142 (from ) 166 SB
1346 2498 366 (subprograms ) 390 SB
1736 2498 69 (in ) 93 SB
1829 2498 129 (that ) 153 SB
1982 2498 118 (they) 118 SB
375 2598 190 (return ) 206 SB
581 2598 129 (only ) 145 SB
726 2598 109 (one ) 125 SB
851 2598 161 (value ) 177 SB
1028 2598 116 (and ) 132 SB
1160 2598 143 (have ) 159 SB
1319 2598 80 (no ) 96 SB
1415 2598 123 (side ) 139 SB
1554 2598 204 (effects. ) 220 SB
1774 2598 16 ( ) 32 SB
1806 2598 58 (A ) 74 SB
1880 2598 220 (function) 220 SB
375 2698 196 (cannot ) 204 SB
579 2698 164 (affect ) 172 SB
751 2698 204 (signals ) 213 SB
964 2698 103 (not ) 112 SB
1076 2698 197 (passed ) 206 SB
1282 2698 121 (into ) 130 SB
1412 2698 103 (the ) 112 SB
1524 2698 252 (function. ) 261 SB
1785 2698 16 ( ) 25 SB
1810 2698 179 (Below ) 188 SB
1998 2698 61 (is ) 70 SB
2068 2698 32 (a) 32 SB
375 2798 1103 (small function which acts as an and gate.) 1103 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font NewCenturySchlbk-Roman
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 37 37
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (37) 42 SB
32 0 0 58 58 1 0 0 57 /NewCenturySchlbk-Roman /font23 ANSIFont font
375 298 366 (Function Call) 366 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 417 450 (c <= and\(a, b\);) 450 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 500 484 (Function Declaration) 484 SB
0 0 0 fC
/fm 256 def
483 2 375 559 B
1 F
n
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 667 270 (FUNCTION ) 293 SB
758 667 180 (and\(a ) 203 SB
961 667 60 (: ) 83 SB
1044 667 330 (std_logic, ) 354 SB
1398 667 60 (b ) 84 SB
1482 667 60 (: ) 84 SB
1566 667 330 (std_logic\) ) 354 SB
1920 667 180 (RETURN) 180 SB
540 717 300 (std_logic;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 850 340 (Function Body) 340 SB
/fm 256 def
339 2 375 909 B
1 F
n
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 992 270 (FUNCTION ) 315 SB
780 992 210 (and\(a: ) 255 SB
1035 992 330 (std_logic, ) 375 SB
1410 992 90 (b: ) 135 SB
1545 992 330 (std_logic\) ) 375 SB
1920 992 180 (RETURN) 180 SB
540 1042 360 (std_logic IS) 360 SB
540 1092 150 (BEGIN) 150 SB
600 1142 510 (RETURN \(a AND b\);) 510 SB
540 1192 240 (END and;) 240 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
860 1325 680 (Listing 30. Function Example) 680 SB
300 1500 389 (4.8.2 Procedures) 389 SB
/fm 256 def
388 2 300 1559 B
1 F
n
450 1600 56 (A ) 67 SB
517 1600 246 (procedure ) 257 SB
774 1600 106 (acts ) 117 SB
891 1600 64 (as ) 75 SB
966 1600 41 (a ) 52 SB
1018 1600 190 (process ) 201 SB
1219 1600 137 (does, ) 148 SB
1367 1600 88 (but ) 99 SB
1466 1600 165 (allows ) 176 SB
1642 1600 66 (us ) 77 SB
1719 1600 60 (to ) 72 SB
1791 1600 141 (move ) 153 SB
1944 1600 46 (it ) 58 SB
2002 1600 60 (to ) 72 SB
2074 1600 26 (a) 26 SB
375 1700 213 (common ) 227 SB
602 1700 205 (package ) 219 SB
821 1700 156 (where ) 170 SB
991 1700 46 (it ) 60 SB
1051 1700 112 (may ) 126 SB
1177 1700 70 (be ) 84 SB
1261 1700 199 (invoked ) 213 SB
1474 1700 72 (by ) 87 SB
1561 1700 97 (any ) 112 SB
1673 1700 269 (component ) 284 SB
1957 1700 58 (in ) 73 SB
2030 1700 70 (the) 70 SB
375 1800 189 (system. ) 190 SB
565 1800 15 ( ) 17 SB
582 1800 56 (A ) 58 SB
640 1800 246 (procedure ) 248 SB
888 1800 95 (can ) 97 SB
985 1800 197 ("return" ) 199 SB
1184 1800 140 (many ) 142 SB
1326 1800 176 (values, ) 178 SB
1504 1800 98 (and ) 100 SB
1604 1800 41 (a ) 43 SB
1647 1800 246 (procedure ) 248 SB
1895 1800 95 (can ) 97 SB
1992 1800 108 (have) 108 SB
375 1900 108 (side ) 109 SB
484 1900 183 (effects. ) 184 SB
668 1900 15 ( ) 16 SB
684 1900 56 (A ) 57 SB
741 1900 246 (procedure ) 247 SB
988 1900 97 (call ) 98 SB
1086 1900 140 (looks ) 141 SB
1227 1900 100 (like ) 101 SB
1328 1900 41 (a ) 42 SB
1370 1900 203 (function ) 204 SB
1574 1900 112 (call, ) 114 SB
1688 1900 213 (however ) 215 SB
1903 1900 72 (no ) 74 SB
1977 1900 123 (value) 123 SB
375 2000 448 (is directly returned.) 448 SB
375 2150 344 (Procedure Call) 344 SB
/fm 256 def
343 2 375 2209 B
1 F
n
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2242 390 (xor\(c, a, b\);) 390 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 2300 517 (Procedure Declaration) 517 SB
/fm 256 def
516 2 375 2359 B
1 F
n
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2367 420 (PROCEDURE xor\() 420 SB
900 2367 720 (SIGNAL c: OUT std_logic;) 720 SB
900 2417 810 (SIGNAL a, b: IN std_logic\);) 810 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 2475 373 (Procedure Body) 373 SB
/fm 256 def
372 2 375 2534 B
1 F
n
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 2542 420 (PROCEDURE xor\() 420 SB
900 2542 720 (SIGNAL c: OUT std_logic,) 720 SB
900 2592 870 (SIGNAL a, b: IN std_logic\) IS) 870 SB
465 2642 150 (BEGIN) 150 SB
540 2692 390 (c <= a XOR b;) 390 SB
465 2742 240 (END xor;) 240 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
843 2800 713 (Listing 31. Procedure Example) 713 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font NewCenturySchlbk-Roman
%%+ font Times-Roman
%%Page: 38 38
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (38) 42 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
300 300 743 (PART II VHDL EXAMPLES) 743 SB
0 0 0 fC
/fm 256 def
742 5 300 360 B
1 F
n
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 500 850 (CHAPTER 5: 8-1 MUX EXAMPLE) 850 SB
300 700 758 (5.0 A Complete VHDL Example) 758 SB
/fm 256 def
757 2 300 759 B
1 F
n
450 800 165 (Below ) 167 SB
617 800 53 (is ) 55 SB
672 800 41 (a ) 43 SB
715 800 225 (complete ) 228 SB
943 800 92 (8-1 ) 95 SB
1038 800 151 (MUX ) 154 SB
1192 800 281 (constructed ) 284 SB
1476 800 312 (hierarchicaly ) 315 SB
1791 800 124 (from ) 127 SB
1918 800 102 (two ) 105 SB
2023 800 77 (4-1) 77 SB
375 900 198 (MUX's. ) 200 SB
575 900 15 ( ) 17 SB
592 900 116 (This ) 118 SB
710 900 208 (example ) 210 SB
920 900 102 (will ) 104 SB
1024 900 112 (give ) 114 SB
1138 900 41 (a ) 43 SB
1181 900 130 (good ) 132 SB
1313 900 111 (idea ) 113 SB
1426 900 64 (as ) 66 SB
1492 900 60 (to ) 62 SB
1554 900 114 (how ) 116 SB
1670 900 174 (VHDL ) 176 SB
1846 900 180 (models ) 183 SB
2029 900 71 (are) 71 SB
375 1000 1607 (constructed, and that they actually can simulate hardware effectively. ) 1608 SB
1983 1000 15 ( ) 16 SB
1999 1000 101 (This) 101 SB
375 1100 1607 (is purely behavioral and of the form accepted by most synthesis tools.) 1607 SB
300 1300 581 (5.1 Behavioral 4-1 MUX) 581 SB
/fm 256 def
580 2 300 1359 B
1 F
n
450 1400 96 (We ) 100 SB
550 1400 102 (will ) 106 SB
656 1400 226 (construct ) 230 SB
886 1400 256 (behavioral ) 260 SB
1146 1400 125 (code ) 129 SB
1275 1400 60 (to ) 64 SB
1339 1400 227 (represent ) 231 SB
1570 1400 85 (the ) 89 SB
1659 1400 92 (4-1 ) 97 SB
1756 1400 151 (MUX ) 156 SB
1912 1400 188 (pictured) 188 SB
375 1500 58 (in ) 66 SB
441 1500 149 (figure ) 157 SB
598 1500 59 (3. ) 67 SB
665 1500 15 ( ) 23 SB
688 1500 116 (This ) 125 SB
813 1500 125 (code ) 134 SB
947 1500 102 (will ) 111 SB
1058 1500 70 (be ) 79 SB
1137 1500 160 (purely ) 169 SB
1306 1500 256 (behavioral ) 265 SB
1571 1500 58 (in ) 67 SB
1638 1500 173 (nature, ) 182 SB
1820 1500 201 (utilizing ) 210 SB
2030 1500 70 (the) 70 SB
375 1600 525 (VHDL case statement.) 525 SB
/pp_save save def	/showpage {} def	40 dict begin /pp_clip false def /pp_bbox false def	/F { pop } def /S {} def	/B { { /pp_dy1 exch def /pp_dx1 exch def		   /pp_dy2 exch def /pp_dx2 exch def }		stopped not { /pp_bbox true def } if } def	/CB { { /pp_cy exch def /pp_cx exch def		    /pp_cht exch def /pp_cwd exch def }		stopped not { /pp_clip true def } if } def	/pp_bx1 0 def /pp_by1 686 def /pp_bx2 162 def /pp_by2 792 def0 lc
0 lj
254 255 255 pC
0 1 SP
gs 675 442 862 1767 CB
674 441 862 1767 B
S
n
gr
	pp_clip	{ pp_cx pp_cy moveto pp_cwd 0 rlineto 0 pp_cht rlineto	  pp_cwd neg 0 rlineto clip newpath } if	pp_bbox {	/pp_dy2 pp_dy2 pp_dy1 add def	/pp_dx2 pp_dx2 pp_dx1 add def	/pp_sx pp_dx2 pp_dx1 sub pp_bx2 pp_bx1 sub div def	/pp_sy pp_dy2 pp_dy1 sub pp_by1 pp_by2 sub div def	/pp_tx pp_dx1 pp_sx pp_bx1 mul sub def	/pp_ty pp_dy1 pp_sy pp_by2 mul sub def	pp_tx pp_ty translate pp_sx pp_sy scale } ifend%!PS-Adobe-2.0 MGXPS_2.6
%%Creator: C:\WINDOWS\DESIGNER\MUX4.EPS
%%Title: 
%%CreationDate: Tue Dec 29 1992 11:21:52 AM
%%BoundingBox: 0 686 162 792            
%%DocumentFonts: (atend)
%%DocumentProcSets:MGXPS_2.6 0 0
%%DocumentSuppliedProcSets:MGXPS_2.6 0 0
%%Pages:(atend)
%%EndComments
%%BeginProcSet: MGXPS_2.6 0 0
statusdict begin/waittimeout 0 def end/MGXPS_2.6 200 dict def MGXPS_2.6
begin/bd{bind def}bind def/xd{exch def}bd/ld{load def}bd/M/moveto ld/m/rmoveto
ld/L/lineto ld/l/rlineto ld/w/setlinewidth ld/n/newpath ld/P/closepath
ld/tr/translate ld/gs/gsave ld/gr/grestore ld/lc/setlinecap ld/lj/setlinejoin
ld/ml/setmiterlimit ld/TM/concat ld/F/fill ld/bz/curveto ld/_m matrix
def/_cm matrix def/_d 0 def/_o 0 def/_pb 0 def/_hb -1 def currentscreen/_P
xd dup/_A xd/__A xd dup/_F xd/__F xd/srgbc{_neg 0 ne{3{neg 1 add 3
1 roll}repeat}if setrgbcolor}bd/ssc{gs 0 0 M 0 _yp neg _xp 0 0 _yp
3 D closepath fill gr 0 0 0 srgbc}bd/Cne{/_bs xd/_neg xd dup 0 ne{setflat}{pop}ifelse
dup -1 eq{pop}{2 copy __A ne exch __F ne or{/_A xd/_F xd _F _A/_P load
setscreen}{pop pop}ifelse}ifelse/_rz xd/_yp xd/_xp xd/_a 0 def 0 ne{/_a
90 def -90 rotate _xp _rz div 72 mul neg 0 tr}if 0 _yp _rz div 72 mul
tr 72 _rz div dup neg scale/#copies xd 2 copy/_ym xd/_xm xd tr n 1
lj 1 lc 1 w 0 8{dup}repeat sc fc bc}bd/clpg{n M dup neg 3 1 roll 0
l 0 exch l 0 l P clip n}bd/SB{_o 0 ne _d 0 ne and{gs []0 setdash _br
_bg _bb srgbc stroke gr}if}bd/S{_r _g _b srgbc SB stroke}bd/SX{_r _g
_b srgbc _cm currentmatrix pop _m setmatrix SB stroke _cm setmatrix}bd/d{/_d
xd setdash}bd/c{3{255 div 3 1 roll}repeat}bd/sc{c/_b xd/_g xd/_r xd}bd/bc{c/_bb
xd/_bg xd/_br xd}bd/fc{c/_B xd/_G xd/_R xd}bd/tc{c srgbc}bd/f{0 eq{eofill}{fill}ifelse}bd/D{{l}repeat}bd/PT{dup
statusdict exch known{cvx exec}{pop}ifelse}bd/TT{dup statusdict exch
known{cvx exec}{pop pop}ifelse}bd/SM{_m currentmatrix pop}bd/RM{_m
setmatrix}bd
/s{100 div/_t xd[_t 0 0 _t 1 _t sub _xp 2 div mul 1 _t sub _yp 2 div
mul]concat}bd
/_am matrix def/a{_am currentmatrix pop/_t1 xd/_t2 xd/_t3 exch 10
div def/_t4 exch 10 div def tr _t2 _t1 neg scale/_t xd _t 1 eq{0 0
M}if 0 0 1 _t4 _t3 arc _t 0 ne{P}if _am setmatrix}bd/an{_am currentmatrix
pop/_t1 xd/_t2 xd/_t3 exch 10 div def/_t4 exch 10 div def tr _t2 _t1
neg scale/_t xd _t 1 eq{0 0 M}if 0 0 1 _t4 _t3 arcn _t 0 ne{P}if _am
setmatrix}bd
/_em matrix def/E{_em currentmatrix pop/_t1 xd/_t2 xd/_t3 xd/_t4 xd
_t4 _t3 _t1 sub M _t4 _t3 tr _t2 _t1 neg scale 0 0 1 90 450 arc _em
setmatrix}bd
/_rm matrix def/cn{_rm currentmatrix pop tr x3 y3 scale arc _rm setmatrix}bd/rr{2
div/y3 xd 2 div/x3 xd/y2 xd/x2 xd/y1 xd/x1 xd x1 y1 y3 add M 0 0 1
180 270 x1 x3 add y1 y3 add cn x2 x3 sub y1 L 0 0 1 270 0 x2 x3 sub
y1 y3 add cn x2 y2 y3 sub L 0 0 1 0 90 x2 x3 sub y2 y3 sub cn x1 x3
add y2 L 0 0 1 90 180 x1 x3 add y2 y3 sub cn}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/p{P dup 0 eq{S pop}{_pb 0 eq{_R
_G _B srgbc 2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{2 eq _o 1 eq{gs _br
_bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs hf gr S}{hf}ifelse}{pb
2 eq{gs f gr _F _A/_P load setscreen S}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd/px{P
dup 0 eq{SX pop}{_pb 0 eq{_R _G _B srgbc 2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{2 eq _o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if _R _G _B srgbc{gs
_m setmatrix hf gr SX}{gs _m setmatrix hf gr}ifelse}{pb 2 eq{gs f gr
_F _A/_P load setscreen SX}{f _F _A/_P load setscreen}ifelse}ifelse}ifelse}ifelse}bd
/cp{/_t xd{{gs _t 0 eq{eoclip}{clip}ifelse}stopped{gr currentflat
1 add setflat}{exit}ifelse}loop n}bd/pc{P dup 0 eq{S pop}{_R _G _B
srgbc _pb 0 eq{2 eq{gs f gr S}{f}ifelse}{_pb 1 eq{_o 1 eq{gs _br _bg
_bb srgbc 1 index f gr}if _R _G _B srgbc 2 eq{gs hf gr S}{hf}ifelse}{2
eq{false pbc S}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd/pcx{P dup
0 eq{SX pop}{_R _G _B srgbc _pb 0 eq{2 eq{gs f gr SX}{f}ifelse}{_pb
1 eq{_o 1 eq{gs _br _bg _bb srgbc 1 index f gr}if 2 eq{gs hf gr SX}{hf}ifelse}{2
eq{false pbc SX}{false pbc n}ifelse}ifelse}ifelse}ifelse}bd
/spc{dup 0 eq{/_pb xd}{1 eq{/_pb xd/_pg 0 def/_pr 0 def}{/_pb xd/_pg
xd/_pr xd}ifelse 1 add/_pq xd}ifelse}bd/_im{[_t 0 0 _t 0 0]}bd/bbx{_pq
75 mul _rz div/_t xd pathbbox 1 add cvi 31 or/_ury xd 1 add cvi 31
or/_urx xd 1 sub cvi -32 and/_lly xd 1 sub cvi -32 and/_llx xd/_dH
_ury _lly sub def/_dW _urx _llx sub def}bd/xp{/_pbs xd _row _pbs mul
_pbs getinterval/_s xd 0 _pbs 8 _pbs div dup _sW add 1 sub exch div
cvi dup/str exch string def _pbs sub{str exch _s putinterval}for str}bd/pbc{/__t
save def{_m setmatrix}if 0 eq{eoclip}{clip}ifelse/_row 0 def bbx _llx
_lly tr _t _dW mul ceiling cvi 8 add dup 8 mod sub dup/_sW xd _t _dH
mul ceiling cvi 8 add dup 8 mod sub _pg 0 ne{8 _im{_pr 8 xp}{_pg 8
xp}{_pb 8 xp/_row _row 1 add 8 mod def}true 3 colorimage}{1 _o eq{gs
_br _bg _bb srgbc 2 copy true _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask
gr}if _R _G _B srgbc false _im{_pb 1 xp/_row _row 1 add 8 mod def}imagemask}ifelse
__t restore}bd
/hp{dup -1 eq{/_hb -1 def/_pb 0 def}{/_hb xd 1 add/_pq xd/_pb 1 def}ifelse}bd/vert{X0
_w X1{dup Y0 M Y1 L stroke}for}bd/horz{Y0 _w Y1{dup X0 exch M X1 exch
L stroke}for}bd/fdiag{X0 _w X1{Y0 M X1 X0 sub dup l stroke}for Y0 _w
Y1{X0 exch M Y1 Y0 sub dup l stroke}for}bd/bdiag{X0 _w X1{Y1 M X1 X0
sub dup neg l stroke}for Y0 _w Y1{X0 exch M Y1 Y0 sub dup neg l stroke}for}bd/AU{1
add cvi 31 or}bd/AD{1 sub cvi -32 and}bd/hf{pathbbox 1 add cvi 31 or/Y1
xd 1 add cvi 31 or/X1 xd 1 sub cvi -32 and/Y0 xd 1 sub cvi -32 and/X0
xd 2 w [] 0 setdash/_w _rz 20 div 8 div 2 mul _pq div round 8 mul def
cp _hb 0 eq{horz}if _hb 1 eq{vert}if _hb 2 eq{fdiag}if _hb 3 eq{bdiag}if
_hb 4 eq{horz vert}if _hb 5 eq{fdiag bdiag}if gr}bd
/sp{dup 0 eq{/_pb xd}{255 div/_gr xd/_pb xd 100 div/_f xd}ifelse}bd/B{/_t2
xd/_t3 xd _pb _t2 _t3 8 idiv add get 1 7 _t3 8 mod sub bitshift and
0 ne}bd/SF{2{1 add 4 mul cvi exch}repeat B{0}{1}ifelse}bd/pb{_gr setgray
_f _a/SF load setscreen}bd
/SCA{10 div dup dup/_a xd/_A xd/__na xd currentscreen/__p xd/__a xd/__f
xd __f __na/__p load setscreen}bd
/SCF{100 div dup dup/_F xd/__nf xd currentscreen/__p xd/__a xd/__f
xd __nf __a/__p load setscreen}bd
/usf{findfont exch makefont setfont}bd/sf{/_nf xd FontDirectory _nf
known{pop}{findfont dup maxlength dict/_nfd xd{exch dup/FID ne{exch
_nfd 3 1 roll put}{pop pop}ifelse}forall _nfd dup/FontName _nf put/Encoding
WE put _nf _nfd definefont pop}ifelse _nf usf}bd/us{gs [] 0 setdash
0 setlinecap w 0 exch M _w _be add 0 l S gr}bd/ob{n/_h xd _cx _cy M
_w 0 l 0 _h l _w neg 0 l P tc fill}bd/st{dup/_be xd 0 ne{/_bc xd}if
dup stringwidth pop/_sw xd dup length dup 1 gt{1 sub}if/_sl xd _be
0 eq{_w _sw sub _sl div 0 3 -1 roll ashow}{_be _bc div 0 32 _w _sw
sub _sl div 0 6 -1 roll awidthshow}ifelse}bd/sb{gs M 10 div rotate/_w
xd currentpoint/_cy xd/_cx xd 0 ne{ob}if tc _cx _cy 3 -1 roll add tr
0 0 M st dup 0 eq{pop}{dup 1 eq{pop us}{2 eq{us}{dup 3 1 roll us us}ifelse}ifelse}ifelse
gr}bd
/cl{gs n M dup neg 3 1 roll 0 l 0 exch l 0 l P clip n}bd/clx{gs n
_cm currentmatrix pop _m setmatrix n M dup neg 3 1 roll 0 l 0 exch
l 0 l P clip _cm setmatrix n}bd
/bb{/_ob xd/_t save def tr/str 2 index 8 idiv string def _ob 2 eq{1}{false}ifelse
[1 0 0 1 0 0]{currentfile str readhexstring pop}_ob 2 eq{image}{imagemask}ifelse
_t restore}bd
/sbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi/str exch string def exch dup/_sH xd _bs 1 eq{false}{_bs}ifelse
[_sW _dW div 0 0 _sH _dH div 0 0]{currentfile str readhexstring pop}_bs
1 eq{imagemask}{image}ifelse _t restore}bd
/cb{/_t save def tr 1 index/_l exch def/rstr _l string def/gstr _l
string def/bstr _l string def 8[1 0 0 1 0 0]{currentfile rstr readhexstring
pop}{currentfile gstr readhexstring pop}{currentfile bstr readhexstring
pop}true 3 colorimage _t restore}bd
/scbb{/_t save def tr/_dW xd/_dH xd dup/_sW xd 8 _bs div dup _sW add
1 sub exch div cvi dup dup/rstr exch string def/gstr exch string def/bstr
exch string def exch dup/_sH xd _bs [_sW _dW div 0 0 _sH _dH div 0
0]{currentfile rstr readhexstring pop}{currentfile gstr readhexstring
pop}{currentfile bstr readhexstring pop}true 3 colorimage _t restore}bd
/mr{2 copy -1 eq{_yp _ym 2 mul sub}{0}ifelse exch -1 eq{_xp _xm 2
mul sub}{0}ifelse exch tr scale}bd
/WE 256 array def StandardEncoding WE copy pop WE dup 0[/grave/acute/circumflex/tilde/macron/breve/dotaccent/dieresis/ring/cedilla/hungarumlaut/ogonek/caron/dotlessi]putinterval
dup 39/quotesingle put dup 96/grave put dup 124/bar put dup 145[/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash]putinterval
160[/space/exclamdown/cent/sterling/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/endash/registered/macron/ring/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/circumflex/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/tilde/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]putinterval
end
%%EndProcSet
%%EndProlog
MGXPS_2.6 begin
%%Page: 1 1 
%%BeginPageSetup
0 0 1 0 2550 3300 300 -1 0 0 1 Cne
3233 2396 0 0 clpg
%%EndPageSetup
%%ChangeFont: Times-Roman
[48 0 0 -58 0 0] /Times-Roman/Times-RomanWE sf
0 (data1)0 52 0 0 0 0 104 0 0 37 sb
0 (data2)0 52 0 0 0 0 104 0 0 106 sb
0 (data3)0 52 0 0 0 0 104 0 0 175 sb
0 (data4)0 52 0 0 0 0 104 0 0 244 sb
0 (addr0)0 52 0 0 0 0 108 0 173 375 sb
0 (addr1)0 52 0 0 0 0 108 0 398 375 sb
/_o 1 def
255 255 255 bc
10 0 0 lc lj ml
164 0 M 0 -336 373 0 0 336 3 D
0 p
10 1 1 lc lj ml
126 75 M 0 0 38 0 2 D
S
126 131 M 0 0 38 0 2 D
S
126 206 M 0 0 38 0 2 D
S
126 281 M 0 0 38 0 2 D
S
538 150 M 0 0 75 0 2 D
S
239 337 M 0 0 0 38 2 D
S
463 337 M 0 0 0 38 2 D
S
0 (out)0 52 0 0 0 0 61 0 613 112 sb
%%Trailer
%%Pages: 1 
end
%%EOF
	pp_save restore975 2242 449 (Figure 3. 4-1 MUX) 449 SB
300 2342 513 (5.1.1 4-1 MUX Entity) 513 SB
0 0 0 fC
/fm 256 def
512 2 300 2401 B
1 F
n
450 2442 104 (The ) 108 SB
558 2442 219 (Interface ) 223 SB
781 2442 60 (to ) 64 SB
845 2442 85 (the ) 89 SB
934 2442 92 (4-1 ) 96 SB
1030 2442 151 (MUX ) 155 SB
1185 2442 53 (is ) 58 SB
1243 2442 186 (defined ) 191 SB
1434 2442 58 (in ) 63 SB
1497 2442 85 (the ) 90 SB
1587 2442 144 (entity ) 149 SB
1736 2442 250 (statement. ) 255 SB
1991 2442 15 ( ) 20 SB
2011 2442 89 (The) 89 SB
375 2542 1079 (following code comprises the 4-1 MUX entity.) 1079 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Bold
%%+ font Times-Roman
%%Page: 39 39
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (39) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 267 390 (LIBRARY ieee;) 390 SB
465 317 840 (USE ieee.std_logic_1164.ALL;) 840 SB
465 367 510 (ENTITY 4_1_mux IS) 510 SB
540 417 1020 (GENERIC\(out_delay : time := 5 ns\);) 1020 SB
540 467 150 (PORT\() 150 SB
750 467 180 (data1:) 180 SB
1050 467 60 (IN) 60 SB
1200 467 300 (std_logic;) 300 SB
750 517 180 (data2:) 180 SB
1050 517 60 (IN) 60 SB
1200 517 300 (std_logic;) 300 SB
750 567 180 (data3:) 180 SB
1050 567 60 (IN) 60 SB
1200 567 300 (std_logic;) 300 SB
750 617 180 (data4:) 180 SB
1050 617 60 (IN) 60 SB
1200 617 300 (std_logic;) 300 SB
750 667 150 (addr:) 150 SB
1050 667 60 (IN) 60 SB
1200 667 870 (std_logic_vector\(1 DOWNTO 0\);) 870 SB
750 717 210 (output:) 210 SB
1050 717 90 (OUT) 90 SB
1200 717 330 (std_logic\);) 330 SB
465 767 360 (END 4_1_mux;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
878 875 643 (Listing 32. 4-1 MUX Entity) 643 SB
300 975 418 (5.1.2 Architecture) 418 SB
0 0 0 fC
/fm 256 def
417 2 300 1034 B
1 F
n
450 1075 104 (The ) 110 SB
560 1075 152 (actual ) 158 SB
718 1075 215 (behavior ) 221 SB
939 1075 62 (of ) 68 SB
1007 1075 85 (the ) 91 SB
1098 1075 151 (MUX ) 158 SB
1256 1075 53 (is ) 60 SB
1316 1075 186 (defined ) 193 SB
1509 1075 58 (in ) 65 SB
1574 1075 85 (the ) 92 SB
1666 1075 316 (Architecture. ) 323 SB
1989 1075 15 ( ) 22 SB
2011 1075 89 (The) 89 SB
375 1175 1221 (following code comprises the 4-1 MUX architecture.) 1221 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1317 960 (ARCHITECTURE behav OF 4_1_mux IS) 960 SB
465 1367 150 (BEGIN) 150 SB
540 1417 210 (mux_it:) 210 SB
540 1467 1230 (PROCESS\(addr, data1, data2, data3, data4\)) 1230 SB
540 1517 150 (BEGIN) 150 SB
600 1567 360 (CASE addr IS) 360 SB
750 1617 360 (WHEN "00" =>) 360 SB
900 1667 960 (output <= data1 AFTER out_delay;) 960 SB
750 1717 360 (WHEN "01" =>) 360 SB
900 1767 960 (output <= data2 AFTER out_delay;) 960 SB
750 1817 360 (WHEN "10" =>) 360 SB
900 1867 960 (output <= data3 AFTER out_delay;) 960 SB
750 1917 360 (WHEN "11" =>) 360 SB
900 1967 960 (output <= data4 AFTER out_delay;) 960 SB
750 2017 420 (WHEN OTHERS =>) 420 SB
900 2067 360 (ASSERT FALSE) 360 SB
1050 2117 810 (REPORT "addr out of range!") 810 SB
1200 2167 450 (SEVERITY ERROR;) 450 SB
540 2217 360 (END PROCESS;) 360 SB
465 2267 300 (END behav;) 300 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
804 2325 791 (Listing 33. 4-1 MUX Architecture) 791 SB
300 2500 450 (5.1.3 Configuration) 450 SB
/fm 256 def
449 2 300 2559 B
1 F
n
450 2600 104 (The ) 117 SB
567 2600 174 (VHDL ) 187 SB
754 2600 125 (code ) 138 SB
892 2600 154 (which ) 168 SB
1060 2600 139 (binds ) 153 SB
1213 2600 85 (the ) 99 SB
1312 2600 223 (ENTITY ) 237 SB
1549 2600 98 (and ) 112 SB
1661 2600 439 (ARCHITECTURE) 439 SB
375 2700 203 (together ) 205 SB
580 2700 53 (is ) 55 SB
635 2700 58 (in ) 60 SB
695 2700 85 (the ) 87 SB
782 2700 505 (CONFIGURATION. ) 507 SB
1289 2700 15 ( ) 18 SB
1307 2700 104 (The ) 107 SB
1414 2700 234 (following ) 237 SB
1651 2700 125 (code ) 128 SB
1779 2700 248 (comprises ) 251 SB
2030 2700 70 (the) 70 SB
375 2800 710 (configuration of the 4-1 MUX.) 710 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 40 40
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (40) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 267 1050 (CONFIGURATION config4 OF 4_1_mux IS) 1050 SB
540 317 270 (FOR behav) 270 SB
540 367 240 (END FOR;) 240 SB
465 417 360 (END config4;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
788 525 823 (Listing 34. 4-1 MUX Configuration) 823 SB
450 700 142 (Since ) 149 SB
599 700 72 (no ) 79 SB
678 700 292 (components ) 299 SB
977 700 188 (internal ) 195 SB
1172 700 60 (to ) 67 SB
1239 700 85 (the ) 93 SB
1332 700 286 (architecture ) 294 SB
1626 700 123 (have ) 131 SB
1757 700 124 (been ) 132 SB
1889 700 211 (declared,) 211 SB
375 800 85 (the ) 106 SB
481 800 320 (configuration ) 341 SB
822 800 53 (is ) 74 SB
896 800 172 (empty. ) 193 SB
1089 800 15 ( ) 36 SB
1125 800 116 (This ) 138 SB
1263 800 53 (is ) 75 SB
1338 800 132 (often ) 154 SB
1492 800 197 (referred ) 219 SB
1711 800 60 (to ) 82 SB
1793 800 64 (as ) 86 SB
1879 800 41 (a ) 63 SB
1942 800 158 (default) 158 SB
375 900 789 (configuration and may be omitted.) 789 SB
300 1100 581 (5.2 Behavioral 8-1 MUX) 581 SB
0 0 0 fC
/fm 256 def
580 2 300 1159 B
1 F
n
450 1200 56 (A ) 57 SB
507 1200 256 (behavioral ) 257 SB
764 1200 92 (8-1 ) 93 SB
857 1200 151 (MUX ) 152 SB
1009 1200 95 (can ) 96 SB
1105 1200 70 (be ) 71 SB
1176 1200 183 (created ) 185 SB
1361 1200 72 (by ) 74 SB
1435 1200 137 (using ) 139 SB
1574 1200 85 (the ) 87 SB
1661 1200 102 (two ) 104 SB
1765 1200 256 (behavioral ) 258 SB
2023 1200 77 (4-1) 77 SB
375 1300 1242 (MUX's.  This is a good example of structured VHDL.) 1242 SB
300 1500 270 (5.2.1 Entity) 270 SB
/fm 256 def
269 2 300 1559 B
1 F
n
450 1600 1330 (The following code comprises the entity of the 8-1 MUX.) 1330 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1742 390 (LIBRARY ieee;) 390 SB
465 1792 840 (USE ieee.std_logic_1164.ALL;) 840 SB
465 1842 510 (ENTITY 8_1_mux IS) 510 SB
540 1892 1020 (GENERIC\(out_delay : time := 5 ns\);) 1020 SB
540 1942 150 (PORT\() 150 SB
750 1942 180 (data1:) 180 SB
1050 1942 60 (IN) 60 SB
1200 1942 300 (std_logic;) 300 SB
750 1992 180 (data2:) 180 SB
1050 1992 60 (IN) 60 SB
1200 1992 300 (std_logic;) 300 SB
750 2042 180 (data3:) 180 SB
1050 2042 60 (IN) 60 SB
1200 2042 300 (std_logic;) 300 SB
750 2092 180 (data4:) 180 SB
1050 2092 60 (IN) 60 SB
1200 2092 300 (std_logic;) 300 SB
750 2142 180 (data5:) 180 SB
1050 2142 60 (IN) 60 SB
1200 2142 300 (std_logic;) 300 SB
750 2192 180 (data6:) 180 SB
1050 2192 60 (IN) 60 SB
1200 2192 300 (std_logic;) 300 SB
750 2242 210 (data7: ) 210 SB
1050 2242 60 (IN) 60 SB
1200 2242 300 (std_logic;) 300 SB
750 2292 180 (data8:) 180 SB
1050 2292 60 (IN) 60 SB
1200 2292 30 (s) 30 SB
1230 2292 270 (td_logic;) 270 SB
750 2342 150 (addr:) 150 SB
1050 2342 60 (IN) 60 SB
1200 2342 870 (std_logic_vector\(3 DOWNTO 0\);) 870 SB
750 2392 210 (output:) 210 SB
1050 2392 90 (OUT) 90 SB
1200 2392 330 (std_logic\);) 330 SB
465 2442 360 (END 8_1_mux;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
892 2550 615 (Listing 35. 8-1 Mux Entity) 615 SB
450 2700 94 (For ) 99 SB
549 2700 97 (this ) 102 SB
651 2700 140 (code, ) 145 SB
796 2700 83 (we ) 88 SB
884 2700 157 (define ) 162 SB
1046 2700 41 (a ) 47 SB
1093 2700 139 (delay ) 145 SB
1238 2700 81 (for ) 87 SB
1325 2700 71 (all ) 77 SB
1402 2700 150 (signal ) 156 SB
1558 2700 294 (assignments ) 300 SB
1858 2700 62 (of ) 68 SB
1926 2700 110 (5ns. ) 116 SB
2042 2700 15 ( ) 21 SB
2063 2700 37 (If) 37 SB
375 2775 83 (we ) 90 SB
465 2775 98 (had ) 105 SB
570 2775 177 (written ) 185 SB
755 2775 41 (a ) 49 SB
804 2775 90 (flat ) 98 SB
902 2775 256 (behavioral ) 264 SB
1166 2775 172 (model, ) 180 SB
1346 2775 83 (we ) 91 SB
1437 2775 158 (would ) 166 SB
1603 2775 92 (use ) 100 SB
1703 2775 97 (this ) 105 SB
1808 2775 139 (delay ) 147 SB
1955 2775 81 (for ) 89 SB
2044 2775 56 (all) 56 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 41 41
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (41) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 275 149 (gates. ) 151 SB
526 275 15 ( ) 17 SB
543 275 62 (In ) 65 SB
608 275 97 (this ) 100 SB
708 275 131 (case, ) 134 SB
842 275 228 (however, ) 231 SB
1073 275 83 (we ) 86 SB
1159 275 86 (are ) 89 SB
1248 275 137 (using ) 140 SB
1388 275 41 (a ) 44 SB
1432 275 231 (structural ) 234 SB
1666 275 157 (model ) 160 SB
1826 275 98 (and ) 101 SB
1927 275 83 (we ) 86 SB
2013 275 87 (will) 87 SB
375 350 1000 ("map" values to the individual components.) 1000 SB
300 525 418 (5.2.2 Architecture) 418 SB
0 0 0 fC
/fm 256 def
417 2 300 584 B
1 F
n
450 625 1472 (The following code comprises the architecture of the 8-1 MUX.) 1472 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 742 990 (ARCHITECTURE behav8 OF 8_1_mux IS) 990 SB
540 792 1020 (ALIAS addr3: std_logic IS addr\(3\);) 1020 SB
540 842 180 (ALIAS ) 216 SB
756 842 270 (address: ) 306 SB
1062 842 570 (std_logic_vector\(1 ) 606 SB
1668 842 210 (DOWNTO ) 246 SB
1914 842 90 (0\) ) 126 SB
2040 842 60 (IS) 60 SB
540 892 510 (addr\(1 DOWNTO 0\);) 510 SB
540 942 690 (SIGNAL out1: std_logic;) 690 SB
540 992 690 (SIGNAL out2: std_logic;) 690 SB
540 1042 510 (COMPONENT 4_1_mux) 510 SB
600 1092 1470 (GENERIC\(out_delay : time := 5 ns\);-- this defines) 1470 SB
600 1142 150 (PORT\() 150 SB
900 1142 180 (data1:) 180 SB
1200 1142 60 (IN) 60 SB
1350 1142 660 (std_logic;-- a default) 660 SB
900 1192 180 (data2:) 180 SB
1200 1192 60 (IN) 60 SB
1350 1192 750 (std_logic;-- delay of 5ns) 750 SB
900 1242 180 (data3:) 180 SB
1200 1242 60 (IN) 60 SB
1350 1242 750 (std_logic;-- if no MAP is) 750 SB
900 1292 180 (data4:) 180 SB
1200 1292 60 (IN) 60 SB
1350 1292 510 (std_logic;-- used) 510 SB
900 1342 150 (addr:) 150 SB
1200 1342 60 (IN) 60 SB
1350 1342 750 (std_logic_vector\(1 DOWNTO) 750 SB
1350 1392 90 (0\);) 90 SB
900 1442 210 (output:) 210 SB
1200 1442 90 (OUT) 90 SB
1350 1442 330 (std_logic\);) 330 SB
540 1492 420 (END COMPONENT;) 420 SB
465 1542 150 (BEGIN) 150 SB
540 1592 330 (u1: 4_1_mux) 330 SB
600 1642 30 (G) 30 SB
630 1642 1110 (ENERIC MAP\(3.5 ns\) -- a little slower) 1110 SB
600 1692 270 (PORT MAP\() 270 SB
900 1692 450 (data1 => data1,) 450 SB
900 1742 450 (data2 => data2,) 450 SB
900 1792 450 (data3 => data3,) 450 SB
900 1842 450 (data4 => data4,) 450 SB
900 1892 480 (addr => address,) 480 SB
900 1942 480 (output => out1\);) 480 SB
540 1992 330 (u2: 4_1_mux) 330 SB
600 2042 1140 (GENERIC MAP\(5.5 ns\) -- a little faster) 1140 SB
600 2092 270 (PORT MAP\() 270 SB
900 2092 450 (data1 => data5,) 450 SB
900 2142 450 (data2 => data6,) 450 SB
900 2192 450 (data3 => data7,) 450 SB
900 2242 450 (data4 => data8,) 450 SB
900 2292 480 (addr => address,) 480 SB
900 2342 480 (output => out2\);) 480 SB
540 2392 150 (BEGIN) 150 SB
1050 2392 270 (  -- out2) 270 SB
600 2442 390 (CASE addr3 IS) 390 SB
750 2492 330 (WHEN '0' =>) 330 SB
900 2542 450 (output <= out1;) 450 SB
750 2592 330 (WHEN '1' =>) 330 SB
900 2642 450 (output <= out2;) 450 SB
750 2692 420 (WHEN OTHERS =>) 420 SB
900 2742 330 (ASSERT FALS) 330 SB
1230 2742 30 (E) 30 SB
1050 2792 660 (REPORT "address error") 660 SB
1200 2842 450 (SEVERITY ERROR;) 450 SB
600 2892 270 (END CASE;) 270 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 42 42
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (42) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
540 267 360 (END PROCESS;) 360 SB
465 317 330 (END behav8;) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
804 425 791 (Listing 36. 8-1 MUX Architecture) 791 SB
450 625 56 (A ) 60 SB
510 625 266 (GENERIC ) 270 SB
780 625 140 (MAP ) 144 SB
924 625 53 (is ) 57 SB
981 625 121 (used ) 125 SB
1106 625 60 (to ) 64 SB
1170 625 180 (specify ) 185 SB
1355 625 210 (different ) 215 SB
1570 625 162 (delays ) 167 SB
1737 625 81 (for ) 86 SB
1823 625 277 (components) 277 SB
375 725 113 (than ) 117 SB
492 725 85 (the ) 89 SB
581 725 162 (delays ) 166 SB
747 725 222 (specified ) 226 SB
973 725 58 (in ) 62 SB
1035 725 85 (the ) 89 SB
1124 725 307 (components. ) 311 SB
1435 725 15 ( ) 19 SB
1454 725 116 (This ) 120 SB
1574 725 165 (allows ) 169 SB
1743 725 69 (an ) 73 SB
1816 725 118 (easy ) 122 SB
1938 725 111 (way ) 115 SB
2053 725 47 (of) 47 SB
375 825 222 (changing ) 227 SB
602 825 268 (parameters ) 273 SB
875 825 171 (passed ) 176 SB
1051 825 103 (into ) 108 SB
1159 825 41 (a ) 47 SB
1206 825 284 (component. ) 290 SB
1496 825 15 ( ) 21 SB
1517 825 104 (The ) 110 SB
1627 825 208 (example ) 214 SB
1841 825 153 (above ) 159 SB
2000 825 100 (uses) 100 SB
375 925 206 (generics ) 213 SB
588 925 98 (and ) 105 SB
693 925 183 (generic ) 190 SB
883 925 136 (maps ) 143 SB
1026 925 60 (to ) 67 SB
1093 925 190 (provide ) 197 SB
1290 925 160 (timing ) 168 SB
1458 925 296 (information. ) 304 SB
1762 925 15 ( ) 23 SB
1785 925 56 (A ) 64 SB
1849 925 251 (GENERIC) 251 SB
375 1025 140 (MAP ) 149 SB
524 1025 102 (will ) 111 SB
635 1025 175 (always ) 184 SB
819 1025 206 (override ) 215 SB
1034 1025 97 (any ) 106 SB
1140 1025 212 (previous ) 221 SB
1361 1025 266 (GENERIC ) 275 SB
1636 1025 197 (clauses. ) 206 SB
1842 1025 15 ( ) 24 SB
1866 1025 56 (A ) 66 SB
1932 1025 168 (generic) 168 SB
375 1125 95 (can ) 107 SB
482 1125 70 (be ) 82 SB
564 1125 188 (thought ) 200 SB
764 1125 62 (of ) 74 SB
838 1125 64 (as ) 76 SB
914 1125 41 (a ) 54 SB
968 1125 173 (default ) 186 SB
1154 1125 153 (value, ) 166 SB
1320 1125 98 (and ) 111 SB
1431 1125 41 (a ) 54 SB
1485 1125 183 (generic ) 196 SB
1681 1125 113 (map ) 126 SB
1807 1125 210 (overides ) 223 SB
2030 1125 70 (the) 70 SB
375 1225 173 (default.) 173 SB
300 1425 450 (5.2.3 Configuration) 450 SB
0 0 0 fC
/fm 256 def
449 2 300 1484 B
1 F
n
450 1525 1525 (The following code comprises the configuration for the 8-1 MUX.) 1525 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1667 1020 (CONFIGURATION config OF 4_1_mux IS) 1020 SB
540 1717 300 (FOR behav8) 300 SB
600 1767 450 (FOR u1: 4_1_mux) 450 SB
750 1817 480 (USE CONFIGURATIO) 480 SB
1230 1817 300 (N config4;) 300 SB
600 1867 240 (END FOR;) 240 SB
600 1917 450 (FOR u2: 4_1_mux) 450 SB
750 1967 780 (USE CONFIGURATION config4;) 780 SB
600 2017 240 (END FOR;) 240 SB
540 2067 240 (END FOR;) 240 SB
465 2117 330 (END config;) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
788 2250 823 (Listing 37. 8-1 MUX Configuration) 823 SB
300 2450 563 (5.3 VHDL Test benches) 563 SB
/fm 256 def
562 2 300 2509 B
1 F
n
450 2550 1001 (After the actual VHDL code is written, the ) 1002 SB
1452 2550 236 (important ) 237 SB
1689 2550 109 (task ) 110 SB
1799 2550 62 (of ) 63 SB
1862 2550 167 (testing ) 168 SB
2030 2550 70 (the) 70 SB
375 2650 125 (code ) 126 SB
501 2650 177 (comes. ) 179 SB
680 2650 15 ( ) 17 SB
697 2650 261 (Simulators ) 263 SB
960 2650 178 (usually ) 180 SB
1140 2650 125 (offer ) 127 SB
1267 2650 41 (a ) 43 SB
1310 2650 118 (built ) 120 SB
1430 2650 58 (in ) 60 SB
1490 2650 96 (test ) 98 SB
1588 2650 255 (capability, ) 257 SB
1845 2650 88 (but ) 90 SB
1935 2650 132 (often ) 134 SB
2069 2650 31 (it) 31 SB
375 2750 53 (is ) 61 SB
436 2750 132 (more ) 140 SB
576 2750 223 (desirable ) 231 SB
807 2750 60 (to ) 68 SB
875 2750 195 (actually ) 203 SB
1078 2750 226 (construct ) 234 SB
1312 2750 41 (a ) 49 SB
1361 2750 174 (VHDL ) 182 SB
1543 2750 96 (test ) 104 SB
1647 2750 205 (process. ) 213 SB
1860 2750 15 ( ) 24 SB
1884 2750 137 (Once ) 146 SB
2030 2750 70 (the) 70 SB
375 2850 117 (final ) 118 SB
493 2850 256 (behavioral ) 258 SB
751 2850 63 (or ) 65 SB
816 2850 244 (functional ) 246 SB
1062 2850 125 (code ) 127 SB
1189 2850 53 (is ) 55 SB
1244 2850 240 (complete, ) 242 SB
1486 2850 83 (we ) 85 SB
1571 2850 95 (can ) 97 SB
1668 2850 250 (instantiate ) 252 SB
1920 2850 85 (the ) 87 SB
2007 2850 93 (top-) 93 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 43 43
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (43) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 125 (level ) 131 SB
506 300 144 (entity ) 150 SB
656 300 58 (in ) 65 SB
721 300 41 (a ) 48 SB
769 300 96 (test ) 103 SB
872 300 152 (bench ) 159 SB
1031 300 98 (and ) 105 SB
1136 300 133 (write ) 140 SB
1276 300 41 (a ) 48 SB
1324 300 190 (process ) 197 SB
1521 300 154 (which ) 161 SB
1682 300 180 (toggles ) 187 SB
1869 300 85 (the ) 92 SB
1961 300 139 (inputs) 139 SB
375 400 98 (and ) 108 SB
483 400 217 (monitors ) 227 SB
710 400 85 (the ) 96 SB
806 400 199 (outputs. ) 210 SB
1016 400 15 ( ) 26 SB
1042 400 104 (The ) 115 SB
1157 400 96 (test ) 107 SB
1264 400 152 (bench ) 163 SB
1427 400 95 (can ) 106 SB
1533 400 70 (be ) 81 SB
1614 400 64 (as ) 75 SB
1689 400 166 (simple ) 177 SB
1866 400 64 (as ) 75 SB
1941 400 41 (a ) 52 SB
1993 400 107 (state) 107 SB
375 500 222 (machine, ) 228 SB
603 500 63 (or ) 69 SB
672 500 64 (as ) 70 SB
742 500 211 (complex ) 217 SB
959 500 64 (as ) 71 SB
1030 500 41 (a ) 48 SB
1078 500 190 (process ) 197 SB
1275 500 154 (which ) 161 SB
1436 500 138 (reads ) 145 SB
1581 500 154 (inputs ) 161 SB
1742 500 124 (from ) 131 SB
1873 500 41 (a ) 48 SB
1921 500 89 (file ) 96 SB
2017 500 83 (and) 83 SB
375 600 1027 (compares the outputs to a pre-generated file.) 1027 SB
450 700 186 (Testing ) 194 SB
644 700 95 (can ) 103 SB
747 700 70 (be ) 78 SB
825 700 127 (done ) 135 SB
960 700 72 (on ) 80 SB
1040 700 41 (a ) 49 SB
1089 700 173 (variety ) 181 SB
1270 700 62 (of ) 70 SB
1340 700 163 (levels. ) 171 SB
1511 700 15 ( ) 24 SB
1535 700 261 (Simulators ) 270 SB
1805 700 178 (usually ) 187 SB
1992 700 108 (have) 108 SB
375 800 233 (their own ) 234 SB
609 800 118 (built ) 119 SB
728 800 58 (in ) 59 SB
787 800 253 (simulation ) 254 SB
1041 800 228 (packages ) 229 SB
1270 800 154 (which ) 155 SB
1425 800 175 (consist ) 176 SB
1601 800 62 (of ) 63 SB
1664 800 201 ("forcing ) 202 SB
1866 800 234 (functions") 234 SB
375 900 60 (to ) 61 SB
436 900 207 (simulate ) 208 SB
644 900 119 (your ) 120 SB
764 900 140 (code. ) 141 SB
905 900 15 ( ) 16 SB
921 900 116 (This ) 117 SB
1038 900 92 (has ) 93 SB
1131 900 69 (its ) 70 SB
1201 900 271 (limitations. ) 272 SB
1473 900 15 ( ) 16 SB
1489 900 94 (For ) 95 SB
1584 900 113 (one, ) 115 SB
1699 900 137 (using ) 139 SB
1838 900 174 (VHDL ) 176 SB
2014 900 46 (it ) 48 SB
2062 900 38 (is) 38 SB
375 1000 204 (possible ) 209 SB
584 1000 60 (to ) 65 SB
649 1000 133 (write ) 139 SB
788 1000 295 (complicated ) 301 SB
1089 1000 96 (test ) 102 SB
1191 1000 201 (benches ) 207 SB
1398 1000 254 (comprised ) 260 SB
1658 1000 62 (of ) 68 SB
1726 1000 202 (multiple ) 208 SB
1934 1000 112 (files ) 118 SB
2052 1000 48 (or) 48 SB
375 1100 206 (stimulus ) 227 SB
602 1100 177 (written ) 198 SB
800 1100 58 (in ) 79 SB
879 1100 133 (other ) 154 SB
1033 1100 243 (languages ) 264 SB
1297 1100 98 (and ) 119 SB
1416 1100 147 (saved ) 168 SB
1584 1100 64 (as ) 85 SB
1669 1100 41 (a ) 62 SB
1731 1100 101 (text ) 122 SB
1853 1100 89 (file ) 110 SB
1963 1100 60 (to ) 82 SB
2045 1100 55 (be) 55 SB
375 1200 311 (implemented ) 312 SB
687 1200 137 (using ) 138 SB
825 1200 223 (TEXTIO ) 224 SB
1049 1200 241 (functions. ) 243 SB
1292 1200 15 ( ) 17 SB
1309 1200 153 (These ) 155 SB
1464 1200 226 (functions ) 228 SB
1692 1200 142 (allow ) 144 SB
1836 1200 100 (you ) 102 SB
1938 1200 60 (to ) 62 SB
2000 1200 100 (read) 100 SB
375 1300 444 (and write text files.) 444 SB
300 1500 627 (5.3.1 8-1 MUX Test bench) 627 SB
0 0 0 fC
/fm 256 def
626 2 300 1559 B
1 F
n
450 1600 62 (In ) 63 SB
513 1600 137 (order ) 138 SB
651 1600 60 (to ) 61 SB
712 1600 257 (effectively ) 258 SB
970 1600 96 (test ) 97 SB
1067 1600 85 (the ) 86 SB
1153 1600 166 (MUX, ) 167 SB
1320 1600 83 (we ) 84 SB
1404 1600 125 (must ) 127 SB
1531 1600 133 (write ) 135 SB
1666 1600 41 (a ) 43 SB
1709 1600 96 (test ) 98 SB
1807 1600 152 (bench ) 154 SB
1961 1600 139 (which) 139 SB
375 1700 102 (will ) 104 SB
479 1700 157 (toggle ) 159 SB
638 1700 85 (the ) 87 SB
725 1700 169 (inputs. ) 171 SB
896 1700 15 ( ) 18 SB
914 1700 96 (We ) 99 SB
1013 1700 95 (can ) 98 SB
1111 1700 73 (do ) 76 SB
1187 1700 97 (this ) 100 SB
1287 1700 129 (quite ) 132 SB
1419 1700 257 (effectively ) 260 SB
1679 1700 116 (with ) 119 SB
1798 1700 41 (a ) 44 SB
1842 1700 174 (VHDL ) 177 SB
2019 1700 81 (test) 81 SB
375 1800 152 (bench.) 152 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
465 1942 1620 (ENTITY testbench IS -- we must declare all signals to ) 1620 SB
1200 1992 210 (look at) 210 SB
540 2042 150 (PORT\() 150 SB
750 2042 180 (data1:) 180 SB
1050 2042 60 (IN) 60 SB
1200 2042 300 (std_logic;) 300 SB
750 2092 180 (data2:) 180 SB
1050 2092 60 (IN) 60 SB
1200 2092 300 (std_logic;) 300 SB
750 2142 180 (data3:) 180 SB
1050 2142 60 (IN) 60 SB
1200 2142 300 (std_logic;) 300 SB
750 2192 150 (data4) 150 SB
900 2192 30 (:) 30 SB
1050 2192 60 (IN) 60 SB
1200 2192 300 (std_logic;) 300 SB
750 2242 180 (data5:) 180 SB
1050 2242 60 (IN) 60 SB
1200 2242 300 (std_logic;) 300 SB
750 2292 180 (data6:) 180 SB
1050 2292 60 (IN) 60 SB
1200 2292 300 (std_logic;) 300 SB
750 2342 210 (data7: ) 210 SB
1050 2342 60 (IN) 60 SB
1200 2342 300 (std_logic;) 300 SB
750 2392 180 (data8:) 180 SB
1050 2392 60 (IN) 60 SB
1200 2392 300 (std_logic;) 300 SB
750 2442 150 (addr:) 150 SB
1050 2442 60 (IN) 60 SB
1200 2442 870 (std_logic_vector\(3 DOWNTO 0\);) 870 SB
750 2492 210 (output:) 210 SB
1050 2492 90 (OUT) 90 SB
1200 2492 330 (std_logic\);) 330 SB
465 2542 420 (END testbench;) 420 SB
465 2642 1110 (ARCHITECTURE behavior OF testbench IS) 1110 SB
540 2692 510 (COMPONENT 8_1_mux) 510 SB
600 2742 1020 (GENERIC\(out_delay : time := 5 ns\);) 1020 SB
600 2792 150 (PORT\() 150 SB
900 2792 180 (data1:) 180 SB
1200 2792 60 (IN) 60 SB
1350 2792 300 (std_logic;) 300 SB
900 2842 180 (data2:) 180 SB
1200 2842 60 (IN) 60 SB
1350 2842 300 (std_logic;) 300 SB
900 2892 180 (data3:) 180 SB
1200 2892 60 (IN) 60 SB
1350 2892 300 (std_logic;) 300 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 44 44
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (44) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
900 267 180 (data4:) 180 SB
1200 267 60 (IN) 60 SB
1350 267 300 (std_logic;) 300 SB
900 317 180 (data5:) 180 SB
1200 317 60 (IN) 60 SB
1350 317 300 (std_logic;) 300 SB
900 367 180 (data6:) 180 SB
1200 367 60 (IN) 60 SB
1350 367 300 (std_logic;) 300 SB
900 417 210 (data7: ) 210 SB
1200 417 60 (IN) 60 SB
1350 417 300 (std_logic;) 300 SB
900 467 180 (data8:) 180 SB
1200 467 60 (IN) 60 SB
1350 467 210 (std_log) 210 SB
1560 467 90 (ic;) 90 SB
900 517 150 (addr:) 150 SB
1200 517 60 (IN) 60 SB
1350 517 750 (std_logic_vector\(3 DOWNTO) 750 SB
1350 567 90 (0\);) 90 SB
900 617 210 (output:) 210 SB
1200 617 90 (OUT) 90 SB
1350 617 330 (std_logic\);) 330 SB
540 667 420 (END COMPONENT;) 420 SB
465 717 150 (BEGIN) 150 SB
540 767 330 (u1: 8_1_mux) 330 SB
600 817 270 (PORT MAP\() 270 SB
900 817 450 (data1 => data1,) 450 SB
900 867 450 (data2 => data2,) 450 SB
900 917 450 (data3 => data3,) 450 SB
900 967 450 (data4 => data4,) 450 SB
900 1017 450 (data5 => data5,) 450 SB
900 1067 450 (data6 => data6,) 450 SB
900 1117 450 (data7 => data7,) 450 SB
900 1167 450 (data8 => data8,) 450 SB
900 1217 390 (addr => addr,) 390 SB
900 1267 540 (output => output\);) 540 SB
540 1317 210 (tester:) 210 SB
540 1367 210 (PROCESS) 210 SB
600 1417 630 (state : integer := 0;) 630 SB
540 1467 150 (BEGIN) 150 SB
600 1517 900 (WAIT UNTIL rising_edge\(clock\);) 900 SB
600 1567 390 (CASE state IS) 390 SB
750 1617 270 (WHEN 0 =>) 270 SB
1050 1617 390 (-- initialize) 390 SB
900 1667 390 (data1 <= '0';) 390 SB
900 1717 390 (data2 <= '0';) 390 SB
900 1767 390 (data3 <= '0';) 390 SB
900 1817 390 (data4 <= '0';) 390 SB
900 1867 390 (data5 <= '0';) 390 SB
900 1917 390 (data6 <= '0';) 390 SB
900 1967 390 (data7 <= '0';) 390 SB
900 2017 390 (data8 <= '0';) 390 SB
900 2067 420 (addr <= "000";) 420 SB
900 2117 330 (state := 1;) 330 SB
750 2167 270 (WHEN 1 =>) 270 SB
1050 2167 540 (-- test addressing) 540 SB
900 2217 390 (data1 <= '1';) 390 SB
900 2267 330 (state := 2;) 330 SB
750 2317 270 (WHEN 2 =>) 270 SB
900 2367 390 (data1 <= '0';) 390 SB
900 2417 390 (data2 <= '1';) 390 SB
900 2467 330 (state := 3;) 330 SB
750 2517 960 (WHEN 3 => -- test the second mux) 960 SB
900 2567 390 (data2 <= '0';) 390 SB
900 2617 390 (data5 <= '1';) 390 SB
900 2667 420 (addr <= "100";) 420 SB
900 2717 330 (state := 4;) 330 SB
750 2767 270 (WHEN 4 =>) 270 SB
900 2817 390 (data5 <= '0';) 390 SB
900 2867 330 (state := 5;) 330 SB
750 2917 510 (WHEN 5 => -- done) 510 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 45 45
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (45) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
900 267 360 (ASSERT FALSE) 360 SB
1050 317 510 (REPORT "test comp) 510 SB
1560 317 150 (lete") 150 SB
1200 367 420 (SEVERITY note;) 420 SB
600 417 270 (END CASE;) 270 SB
540 467 360 (END PROCESS;) 360 SB
465 517 390 (END behavior;) 390 SB
465 617 1080 (CONFIGURATION config OF testbench IS) 1080 SB
540 667 360 (FOR behavior) 360 SB
600 717 450 (FOR u1: 8_1_mux) 450 SB
750 767 750 (USE CONFIGURATION config;) 750 SB
600 817 240 (END FOR;) 240 SB
540 867 240 (END FOR;) 240 SB
465 917 330 (END config;) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
703 1075 993 (Listing 38. The complete 8-1 MUX VHDL) 993 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 46 46
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (46) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 1005 (CHAPTER 6: AM2900 VHDL EXAMPLE) 1005 SB
0 0 0 fC
/fm 256 def
1004 2 300 359 B
1 F
n
300 500 1133 (6.0 The AM2900 Bit- Sliced Pipelined Processor) 1133 SB
/fm 256 def
1132 2 300 559 B
1 F
n
450 600 104 (The ) 106 SB
556 600 224 (AM2900 ) 226 SB
782 600 147 (micro ) 149 SB
931 600 237 (controller ) 239 SB
1170 600 53 (is ) 56 SB
1226 600 69 (an ) 72 SB
1298 600 255 (interesting ) 258 SB
1556 600 176 (project ) 179 SB
1735 600 60 (to ) 63 SB
1798 600 256 (implement ) 259 SB
2057 600 43 (in) 43 SB
375 700 189 (VHDL. ) 197 SB
572 700 15 ( ) 23 SB
595 700 104 (The ) 112 SB
707 700 238 (processor ) 246 SB
953 700 128 (itself ) 136 SB
1089 700 145 (poses ) 153 SB
1242 700 248 (somewhat ) 256 SB
1498 700 62 (of ) 70 SB
1568 700 41 (a ) 49 SB
1617 700 233 (challenge ) 242 SB
1859 700 58 (in ) 67 SB
1926 700 174 (VHDL,) 174 SB
375 800 199 (because ) 201 SB
576 800 174 (VHDL ) 176 SB
752 800 53 (is ) 55 SB
807 800 41 (a ) 43 SB
850 800 140 (clock ) 142 SB
992 800 148 (based ) 151 SB
1143 800 235 (language, ) 238 SB
1381 800 58 (in ) 61 SB
1442 800 154 (which ) 157 SB
1599 800 132 (tasks ) 135 SB
1734 800 86 (are ) 89 SB
1823 800 186 (divided ) 189 SB
2012 800 88 (into) 88 SB
375 900 140 (clock ) 156 SB
531 900 159 (cycles ) 176 SB
707 900 98 (and ) 115 SB
822 900 125 (code ) 142 SB
964 900 53 (is ) 70 SB
1034 900 177 (written ) 194 SB
1228 900 60 (to ) 77 SB
1305 900 256 (implement ) 273 SB
1578 900 143 (them. ) 160 SB
1738 900 15 ( ) 32 SB
1770 900 104 (The ) 121 SB
1891 900 209 (AM2900) 209 SB
375 1000 248 (completes ) 250 SB
625 1000 98 (one ) 100 SB
725 1000 232 (operation ) 234 SB
959 1000 89 (per ) 91 SB
1050 1000 140 (clock ) 142 SB
1192 1000 151 (cycle. ) 153 SB
1345 1000 15 ( ) 17 SB
1362 1000 116 (This ) 118 SB
1480 1000 145 (poses ) 147 SB
1627 1000 41 (a ) 44 SB
1671 1000 205 (problem ) 208 SB
1879 1000 58 (in ) 61 SB
1940 1000 101 (that ) 104 SB
2044 1000 56 (all) 56 SB
375 1100 226 (functions ) 227 SB
602 1100 98 (and ) 99 SB
701 1100 269 (procedures ) 270 SB
971 1100 125 (must ) 126 SB
1097 1100 191 (execute ) 192 SB
1289 1100 312 (immediately. ) 313 SB
1602 1100 15 ( ) 16 SB
1618 1100 116 (This ) 117 SB
1735 1100 108 (also ) 109 SB
1844 1100 142 (limits ) 143 SB
1987 1100 66 (us ) 68 SB
2055 1100 45 (to) 45 SB
375 1200 137 (using ) 141 SB
516 1200 222 (variables ) 226 SB
742 1200 188 (internal ) 192 SB
934 1200 60 (to ) 64 SB
998 1200 85 (the ) 89 SB
1087 1200 385 (microprocessor, ) 389 SB
1476 1200 83 (we ) 87 SB
1563 1200 95 (can ) 99 SB
1662 1200 115 (only ) 120 SB
1782 1200 92 (use ) 97 SB
1879 1200 173 (signals ) 178 SB
2057 1200 43 (in) 43 SB
375 1300 85 (the ) 95 SB
470 1300 240 (beginning ) 250 SB
720 1300 98 (and ) 108 SB
828 1300 98 (end ) 108 SB
936 1300 62 (of ) 72 SB
1008 1300 85 (the ) 95 SB
1103 1300 205 (process. ) 215 SB
1318 1300 15 ( ) 25 SB
1343 1300 240 (Appendix ) 250 SB
1593 1300 56 (A ) 66 SB
1659 1300 206 (contains ) 216 SB
1875 1300 85 (the ) 95 SB
1970 1300 130 (entire) 130 SB
375 1400 991 (listing of the AM2900 VHDL source code.) 991 SB
300 1600 165 (6.1 I/O) 165 SB
/fm 256 def
164 2 300 1659 B
1 F
n
450 1700 119 (First ) 127 SB
577 1700 130 (thing ) 138 SB
715 1700 101 (that ) 109 SB
824 1700 125 (must ) 133 SB
957 1700 70 (be ) 78 SB
1035 1700 272 (determined ) 280 SB
1315 1700 86 (are ) 94 SB
1409 1700 85 (the ) 93 SB
1502 1700 154 (inputs ) 162 SB
1664 1700 98 (and ) 106 SB
1770 1700 184 (outputs ) 192 SB
1962 1700 60 (to ) 68 SB
2030 1700 70 (the) 70 SB
375 1800 776 (system.  For inputs, we will need:) 776 SB
450 1900 184 (data_in:) 184 SB
750 1900 674 (a 32 bit input to the AM2900) 674 SB
450 2000 190 (address:) 190 SB
750 2000 948 (The address in which to store the data_in) 948 SB
450 2100 255 (mem_load:) 255 SB
750 2100 1313 (a toggle switch to determine whether to load the memory) 1313 SB
750 2200 532 (or execute the program) 532 SB
450 2300 140 (clock:) 140 SB
750 2300 810 (The clock input \(12.5 Mhz is used\)) 810 SB
375 2500 600 (For Outputs we will need:) 600 SB
450 2600 43 (y:) 43 SB
750 2600 750 (the 4 bit display on the AM2900) 750 SB
450 2700 172 (pc_out:) 172 SB
750 2700 465 (the program counter) 465 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 47 47
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (47) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
375 300 522 (For storage we'll need:) 522 SB
450 400 238 (inst_mem:) 238 SB
750 400 73 (16 ) 73 SB
823 400 969 (32-bit words used to store the instructions) 969 SB
450 500 203 (memory:) 203 SB
750 500 73 (16 ) 73 SB
823 500 836 (4-bit words used for register storage) 836 SB
450 600 216 (pipe_reg:) 216 SB
750 600 622 (The 16 bit pipeline register) 622 SB
375 800 662 (Internal Storage will require:) 662 SB
450 900 135 (stack:) 135 SB
750 900 798 (The stack used for address storage) 798 SB
450 1000 131 (r, s, q) 131 SB
581 1000 15 (:) 15 SB
750 1000 387 (Internal registers) 387 SB
450 1100 147 (status:) 147 SB
750 1100 939 (The status word from the calculation of f) 939 SB
450 1300 104 (The ) 123 SB
573 1300 188 (internal ) 207 SB
780 1300 182 (storage ) 201 SB
981 1300 226 (functions ) 246 SB
1227 1300 86 (are ) 106 SB
1333 1300 254 (comprised ) 274 SB
1607 1300 62 (of ) 82 SB
1689 1300 169 (mostly ) 189 SB
1878 1300 222 (variables.) 222 SB
375 1400 153 (These ) 154 SB
529 1400 222 (variables ) 223 SB
752 1400 102 (will ) 103 SB
855 1400 70 (be ) 71 SB
926 1400 121 (used ) 122 SB
1048 1400 81 (for ) 82 SB
1130 1400 330 (asynchronous ) 332 SB
1462 1400 270 (operations, ) 272 SB
1734 1400 67 (so ) 69 SB
1803 1400 113 (they ) 115 SB
1918 1400 125 (must ) 127 SB
2045 1400 55 (be) 55 SB
375 1500 211 (declared ) 220 SB
595 1500 64 (as ) 73 SB
668 1500 237 (variables. ) 246 SB
914 1500 15 ( ) 24 SB
938 1500 116 (This ) 126 SB
1064 1500 92 (has ) 102 SB
1166 1500 85 (the ) 95 SB
1261 1500 315 (disadvantage ) 325 SB
1586 1500 62 (of ) 72 SB
1658 1500 88 (not ) 98 SB
1756 1500 213 (allowing ) 223 SB
1979 1500 66 (us ) 76 SB
2055 1500 45 (to) 45 SB
375 1600 734 (display the outputs on the trace ) 735 SB
1110 1600 215 (window. ) 216 SB
1326 1600 15 ( ) 16 SB
1342 1600 96 (We ) 97 SB
1439 1600 95 (can ) 96 SB
1535 1600 194 (monitor ) 195 SB
1730 1600 222 (variables ) 223 SB
1953 1600 147 (during) 147 SB
375 1700 1513 (execution, but only signals can be displayed on the trace window.) 1513 SB
300 1900 319 (6.2 Execution) 319 SB
0 0 0 fC
/fm 256 def
318 2 300 1959 B
1 F
n
450 2000 127 (Next ) 138 SB
588 2000 83 (we ) 94 SB
682 2000 125 (must ) 136 SB
818 2000 243 (determine ) 254 SB
1072 2000 85 (the ) 96 SB
1168 2000 237 (execution ) 249 SB
1417 2000 137 (order ) 149 SB
1566 2000 81 (for ) 93 SB
1659 2000 85 (the ) 97 SB
1756 2000 239 (AM2900. ) 251 SB
2007 2000 15 ( ) 27 SB
2034 2000 66 (By) 66 SB
375 2100 188 (looking ) 207 SB
582 2100 57 (at ) 76 SB
658 2100 85 (the ) 104 SB
762 2100 169 (inputs, ) 189 SB
951 2100 83 (we ) 103 SB
1054 2100 90 (see ) 110 SB
1164 2100 101 (that ) 121 SB
1285 2100 85 (the ) 105 SB
1390 2100 224 (AM2900 ) 244 SB
1634 2100 92 (has ) 112 SB
1746 2100 102 (two ) 122 SB
1868 2100 165 (modes ) 185 SB
2053 2100 47 (of) 47 SB
375 2200 247 (operation, ) 249 SB
624 2200 112 (data ) 114 SB
738 2200 132 (entry ) 134 SB
872 2200 98 (and ) 100 SB
972 2200 252 (execution. ) 254 SB
1226 2200 15 ( ) 17 SB
1243 2200 96 (We ) 99 SB
1342 2200 95 (can ) 98 SB
1440 2200 222 (therefore ) 225 SB
1665 2200 226 (construct ) 229 SB
1894 2200 85 (the ) 88 SB
1982 2200 118 (outer) 118 SB
375 2300 415 (case statement as:) 415 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
375 2442 480 (CASE mem_load IS) 480 SB
375 2492 330 (WHEN '0' =>) 330 SB
375 2542 1350 (-- execute code related to loading the memory) 1350 SB
375 2592 330 (WHEN '1' =>) 330 SB
375 2642 1110 (-- execute the instructions in memory) 1110 SB
375 2692 270 (END CASE;) 270 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
841 2825 717 (Listing 39. AM2900 Execution) 717 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 48 48
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (48) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 462 (6.2.1 Memory Load) 462 SB
0 0 0 fC
/fm 256 def
461 2 300 359 B
1 F
n
450 400 104 (The ) 108 SB
558 400 203 (memory ) 207 SB
765 400 114 (load ) 118 SB
883 400 72 (by ) 76 SB
959 400 173 (default ) 177 SB
1136 400 148 (resets ) 152 SB
1288 400 85 (the ) 89 SB
1377 400 70 (pc ) 74 SB
1451 400 98 (and ) 103 SB
1554 400 82 (sp. ) 87 SB
1641 400 15 ( ) 20 SB
1661 400 96 (We ) 101 SB
1762 400 73 (do ) 78 SB
1840 400 97 (this ) 102 SB
1942 400 67 (so ) 72 SB
2014 400 86 (that) 86 SB
375 500 85 (the ) 90 SB
465 500 207 (machine ) 212 SB
677 500 138 (starts ) 143 SB
820 500 136 (clean ) 141 SB
961 500 129 (upon ) 134 SB
1095 500 252 (execution. ) 257 SB
1352 500 15 ( ) 21 SB
1373 500 142 (Next, ) 148 SB
1521 500 83 (we ) 89 SB
1610 500 158 (assign ) 164 SB
1774 500 85 (the ) 91 SB
1865 500 184 (data_in ) 190 SB
2055 500 45 (to) 45 SB
375 600 85 (the ) 88 SB
463 600 199 (location ) 202 SB
665 600 58 (in ) 61 SB
726 600 85 (the ) 88 SB
814 600 258 (instruction ) 261 SB
1075 600 203 (memory ) 206 SB
1281 600 187 (pointed ) 190 SB
1471 600 60 (to ) 63 SB
1534 600 72 (by ) 75 SB
1609 600 85 (the ) 88 SB
1697 600 209 (supplied ) 213 SB
1910 600 190 (address.) 190 SB
375 700 1188 (All of this is accomplished with the following code:) 1188 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
450 917 240 (pc := 0;) 240 SB
450 967 240 (sp := 0;) 240 SB
450 1017 480 (tempy := "0000";) 480 SB
450 1067 870 (inst_mem\(address\) <= data_in;) 870 SB
450 1117 720 (pipe_reg <= inst_mem\(0\);) 720 SB
450 1167 390 (pc_out <= pc;) 390 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
792 1300 816 (Listing 40. AM2900 Memory Load) 816 SB
300 1400 363 (6.2.2 Execution) 363 SB
/fm 256 def
362 2 300 1459 B
1 F
n
450 1500 104 (The ) 110 SB
560 1500 133 (other ) 140 SB
700 1500 142 (mode ) 149 SB
849 1500 62 (of ) 69 SB
918 1500 232 (operation ) 239 SB
1157 1500 53 (is ) 60 SB
1217 1500 85 (the ) 92 SB
1309 1500 147 (micro ) 154 SB
1463 1500 208 (program ) 215 SB
1678 1500 237 (execution ) 244 SB
1922 1500 178 (section.) 178 SB
375 1600 116 (This ) 118 SB
493 1600 178 (section ) 180 SB
673 1600 200 (requires ) 202 SB
875 1600 173 (careful ) 175 SB
1050 1600 188 (thought ) 190 SB
1240 1600 81 (for ) 83 SB
1323 1600 85 (the ) 87 SB
1410 1600 175 (timing. ) 177 SB
1587 1600 15 ( ) 17 SB
1604 1600 119 (First ) 121 SB
1725 1600 83 (we ) 85 SB
1810 1600 125 (must ) 128 SB
1938 1600 117 (look ) 120 SB
2058 1600 42 (at) 42 SB
375 1700 85 (the ) 91 SB
466 1700 258 (instruction ) 264 SB
730 1700 181 (format. ) 187 SB
917 1700 15 ( ) 21 SB
938 1700 137 (From ) 143 SB
1081 1700 97 (this ) 103 SB
1184 1700 83 (we ) 89 SB
1273 1700 90 (see ) 96 SB
1369 1700 101 (that ) 107 SB
1476 1700 130 (there ) 136 SB
1612 1700 53 (is ) 59 SB
1671 1700 41 (a ) 47 SB
1718 1700 188 (definite ) 195 SB
1913 1700 137 (order ) 144 SB
2057 1700 43 (in) 43 SB
375 1800 154 (which ) 161 SB
536 1800 85 (the ) 92 SB
628 1800 258 (instruction ) 265 SB
893 1800 53 (is ) 60 SB
953 1800 224 (decoded. ) 231 SB
1184 1800 15 ( ) 22 SB
1206 1800 81 (By ) 88 SB
1294 1800 188 (looking ) 196 SB
1490 1800 57 (at ) 65 SB
1555 1800 85 (the ) 93 SB
1648 1800 273 (instruction, ) 281 SB
1929 1800 83 (we ) 91 SB
2020 1800 80 (can) 80 SB
375 1900 562 (determine the following:) 562 SB
450 2000 44 (1.) 44 SB
600 2000 217 (The next ) 217 SB
817 2000 1166 (micro-instruction control depends on the value of f) 1166 SB
600 2100 973 (and the status register \(also depends on  f\)) 973 SB
450 2200 44 (2.) 44 SB
600 2200 1431 (The MUX control is only used for four of the Load operations) 1431 SB
450 2300 44 (3.) 44 SB
600 2300 897 (Load is based upon the ALU operation) 897 SB
450 2400 44 (4.) 44 SB
600 2400 456 (The ALU is depend) 456 SB
1056 2400 555 (ent on the source select.) 555 SB
375 2500 1592 (Therefore, we will need to perform operations in the following order:) 1592 SB
450 2600 316 (Source Select) 316 SB
450 2700 117 (ALU) 117 SB
450 2800 1175 (Destination Control and MUX \(where appropriate\)) 1175 SB
450 2900 564 (Next Instruction Control) 564 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 49 49
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (49) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 492 (6.2.2.1 Source Select) 492 SB
0 0 0 fC
/fm 256 def
491 2 300 359 B
1 F
n
450 400 1057 (The code for the source select appears below:) 1057 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 542 1770 (          CASE ss IS                     --  load registers) 1770 SB
300 592 1770 (            WHEN "000" =>                --  r <= a, s <= q) 1770 SB
300 642 1140 (              int_address := bvtoi\(a\);) 1140 SB
300 692 1170 (              r := memory\(int_address\);) 1170 SB
300 742 630 (              s := q;) 630 SB
300 792 1770 (            WHEN "001" =>                --  r <= a, s <= b) 1770 SB
300 842 1140 (              int_address := bvtoi\(a\);) 1140 SB
300 892 1170 (              r := memory\(int_address\);) 1170 SB
300 942 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 992 1170 (              s := memory\(int_address\);) 1170 SB
300 1042 1770 (            WHEN "010" =>                --  r <= 0, s <= q) 1770 SB
300 1092 780 (              r := "0000";) 780 SB
300 1142 630 (              s := q;) 630 SB
300 1192 1770 (            WHEN "011" =>                --  r <= 0, s <= b) 1770 SB
300 1242 780 (              r := "0000";) 780 SB
300 1292 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 1342 1170 (              s := memory\(int_address\);) 1170 SB
300 1392 1770 (            WHEN "100" =>                --  r <= 0, s <= a) 1770 SB
300 1442 780 (              r := "0000";) 780 SB
300 1492 1140 (              int_address := bvtoi\(a\);) 1140 SB
300 1542 1170 (              s := memory\(int_address\);) 1170 SB
300 1592 1770 (            WHEN "101" =>                --  r <= d, s <= a) 1770 SB
300 1642 630 (              r := d;) 630 SB
300 1692 1140 (              int_address := bvtoi\(a\);) 1140 SB
300 1742 1170 (              s := memory\(int_address\);) 1170 SB
300 1792 1770 (            WHEN "110" =>                --  r <= d, s <= q) 1770 SB
300 1842 630 (              r := d;) 630 SB
300 1892 630 (              s := q;) 630 SB
300 1942 1800 (            WHEN "111" =>                --  r <= d, s <= 0;) 1800 SB
300 1992 630 (              r := d;) 630 SB
300 2042 780 (              s := "0000";) 780 SB
300 2092 780 (            WHEN OTHERS =>) 780 SB
300 2142 1410 (          END CASE;                      --  ss) 1410 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
799 2275 802 (Listing 41. AM2900 Source Select) 802 SB
450 2375 116 (This ) 121 SB
571 2375 178 (section ) 184 SB
755 2375 62 (of ) 68 SB
823 2375 125 (code ) 131 SB
954 2375 53 (is ) 59 SB
1013 2375 149 (pretty ) 155 SB
1168 2375 186 (straight ) 192 SB
1360 2375 212 (forward. ) 218 SB
1578 2375 15 ( ) 21 SB
1599 2375 96 (We ) 102 SB
1701 2375 158 (assign ) 164 SB
1865 2375 210 (registers ) 216 SB
2081 2375 19 (r) 19 SB
375 2475 98 (and ) 106 SB
481 2475 38 (s ) 46 SB
527 2475 85 (the ) 93 SB
620 2475 161 (values ) 169 SB
789 2475 187 (pointed ) 195 SB
984 2475 60 (to ) 69 SB
1053 2475 72 (by ) 81 SB
1134 2475 85 (the ) 94 SB
1228 2475 210 (registers ) 219 SB
1447 2475 63 (or ) 72 SB
1519 2475 229 (switches. ) 238 SB
1757 2475 15 ( ) 24 SB
1781 2475 96 (We ) 105 SB
1886 2475 73 (do ) 82 SB
1968 2475 97 (call ) 106 SB
2074 2475 26 (a) 26 SB
375 2575 203 (function ) 206 SB
581 2575 132 (bvtoi ) 135 SB
716 2575 154 (which ) 157 SB
873 2575 135 (takes ) 138 SB
1011 2575 41 (a ) 45 SB
1056 2575 75 (bit ) 79 SB
1135 2575 159 (vector ) 163 SB
1298 2575 64 (as ) 68 SB
1366 2575 69 (an ) 73 SB
1439 2575 131 (input ) 135 SB
1574 2575 98 (and ) 102 SB
1676 2575 174 (returns ) 178 SB
1854 2575 69 (an ) 73 SB
1927 2575 173 (integer.) 173 SB
375 2675 96 (We ) 105 SB
480 2675 92 (use ) 101 SB
581 2675 97 (this ) 106 SB
687 2675 173 (integer ) 182 SB
869 2675 60 (to ) 69 SB
938 2675 117 (look ) 126 SB
1064 2675 72 (up ) 81 SB
1145 2675 85 (the ) 94 SB
1239 2675 138 (value ) 147 SB
1386 2675 58 (in ) 67 SB
1453 2675 85 (the ) 95 SB
1548 2675 218 (memory. ) 228 SB
1776 2675 15 ( ) 25 SB
1801 2675 116 (This ) 126 SB
1927 2675 125 (code ) 135 SB
2062 2675 38 (is) 38 SB
375 2775 1684 (included in a library supplied by Synopsis, reproduced in the appendices.) 1684 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 50 50
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (50) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 293 (6.2.2.2 ALU) 293 SB
0 0 0 fC
/fm 256 def
292 2 300 359 B
1 F
n
450 400 104 (The ) 121 SB
571 400 132 (ALU ) 149 SB
720 400 125 (code ) 142 SB
862 400 266 (determines ) 283 SB
1145 400 85 (the ) 102 SB
1247 400 132 (ALU ) 149 SB
1396 400 232 (operation ) 250 SB
1646 400 60 (to ) 78 SB
1724 400 198 (perform ) 216 SB
1940 400 72 (on ) 90 SB
2030 400 70 (the) 70 SB
375 500 818 (registers.  The code appears below:) 818 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 642 510 (      CASE alu IS) 510 SB
300 692 1500 (        WHEN "000" =>                --  f = r + s) 1500 SB
300 742 1320 (          add_sub\('0', r, s, cn, f, status\);) 1320 SB
300 792 1500 (        WHEN "001" =>                --  f = s - r) 1500 SB
300 842 1320 (          add_sub\('1', s, r, cn, f, status\);) 1320 SB
300 892 1500 (        WHEN "010" =>                --  f = r - s) 1500 SB
300 942 1320 (          add_sub\('1', r, s, cn, f, status\);) 1320 SB
300 992 1530 (        WHEN "011" =>                --  f = r OR s) 1530 SB
300 1042 660 (          f := r OR s;) 660 SB
300 1092 1560 (        WHEN "100" =>                --  f = r AND s) 1560 SB
300 1142 690 (          f := r AND s;) 690 SB
300 1192 1740 (        WHEN "101" =>                --  f = \(NOT r\) AND s) 1740 SB
300 1242 840 (          f := NOT\(r\) AND s;) 840 SB
300 1292 1560 (        WHEN "110" =>                --  f = r XOR s) 1560 SB
300 1342 690 (          f := r XOR s;) 690 SB
300 1392 1710 (        WHEN "111" =>                --  f = NOT\(r XOR s\)) 1710 SB
300 1442 840 (          f := NOT\(r XOR s\);) 840 SB
300 1492 660 (        WHEN OTHERS =>) 660 SB
300 1542 1320 (      END CASE;                      --  alu) 1320 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
898 1675 603 (Listing 42. AM2900 ALU) 603 SB
450 1775 135 (Most ) 139 SB
589 1775 62 (of ) 66 SB
655 1775 85 (the ) 89 SB
744 1775 255 (operations ) 260 SB
1004 1775 95 (can ) 100 SB
1104 1775 70 (be ) 75 SB
1179 1775 253 (performed ) 258 SB
1437 1775 116 (with ) 121 SB
1558 1775 174 (VHDL ) 179 SB
1737 1775 259 (primitives. ) 264 SB
2001 1775 15 ( ) 20 SB
2021 1775 79 (For) 79 SB
375 1875 1420 (the addition and subtraction, we define a procedure, add_sub:) 1420 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 2017 990 (  PROCEDURE add_sub\(sub : IN bit;) 990 SB
300 2067 1530 (                     r : IN bit_vector\(3 DOWNTO 0\);) 1530 SB
300 2117 1530 (                     s : IN bit_vector\(3 DOWNTO 0\);) 1530 SB
300 2167 990 (                     cn : IN bit;) 990 SB
300 2217 1560 (                     f : OUT bit_vector\(3 DOWNTO 0\);) 1560 SB
300 2267 1680 (                     status : OUT bit_vector\(3 DOWNTO 0\)) 1680 SB
300 2317 750 (                     \) IS) 750 SB
300 2367 1620 (    VARIABLE carry : bit_vector\(3 DOWNTO 0\) := "0000";) 1620 SB
300 2417 1380 (    VARIABLE int_sub : bit_vector\(3 DOWNTO 0\);) 1380 SB
300 2467 1320 (    VARIABLE final : bit_vector\(3 DOWNTO 0\);) 1320 SB
300 2567 270 (    BEGIN) 270 SB
300 2667 1800 (------------------------------------------------------------) 1800 SB
300 2717 570 (-------------------) 570 SB
300 2767 1200 (--  if subtraction, take twos compliment) 1200 SB
300 2817 1800 (------------------------------------------------------------) 1800 SB
300 2867 570 (-------------------) 570 SB
300 2917 750 (      IF \(sub = '1'\) THEN) 750 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 51 51
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (51) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 1290 (        int_sub\(0\) := sub XOR s\(0\) XOR '1';) 1290 SB
300 317 990 (        carry\(0\) := sub AND s\(0\);) 990 SB
300 367 1440 (        int_sub\(1\) := sub XOR s\(1\) XOR carry\(0\);) 1440 SB
300 417 1800 (        carry\(1\) := \(sub AND s\(1\)\) OR \(carry\(0\) AND \(sub XOR) 1800 SB
300 467 210 (s\(1\)\)\);) 210 SB
300 517 1440 (        int_sub\(2\) := sub XOR s\(2\) XOR carry\(1\);) 1440 SB
300 567 1800 (        carry\(2\) := \(sub AND s\(2\)\) OR \(carry\(1\) AND \(sub XOR) 1800 SB
300 617 210 (s\(2\)\)\);) 210 SB
300 667 1440 (        int_sub\(3\) := sub XOR s\(3\) XOR carry\(2\);) 1440 SB
300 717 390 (      END IF;) 390 SB
300 767 1800 (------------------------------------------------------------) 1800 SB
300 817 570 (-------------------) 570 SB
300 867 810 (--  now add the two numbers) 810 SB
300 917 1800 (------------------------------------------------------------) 1800 SB
300 967 570 (-------------------) 570 SB
300 1067 1350 (      final\(0\) := int_sub\(0\) XOR r\(0\) XOR cn;) 1350 SB
300 1117 1500 (      carry\(0\) := \(int_sub\(0\) AND r\(0\)\) OR \(cn AND) 1500 SB
300 1167 690 (\(int_sub\(0\) XOR r\(0\)\)\);) 690 SB
300 1217 1530 (      final\(1\) := int_sub\(1\) XOR r\(1\) XOR carry\(0\);) 1530 SB
300 1267 1680 (      carry\(1\) := \(int_sub\(1\) AND r\(1\)\) OR \(carry\(0\) AND) 1680 SB
300 1317 690 (\(int_sub\(1\) XOR r\(1\)\)\);) 690 SB
300 1367 1530 (      final\(2\) := int_sub\(2\) XOR r\(2\) XOR carry\(1\);) 1530 SB
300 1417 1680 (      carry\(2\) := \(int_sub\(2\) AND r\(2\)\) OR \(carry\(1\) AND) 1680 SB
300 1467 690 (\(int_sub\(2\) XOR r\(2\)\)\);) 690 SB
300 1517 1530 (      final\(3\) := int_sub\(3\) XOR r\(3\) XOR carry\(2\);) 1530 SB
300 1567 1680 (      carry\(3\) := \(int_sub\(3\) AND r\(3\)\) OR \(carry\(2\) AND) 1680 SB
300 1617 690 (\(int_sub\(3\) XOR r\(3\)\)\);) 690 SB
300 1667 900 (      IF \(final = "0000"\) THEN) 900 SB
300 1717 750 (        status\(2\) := '0';) 750 SB
300 1767 390 (      END IF;) 390 SB
300 1817 840 (      status\(0\) := final\(3\);) 840 SB
300 1867 840 (      status\(1\) := carry\(3\);) 840 SB
300 1917 1230 (      status\(3\) := carry\(3\) XOR carry\(2\);) 1230 SB
300 1967 510 (      f := final;) 510 SB
300 2017 480 (    END add_sub;) 480 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
705 2150 989 (Listing 43. AM2900 Add/Subtract Routine) 989 SB
450 2250 104 (The ) 119 SB
569 2250 84 (add) 84 SB
653 2250 124 (_sub ) 139 SB
792 2250 176 (routine ) 191 SB
983 2250 153 (above ) 168 SB
1151 2250 135 (takes ) 151 SB
1302 2250 58 (in ) 74 SB
1376 2250 85 (the ) 101 SB
1477 2250 102 (two ) 118 SB
1595 2250 202 (register, ) 218 SB
1813 2250 41 (a ) 57 SB
1870 2250 75 (bit ) 91 SB
1961 2250 139 (which) 139 SB
375 2350 1352 (determines whether to add or subtract. It returns the result ) 1353 SB
1728 2350 98 (and ) 99 SB
1827 2350 103 (sets ) 104 SB
1931 2350 85 (the ) 86 SB
2017 2350 83 (bits) 83 SB
375 2450 58 (in ) 66 SB
441 2450 85 (the ) 93 SB
534 2450 147 (status ) 155 SB
689 2450 202 (register. ) 210 SB
899 2450 15 ( ) 23 SB
922 2450 142 (Since ) 151 SB
1073 2450 46 (it ) 55 SB
1128 2450 53 (is ) 62 SB
1190 2450 115 (only ) 124 SB
1314 2450 41 (a ) 50 SB
1364 2450 109 (four ) 118 SB
1482 2450 75 (bit ) 84 SB
1566 2450 247 (operation, ) 256 SB
1822 2450 72 (no ) 81 SB
1903 2450 140 (loops ) 149 SB
2052 2450 48 (or) 48 SB
375 2550 1354 (recursion is used, and we explicitly spell out the operation.) 1354 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 52 52
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (52) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 777 (6.2.2.3 Destination Control Word) 777 SB
0 0 0 fC
/fm 256 def
776 2 300 359 B
1 F
n
450 400 104 (The ) 105 SB
555 400 266 (destination ) 267 SB
822 400 177 (control ) 178 SB
1000 400 134 (word ) 135 SB
1135 400 266 (determines ) 267 SB
1402 400 156 (where ) 157 SB
1559 400 85 (the ) 86 SB
1645 400 117 (final ) 118 SB
1763 400 138 (value ) 140 SB
1903 400 53 (is ) 55 SB
1958 400 142 (stored) 142 SB
375 500 1700 (and any final shifting operations are performed.  The code appears below:) 1700 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 667 1710 (          mux\(1\) := mux1;                --  form the mux) 1710 SB
300 717 360 (control word) 360 SB
300 767 1680 (          mux\(0\) := mux0;                --  used in the) 1680 SB
300 817 360 (load command) 360 SB
300 917 1800 (------------------------------------------------------------) 1800 SB
300 967 570 (-------------------) 570 SB
300 1017 1740 (--  decode the destination control word, y, the output, is) 1740 SB
300 1067 1350 (--  normally equal to f except for case "110") 1350 SB
300 1117 1800 (------------------------------------------------------------) 1800 SB
300 1167 570 (-------------------) 570 SB
300 1217 600 (          CASE dc IS) 600 SB
300 1267 1530 (            WHEN "000" =>                --  q <= f) 1530 SB
300 1317 630 (              q := f;) 630 SB
300 1367 750 (              tempy := f;) 750 SB
300 1417 1440 (            WHEN "001" =>                --  NOP) 1440 SB
300 1467 750 (              tempy := f;) 750 SB
300 1517 1770 (            WHEN "010" =>                --  memory\(b\) <= f) 1770 SB
1500 1567 240 (--  y=a?) 240 SB
300 1617 750 (              tempy := a;) 750 SB
300 1667 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 1717 1170 (              memory\(int_address\) <= f;) 1170 SB
300 1767 1770 (            WHEN "011" =>                --  memory\(b\) <= f) 1770 SB
300 1817 750 (              tempy := f;) 750 SB
300 1867 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 1917 1170 (              memory\(int_address\) <= f;) 1170 SB
300 1967 1620 (            WHEN "100" =>                --  b <= f/2,) 1620 SB
1500 2017 330 (-- q <= q/2) 330 SB
300 2067 750 (              tempy := f;) 750 SB
300 2117 750 (              CASE mux IS) 750 SB
300 2167 1470 (                WHEN "00" =>             --  zero) 1470 SB
300 2217 930 (                  f\(3\) := f\(2\);) 930 SB
300 2267 930 (                  f\(2\) := f\(1\);) 930 SB
300 2317 930 (                  f\(1\) := f\(0\);) 930 SB
300 2367 900 (                  f\(0\) := '0';) 900 SB
300 2417 930 (                  q\(3\) := q\(2\);) 930 SB
300 2467 930 (                  q\(2\) := q\(1\);) 930 SB
300 2517 930 (                  q\(1\) := q\(0\);) 930 SB
300 2567 900 (                  q\(0\) := '0';) 900 SB
300 2617 1530 (                WHEN "01" =>             --  rotate) 1530 SB
300 2667 930 (                  temp := f\(0\);) 930 SB
300 2717 930 (                  f\(0\) := f\(1\);) 930 SB
300 2767 930 (                  f\(1\) := f\(2\);) 930 SB
300 2817 930 (                  f\(2\) := f\(3\);) 930 SB
300 2867 930 (                  f\(3\) := temp;) 930 SB
300 2917 930 (                  temp := q\(0\);) 930 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 53 53
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (53) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 930 (                  q\(0\) := q\(1\);) 930 SB
300 317 930 (                  q\(1\) := q\(2\);) 930 SB
300 367 930 (                  q\(2\) := q\(3\);) 930 SB
300 417 930 (                  q\(3\) := temp;) 930 SB
300 467 1740 (                WHEN "10" =>             --  rotate double) 1740 SB
300 517 930 (                  temp := q\(3\);) 930 SB
300 567 930 (                  q\(3\) := f\(0\);) 930 SB
300 617 930 (                  f\(0\) := f\(1\);) 930 SB
300 667 930 (                  f\(1\) := f\(2\);) 930 SB
300 717 930 (                  f\(2\) := f\(3\);) 930 SB
300 767 930 (                  f\(3\) := q\(0\);) 930 SB
300 817 930 (                  q\(0\) := q\(1\);) 930 SB
300 867 930 (                  q\(1\) := q\(2\);) 930 SB
300 917 930 (                  q\(2\) := temp;) 930 SB
300 967 1650 (                WHEN "11" =>             --  arithmetic) 1650 SB
1500 1017 270 (-- double) 270 SB
300 1067 930 (                  q\(0\) := q\(1\);) 930 SB
300 1117 930 (                  q\(1\) := q\(2\);) 930 SB
300 1167 930 (                  q\(2\) := q\(3\);) 930 SB
300 1217 930 (                  q\(3\) := f\(0\);) 930 SB
300 1267 930 (                  f\(0\) := f\(1\);) 930 SB
300 1317 930 (                  f\(1\) := f\(2\);) 930 SB
300 1367 930 (                  f\(2\) := f\(3\);) 930 SB
300 1417 1440 (              END CASE;                  --  mux) 1440 SB
300 1467 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 1517 1170 (              memory\(int_address\) <= f;) 1170 SB
300 1567 1590 (            WHEN "101" =>                --  b <= f/2) 1590 SB
300 1617 750 (              tempy := f;) 750 SB
300 1667 750 (              CASE mux IS) 750 SB
300 1717 1470 (                WHEN "00" =>             --  zero) 1470 SB
300 1767 930 (                  f\(3\) := f\(2\);) 930 SB
300 1817 930 (                  f\(2\) := f\(1\);) 930 SB
300 1867 930 (                  f\(1\) := f\(0\);) 930 SB
300 1917 900 (                  f\(0\) := '0';) 900 SB
300 1967 1530 (                WHEN "01" =>             --  rotate) 1530 SB
300 2017 930 (                  temp := f\(0\);) 930 SB
300 2067 930 (                  f\(0\) := f\(1\);) 930 SB
300 2117 930 (                  f\(1\) := f\(2\);) 930 SB
300 2167 930 (                  f\(2\) := f\(3\);) 930 SB
300 2217 930 (                  f\(3\) := temp;) 930 SB
300 2267 1740 (                WHEN "10" =>             --  rotate double) 1740 SB
300 2317 930 (                  f\(0\) := f\(1\);) 930 SB
300 2367 930 (                  f\(1\) := f\(2\);) 930 SB
300 2417 930 (                  f\(2\) := f\(3\);) 930 SB
300 2467 930 (                  f\(3\) := q\(0\);) 930 SB
300 2517 1650 (                WHEN "11" =>             --  arithmetic) 1650 SB
1500 2567 300 (--  double) 300 SB
300 2617 930 (                  f\(0\) := f\(1\);) 930 SB
300 2667 930 (                  f\(1\) := f\(2\);) 930 SB
300 2717 930 (                  f\(2\) := f\(3\);) 930 SB
300 2767 1440 (              END CASE;                  --  mux) 1440 SB
300 2817 1590 (            WHEN "110" =>                --  b <= 2f,) 1590 SB
1500 2867 300 (-- q <= 2q) 300 SB
300 2917 750 (              tempy := f;) 750 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 54 54
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (54) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 750 (              CASE mux IS) 750 SB
300 317 1470 (                WHEN "00" =>             --  zero) 1470 SB
300 367 930 (                  f\(3\) := f\(2\);) 930 SB
300 417 930 (                  f\(2\) := f\(1\);) 930 SB
300 467 930 (                  f\(1\) := f\(0\);) 930 SB
300 517 900 (                  f\(0\) := '0';) 900 SB
300 567 930 (                  q\(3\) := q\(2\);) 930 SB
300 617 930 (                  q\(2\) := q\(1\);) 930 SB
300 667 930 (                  q\(1\) := q\(0\);) 930 SB
300 717 900 (                  q\(0\) := '0';) 900 SB
300 767 1530 (                WHEN "01" =>             --  rotate) 1530 SB
300 817 930 (                  temp := f\(3\);) 930 SB
300 867 930 (                  f\(3\) := f\(2\);) 930 SB
300 917 930 (                  f\(2\) := f\(1\);) 930 SB
300 967 930 (                  f\(1\) := f\(0\);) 930 SB
300 1017 930 (                  f\(0\) := temp;) 930 SB
300 1067 930 (                  temp := q\(3\);) 930 SB
300 1117 930 (                  q\(3\) := q\(2\);) 930 SB
300 1167 930 (                  q\(2\) := q\(1\);) 930 SB
300 1217 930 (                  q\(1\) := q\(0\);) 930 SB
300 1267 930 (                  q\(0\) := temp;) 930 SB
300 1317 1740 (                WHEN "10" =>             --  rotate double) 1740 SB
300 1367 930 (                  temp := f\(0\);) 930 SB
300 1417 930 (                  f\(0\) := q\(3\);) 930 SB
300 1467 930 (                  q\(3\) := q\(2\);) 930 SB
300 1517 930 (                  q\(2\) := q\(1\);) 930 SB
300 1567 930 (                  q\(1\) := q\(0\);) 930 SB
300 1617 930 (                  q\(0\) := f\(3\);) 930 SB
300 1667 930 (                  f\(3\) := f\(2\);) 930 SB
300 1717 930 (                  f\(2\) := f\(1\);) 930 SB
300 1767 930 (                  f\(1\) := temp;) 930 SB
300 1817 1650 (                WHEN "11" =>             --  arithmetic) 1650 SB
1500 1867 300 (--  double) 300 SB
300 1917 930 (                  f\(3\) := f\(2\);) 930 SB
300 1967 930 (                  f\(2\) := f\(1\);) 930 SB
300 2017 930 (                  f\(1\) := f\(0\);) 930 SB
300 2067 930 (                  f\(0\) := q\(3\);) 930 SB
300 2117 930 (                  q\(3\) := q\(2\);) 930 SB
300 2167 930 (                  q\(2\) := q\(1\);) 930 SB
300 2217 930 (                  q\(1\) := q\(0\);) 930 SB
300 2267 900 (                  q\(0\) := '0';) 900 SB
300 2317 1440 (              END CASE;                  --  mux) 1440 SB
300 2367 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 2417 1170 (              memory\(int_address\) <= f;) 1170 SB
300 2467 1560 (            WHEN "111" =>                --  b <= 2f) 1560 SB
300 2517 750 (              tempy := f;) 750 SB
300 2567 750 (              CASE mux IS) 750 SB
300 2617 1470 (                WHEN "00" =>             --  zero) 1470 SB
300 2667 930 (                  f\(3\) := f\(2\);) 930 SB
300 2717 930 (                  f\(2\) := f\(1\);) 930 SB
300 2767 930 (                  f\(1\) := f\(0\);) 930 SB
300 2817 900 (                  f\(0\) := '0';) 900 SB
300 2867 1530 (                WHEN "01" =>             --  rotate) 1530 SB
300 2917 930 (                  temp := f\(3\);) 930 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 55 55
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (55) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 930 (                  f\(3\) := f\(2\);) 930 SB
300 317 930 (                  f\(2\) := f\(1\);) 930 SB
300 367 930 (                  f\(1\) := f\(0\);) 930 SB
300 417 930 (                  f\(0\) := temp;) 930 SB
300 467 1740 (                WHEN "10" =>             --  rotate double) 1740 SB
300 517 930 (                  f\(3\) := f\(2\);) 930 SB
300 567 930 (                  f\(2\) := f\(1\);) 930 SB
300 617 930 (                  f\(1\) := f\(0\);) 930 SB
300 667 930 (                  f\(0\) := q\(3\);) 930 SB
300 717 1650 (                WHEN "11" =>             --  arithmetic) 1650 SB
1500 767 300 (--  double) 300 SB
300 817 930 (                  f\(3\) := f\(2\);) 930 SB
300 867 930 (                  f\(2\) := f\(1\);) 930 SB
300 917 930 (                  f\(1\) := f\(0\);) 930 SB
300 967 930 (                  f\(0\) := q\(3\);) 930 SB
300 1017 1440 (              END CASE;                  --  mux) 1440 SB
300 1067 1140 (              int_address := bvtoi\(b\);) 1140 SB
300 1117 1170 (              memory\(int_address\) <= f;) 1170 SB
300 1167 1410 (          END CASE;                      --  dc) 1410 SB
300 1217 630 (          y <= tempy;) 630 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
656 1350 1087 (Listing 44. AM2900 Destination Control Word) 1087 SB
300 1450 813 (6.2.2.4 The next instruction control) 813 SB
0 0 0 fC
/fm 256 def
812 2 300 1509 B
1 F
n
450 1550 104 (The ) 118 SB
568 1550 117 (final ) 131 SB
699 1550 232 (operation ) 247 SB
946 1550 53 (is ) 68 SB
1014 1550 85 (the ) 100 SB
1114 1550 113 (next ) 128 SB
1242 1550 258 (instruction ) 273 SB
1515 1550 192 (control. ) 207 SB
1722 1550 15 ( ) 30 SB
1752 1550 116 (This ) 131 SB
1883 1550 217 (operation) 217 SB
375 1650 200 (controls ) 205 SB
580 1650 85 (the ) 90 SB
670 1650 237 (execution ) 242 SB
912 1650 119 (flow ) 124 SB
1036 1650 62 (of ) 67 SB
1103 1650 85 (the ) 90 SB
1193 1650 239 (AM2900. ) 244 SB
1437 1650 15 ( ) 20 SB
1457 1650 50 (It ) 55 SB
1512 1650 139 (relies ) 145 SB
1657 1650 72 (on ) 78 SB
1735 1650 71 (all ) 77 SB
1812 1650 85 (the ) 91 SB
1903 1650 197 (previous) 197 SB
375 1750 1116 (operations performed.  The code appears below:) 1116 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 1892 1800 (------------------------------------------------------------) 1800 SB
300 1942 570 (-------------------) 570 SB
300 1992 1020 (--  decode instruction and execute) 1020 SB
300 2042 1800 (------------------------------------------------------------) 1800 SB
300 2092 570 (-------------------) 570 SB
300 2142 600 (          CASE ni IS) 600 SB
300 2192 1800 (            WHEN "0000" =>              --  branch if F != 0) 1800 SB
300 2242 1170 (              IF \(status\(2\) = '0'\) THEN) 1170 SB
300 2292 960 (                pc := bvtoi\(ba\);) 960 SB
300 2342 540 (              ELSE) 540 SB
300 2392 870 (                pc := pc + 1;) 870 SB
300 2442 630 (              END IF;) 630 SB
300 2492 1530 (            WHEN "0001" =>               --  branch) 1530 SB
300 2542 900 (              pc := bvtoi\(ba\);) 900 SB
300 2592 1590 (            WHEN "0010" =>               --  continue) 1590 SB
300 2642 810 (              pc := pc + 1;) 810 SB
300 2692 1650 (            WHEN "0011" =>               --  branch map) 1650 SB
300 2742 870 (              pc := bvtoi\(d\);) 870 SB
300 2792 1740 (            WHEN "0100" =>               --  JSR if f != 0) 1740 SB
300 2842 1230 (              IF \(\(status\(2\) = '0'\)\) THEN) 1230 SB
300 2892 990 (                IF \(sp > 15\) THEN) 990 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 56 56
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (56) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 900 (                  ASSERT FALSE) 900 SB
300 317 1020 (                    REPORT "ERROR") 1020 SB
300 367 1110 (                      SEVERITY ERROR;) 1110 SB
300 417 690 (                END IF;) 690 SB
300 467 960 (                stack\(sp\) := pc;) 960 SB
300 517 870 (                sp := sp + 1;) 870 SB
300 567 960 (                pc := bvtoi\(ba\);) 960 SB
300 617 540 (              ELSE) 540 SB
300 667 870 (                pc := pc + 1;) 870 SB
300 717 630 (              END IF;) 630 SB
300 767 1440 (            WHEN "0101" =>               --  JSR) 1440 SB
300 817 930 (              IF \(sp > 15\) THEN) 930 SB
300 867 840 (                ASSERT FALSE) 840 SB
300 917 1410 (                  REPORT "error stack overflow") 1410 SB
300 967 1050 (                    SEVERITY ERROR;) 1050 SB
300 1017 630 (              END IF;) 630 SB
300 1067 900 (              stack\(sp\) := pc;) 900 SB
300 1117 810 (              sp := sp + 1;) 810 SB
300 1167 900 (              pc := bvtoi\(ba\);) 900 SB
300 1217 1440 (            WHEN "0110" =>               --  RTS) 1440 SB
300 1267 900 (              IF \(sp = 0\) THEN) 900 SB
300 1317 840 (                ASSERT FALSE) 840 SB
300 1367 1470 (                  REPORT "error, stack underflow") 1470 SB
300 1417 1050 (                    SEVERITY ERROR;) 1050 SB
300 1467 630 (              END IF;) 630 SB
300 1517 900 (              pc := stack\(sp\);) 900 SB
300 1567 810 (              sp := sp - 1;) 810 SB
300 1617 1770 (            WHEN "0111" =>               --  file reference) 1770 SB
1500 1667 360 (-- the stack) 360 SB
300 1717 900 (              pc := stack\(sp\);) 900 SB
300 1767 1710 (            WHEN "1000" =>               --  end loop and) 1710 SB
1500 1817 450 (-- pop if f = 0) 450 SB
300 1867 1170 (              IF \(status\(2\) = '0'\) THEN) 1170 SB
300 1917 960 (                IF \(sp = 0\) THEN) 960 SB
300 1967 900 (                  ASSERT FALSE) 900 SB
300 2017 1500 (                    REPORT "error stack underflow") 1500 SB
300 2067 1110 (                      SEVERITY ERROR;) 1110 SB
300 2117 690 (                END IF;) 690 SB
300 2167 960 (                pc := stack\(sp\);) 960 SB
300 2217 870 (                sp := sp + 1;) 870 SB
300 2267 540 (              ELSE) 540 SB
300 2317 870 (                pc := pc + 1;) 870 SB
300 2367 630 (              END IF;) 630 SB
300 2417 1590 (            WHEN "1001" =>               --  push and) 1590 SB
1500 2467 330 (-- continue) 330 SB
300 2517 930 (              IF \(sp > 15\) THEN) 930 SB
300 2567 840 (                ASSERT FALSE) 840 SB
300 2617 1410 (                  REPORT "error stack overflow") 1410 SB
300 2667 1050 (                    SEVERITY ERROR;) 1050 SB
300 2717 630 (              END IF;) 630 SB
300 2767 1110 (              stack\(sp\) := bvtoi\(ba\);) 1110 SB
300 2817 810 (              sp := sp + 1;) 810 SB
300 2867 810 (              pc := pc + 1;) 810 SB
300 2917 1560 (            WHEN "1010" =>               --  pop and) 1560 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 57 57
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (57) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
1500 267 330 (-- continue) 330 SB
300 317 900 (              IF \(sp = 0\) THEN) 900 SB
300 367 840 (                ASSERT FALSE) 840 SB
300 417 1440 (                  REPORT "error stack underflow") 1440 SB
300 467 1050 (                    SEVERITY ERROR;) 1050 SB
300 517 630 (              END IF;) 630 SB
300 567 810 (              sp := sp - 1;) 810 SB
300 617 810 (              pc := pc + 1;) 810 SB
300 667 1710 (            WHEN "1011" =>               --  end loop and) 1710 SB
1500 717 420 (-- pop if cout) 420 SB
300 767 1170 (              IF \(status\(1\) = '1'\) THEN) 1170 SB
300 817 960 (                IF \(sp = 0\) THEN) 960 SB
300 867 900 (                  ASSERT FALSE) 900 SB
300 917 1500 (                    REPORT "error stack underflow") 1500 SB
300 967 1110 (                      SEVERITY ERROR;) 1110 SB
300 1017 690 (                END IF;) 690 SB
300 1067 960 (                pc := stack\(sp\);) 960 SB
300 1117 870 (                sp := sp - 1;) 870 SB
300 1167 540 (              ELSE) 540 SB
300 1217 870 (                pc := pc + 1;) 870 SB
300 1267 630 (              END IF;) 630 SB
300 1317 1800 (            WHEN "1100" =>           --  branch reg if f = 0) 1800 SB
300 1367 1170 (              IF \(status\(2\) = '1'\) THEN) 1170 SB
300 1417 960 (                pc := bvtoi\(ba\);) 960 SB
300 1467 540 (              ELSE) 540 SB
300 1517 870 (                pc := pc + 1;) 870 SB
300 1567 630 (              END IF;) 630 SB
300 1617 1770 (            WHEN "1101" =>             --  branch reg if f3) 1770 SB
300 1667 1170 (              IF \(status\(0\) = '1'\) THEN) 1170 SB
300 1717 960 (                pc := bvtoi\(ba\);) 960 SB
300 1767 540 (              ELSE) 540 SB
300 1817 870 (                pc := pc + 1;) 870 SB
300 1867 630 (              END IF;) 630 SB
300 1917 1770 (            WHEN "1110" =>            --  branch reg if ovr) 1770 SB
300 1967 1170 (              IF \(status\(3\) = '1'\) THEN) 1170 SB
300 2017 960 (                pc := bvtoi\(ba\);) 960 SB
300 2067 540 (              ELSE) 540 SB
300 2117 870 (                pc := pc + 1;) 870 SB
300 2167 630 (              END IF;) 630 SB
300 2217 1800 (            WHEN "1111" =>            --  branch reg if cout) 1800 SB
300 2267 1170 (              IF \(status\(1\) = '1'\) THEN) 1170 SB
300 2317 960 (                pc := bvtoi\(ba\);) 960 SB
300 2367 540 (              ELSE) 540 SB
300 2417 870 (                pc := pc + 1;) 870 SB
300 2467 630 (              END IF;) 630 SB
300 2517 1410 (          END CASE;                      --  ni) 1410 SB
300 2567 1050 (          pipe_reg <= inst_mem\(pc\);) 1050 SB
300 2617 690 (          pc_out <= pc;) 690 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
675 2750 1050 (Listing 45. AM2900 Next Instruction Control) 1050 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 58 58
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (58) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 275 926 (CHAPTER 7: TESTING THE AM2900) 926 SB
0 0 0 fC
/fm 256 def
925 2 300 334 B
1 F
n
300 475 717 (7.0 The AM2900 Test benches) 717 SB
/fm 256 def
716 2 300 534 B
1 F
n
450 575 104 (The ) 111 SB
561 575 224 (AM2900 ) 231 SB
792 575 174 (VHDL ) 181 SB
973 575 270 (description ) 277 SB
1250 575 92 (has ) 99 SB
1349 575 124 (been ) 132 SB
1481 575 192 (written, ) 200 SB
1681 575 88 (but ) 96 SB
1777 575 114 (now ) 122 SB
1899 575 83 (we ) 91 SB
1990 575 110 (must) 110 SB
375 675 96 (test ) 100 SB
475 675 85 (the ) 89 SB
564 675 237 (execution ) 241 SB
805 675 60 (to ) 64 SB
869 675 139 (make ) 143 SB
1012 675 111 (sure ) 116 SB
1128 675 101 (that ) 106 SB
1234 675 46 (it ) 51 SB
1285 675 221 (performs ) 226 SB
1511 675 224 (properly. ) 229 SB
1740 675 15 ( ) 20 SB
1760 675 79 (To ) 84 SB
1844 675 165 (ensure ) 170 SB
2014 675 86 (that) 86 SB
375 775 85 (the ) 90 SB
465 775 237 (execution ) 242 SB
707 775 221 (performs ) 226 SB
933 775 224 (properly, ) 229 SB
1162 775 83 (we ) 88 SB
1250 775 125 (must ) 130 SB
1380 775 90 (run ) 95 SB
1475 775 136 (some ) 142 SB
1617 775 174 (VHDL ) 180 SB
1797 775 96 (test ) 102 SB
1899 775 201 (benches.) 201 SB
375 875 1298 (The test benches which I present here contain two parts.) 1298 SB
450 975 104 (The ) 108 SB
558 975 106 (first ) 110 SB
668 975 105 (part ) 109 SB
777 975 53 (is ) 57 SB
834 975 41 (a ) 45 SB
879 975 166 (simple ) 170 SB
1049 975 140 (clock ) 144 SB
1193 975 247 (generator, ) 251 SB
1444 975 98 (and ) 102 SB
1546 975 85 (the ) 89 SB
1635 975 176 (second ) 180 SB
1815 975 53 (is ) 58 SB
1873 975 85 (the ) 90 SB
1963 975 137 (actual) 137 SB
375 1075 96 (test ) 98 SB
473 1075 140 (code. ) 142 SB
615 1075 15 ( ) 17 SB
632 1075 104 (The ) 106 SB
738 1075 96 (test ) 98 SB
836 1075 125 (code ) 127 SB
963 1075 53 (is ) 55 SB
1018 1075 169 (further ) 171 SB
1189 1075 175 (broken ) 177 SB
1366 1075 72 (up ) 74 SB
1440 1075 103 (into ) 106 SB
1546 1075 202 (multiple ) 205 SB
1751 1075 112 (data ) 115 SB
1866 1075 114 (load ) 117 SB
1983 1075 117 (steps) 117 SB
375 1175 98 (and ) 100 SB
475 1175 102 (two ) 105 SB
580 1175 132 (steps ) 135 SB
715 1175 60 (to ) 63 SB
778 1175 198 (perform ) 201 SB
979 1175 69 (an ) 72 SB
1051 1175 176 (infinite ) 179 SB
1230 1175 252 (execution. ) 255 SB
1485 1175 15 ( ) 18 SB
1503 1175 104 (The ) 107 SB
1610 1175 253 (simulation ) 256 SB
1866 1175 90 (run ) 93 SB
1959 1175 141 (length) 141 SB
375 1275 205 (depends ) 208 SB
583 1275 72 (on ) 75 SB
658 1275 85 (the ) 88 SB
746 1275 229 (simulator ) 232 SB
978 1275 205 (settings. ) 208 SB
1186 1275 15 ( ) 18 SB
1204 1275 34 (I ) 37 SB
1241 1275 88 (ran ) 91 SB
1332 1275 85 (the ) 89 SB
1421 1275 96 (test ) 100 SB
1521 1275 201 (benches ) 205 SB
1726 1275 81 (for ) 85 SB
1811 1275 44 (2 ) 48 SB
32 0 0 58 58 0 0 0 58 /Symbol font
1859 1270 33 (m) 33 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1892 1275 208 (Seconds,) 208 SB
375 1375 976 (but a longer or shorter time can be picked.) 976 SB
450 1475 104 (The ) 110 SB
560 1475 152 (actual ) 158 SB
718 1475 125 (code ) 131 SB
849 1475 81 (for ) 87 SB
936 1475 85 (the ) 91 SB
1027 1475 96 (test ) 103 SB
1130 1475 201 (benches ) 208 SB
1338 1475 95 (can ) 102 SB
1440 1475 70 (be ) 77 SB
1517 1475 147 (found ) 154 SB
1671 1475 58 (in ) 65 SB
1736 1475 85 (the ) 92 SB
1828 1475 272 (appendices,) 272 SB
375 1575 898 (but a short description of each follows.) 898 SB
300 1775 638 (7.1 Load the AM2900 Ram) 638 SB
/fm 256 def
637 2 300 1834 B
1 F
n
450 1875 116 (This ) 131 SB
581 1875 96 (test ) 111 SB
692 1875 152 (bench ) 168 SB
860 1875 295 (corresponds ) 311 SB
1171 1875 60 (to ) 76 SB
1247 1875 185 (loading ) 201 SB
1448 1875 130 (three ) 146 SB
1594 1875 62 (of ) 78 SB
1672 1875 85 (the ) 101 SB
1773 1875 210 (registers ) 226 SB
1999 1875 101 (with) 101 SB
375 1975 161 (values ) 172 SB
547 1975 202 (selected ) 214 SB
761 1975 72 (by ) 84 SB
845 1975 85 (the ) 97 SB
942 1975 57 (D ) 69 SB
1011 1975 229 (switches. ) 241 SB
1252 1975 104 (The ) 116 SB
1368 1975 155 (listing ) 167 SB
1535 1975 193 (appears ) 205 SB
1740 1975 58 (in ) 70 SB
1810 1975 240 (Appendix ) 252 SB
2062 1975 38 (B) 38 SB
375 2075 760 (along with the simulation results.) 760 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 2242 1800 (------------------------------------------------------------) 1800 SB
300 2292 570 (-------------------) 570 SB
300 2342 1410 (--  AM2900 Testbench #1: Loading the AM2901 RAM) 1410 SB
300 2392 1530 (--  corresponds to Exercise #1 from professor Chang) 1530 SB
300 2442 1110 (--  instruction memory is as follows:) 1110 SB
300 2492 1380 (--  0: XXXX XXXX X011 X111 X011 XXXX 0000 0010) 1380 SB
300 2542 1380 (--  1: XXXX XXXX X001 X011 X011 XXXX 0000 XXXX) 1380 SB
300 2592 1380 (--  2: XXXX XXXX X011 X111 X011 XXXX 0001 0100) 1380 SB
300 2642 1380 (--  3: XXXX XXXX X001 X011 X011 XXXX 0001 XXXX) 1380 SB
300 2692 1380 (--  4: XXXX XXXX X011 X111 X011 XXXX 1001 0101) 1380 SB
300 2742 1380 (--  5: XXXX XXXX X001 X011 X011 XXXX 1001 XXXX) 1380 SB
300 2792 1380 (--  6: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2842 1380 (--  7: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2892 1380 (--  8: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Symbol
%%+ font Times-Roman
%%Page: 59 59
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (59) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 1380 (--  9: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 317 1380 (--  10:XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 367 1380 (--  11:XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 417 1380 (--  12:XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 467 1380 (--  13:XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 517 1380 (--  14:XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 567 1380 (--  15:XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 617 1800 (------------------------------------------------------------) 1800 SB
300 667 570 (-------------------) 570 SB
300 767 390 (library work;) 390 SB
300 817 720 (USE work.am2900_pkg.ALL;) 720 SB
300 917 660 (ENTITY am2900_test1 IS) 660 SB
300 967 510 (END am2900_test1;) 510 SB
300 1067 1170 (ARCHITECTURE tester1 OF am2900_test1 IS) 1170 SB
300 1117 480 (COMPONENT am2900) 480 SB
300 1167 1680 (  PORT\( inst_mem     : BUFFER bit_16_array\(15 DOWNTO 0\);) 1680 SB
300 1217 1620 (        data_in      : IN     bit_vector\(31 DOWNTO 0\);) 1620 SB
300 1267 1140 (        address      : IN     integer;) 1140 SB
300 1317 1020 (        mem_load     : IN     bit;) 1020 SB
300 1367 1020 (        clock        : IN     bit;) 1020 SB
300 1417 1020 (        run_load     : IN     bit;) 1020 SB
300 1467 1590 (        y            : OUT    bit_vector\(3 DOWNTO 0\);) 1590 SB
300 1517 1650 (        memory       : BUFFER bit_4_array\(15 DOWNTO 0\);) 1650 SB
300 1567 1620 (        pipe_reg     : BUFFER bit_vector\(31 DOWNTO 0\);) 1620 SB
300 1617 1080 (        pc_out       : OUT integer\);) 1080 SB
300 1667 420 (END COMPONENT;) 420 SB
300 1767 1380 (  SIGNAL inst_mem : bit_16_array\(15 DOWNTO 0\);) 1380 SB
300 1817 1290 (  SIGNAL data_in : bit_vector\(31 DOWNTO 0\);) 1290 SB
300 1867 810 (  SIGNAL address : integer;) 810 SB
300 1917 720 (  SIGNAL mem_load : bit;) 720 SB
300 1967 630 (  SIGNAL clock : bit;) 630 SB
300 2017 720 (  SIGNAL run_load : bit;) 720 SB
300 2067 1080 (  SIGNAL y : bit_vector\(3 DOWNTO 0\);) 1080 SB
300 2117 1290 (  SIGNAL memory : bit_4_array\(15 DOWNTO 0\);) 1290 SB
300 2167 1320 (  SIGNAL pipe_reg : bit_vector\(31 DOWNTO 0\);) 1320 SB
300 2217 780 (  SIGNAL pc_out : integer;) 780 SB
300 2317 510 (BEGIN  --  tester) 510 SB
300 2367 360 (  u1: am2900) 360 SB
300 2417 1050 (    PORT MAP\( inst_mem => inst_mem,) 1050 SB
300 2467 990 (              data_in => data_in,) 990 SB
300 2517 990 (              address => address,) 990 SB
300 2567 1050 (              mem_load => mem_load,) 1050 SB
300 2617 870 (              clock => clock,) 870 SB
300 2667 1050 (              run_load => run_load,) 1050 SB
300 2717 630 (              y => y,) 630 SB
300 2767 930 (              memory => memory,) 930 SB
300 2817 1050 (              pipe_reg => pipe_reg,) 1050 SB
300 2867 960 (              pc_out => pc_out\);) 960 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 60 60
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (60) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 1800 (------------------------------------------------------------) 1800 SB
300 317 570 (-------------------) 570 SB
300 367 1680 (--  We will use a 15.5Mhz clock to drive the circuit, by) 1680 SB
300 417 390 (using a clock) 390 SB
300 467 1770 (--  circuit, we give up the single stepping capability, but) 1770 SB
300 517 240 (since we) 240 SB
300 567 1770 (--  will get out a sample over time, this is not a problem.) 1770 SB
300 617 1800 (------------------------------------------------------------) 1800 SB
300 667 570 (-------------------) 570 SB
300 717 450 (clock_gen_12_5:) 450 SB
300 767 210 (PROCESS) 210 SB
300 817 150 (BEGIN) 150 SB
300 917 630 (        clock <= '0';) 630 SB
300 967 690 (        WAIT FOR 40 ns;) 690 SB
300 1017 630 (        clock <= '1';) 630 SB
300 1067 690 (        WAIT FOR 40 ns;) 690 SB
300 1117 360 (END PROCESS;) 360 SB
300 1217 210 (tester:) 210 SB
300 1267 210 (PROCESS) 210 SB
300 1317 960 (  VARIABLE state : integer := 0;) 960 SB
300 1367 210 (  BEGIN) 210 SB
300 1417 1320 (    WAIT UNTIL \(clock'event AND clock ='1'\);) 1320 SB
300 1467 510 (    CASE state IS) 510 SB
300 1567 1800 (------------------------------------------------------------) 1800 SB
300 1617 570 (-------------------) 570 SB
300 1667 1770 (--  load the memory with the above program specified in the) 1770 SB
300 1717 810 (--  initial comment section) 810 SB
300 1767 1800 (------------------------------------------------------------) 1800 SB
300 1817 570 (-------------------) 570 SB
300 1867 450 (      WHEN 0 =>) 450 SB
300 1917 720 (        mem_load <= '0';) 720 SB
300 1967 630 (        address <= 0;) 630 SB
300 2017 1620 (        data_in <= "00000010001101110011000000000010";) 1620 SB
300 2067 570 (        state := 1;) 570 SB
300 2117 450 (      WHEN 1 =>) 450 SB
300 2167 630 (        address <= 1;) 630 SB
300 2217 1620 (        data_in <= "00000010000100110011000000000000";) 1620 SB
300 2267 570 (        state := 2;) 570 SB
300 2317 450 (      WHEN 2 =>) 450 SB
300 2367 630 (        address <= 2;) 630 SB
300 2417 1620 (        data_in <= "00000010001101110011000000010100";) 1620 SB
300 2467 570 (        state := 3;) 570 SB
300 2517 450 (      WHEN 3 =>) 450 SB
300 2567 630 (        address <= 3;) 630 SB
300 2617 1620 (        data_in <= "00000010000100110011000000010000";) 1620 SB
300 2667 570 (        state := 4;) 570 SB
300 2717 450 (      WHEN 4 =>) 450 SB
300 2767 630 (        address <= 4;) 630 SB
300 2817 1620 (        data_in <= "00000010001101110011000010010101";) 1620 SB
300 2867 570 (        state := 5;) 570 SB
300 2917 450 (      WHEN 5 =>) 450 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 61 61
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (61) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 630 (        address <= 5;) 630 SB
300 317 1620 (        data_in <= "00000010000100110011000010010000";) 1620 SB
300 367 570 (        state := 6;) 570 SB
300 417 450 (      WHEN 6 =>) 450 SB
300 467 720 (        mem_load <= '1';) 720 SB
300 517 570 (        state := 7;) 570 SB
300 567 600 (      WHEN OTHERS =>) 600 SB
300 617 1500 (    END CASE;                            --  state) 1500 SB
300 667 420 (  END PROCESS;) 420 SB
300 717 360 (END tester1;) 360 SB
300 817 1200 (CONFIGURATION config1 OF am2900_test1 IS) 1200 SB
300 867 390 (  FOR tester1) 390 SB
300 917 540 (    FOR u1: am2900) 540 SB
300 967 1200 (      USE CONFIGURATION work.am2900_con;) 1200 SB
300 1017 360 (    END FOR;) 360 SB
300 1067 300 (  END FOR;) 300 SB
300 1117 360 (END config1;) 360 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
794 1269 811 (Listing 46. AM2900 Test bench #1) 811 SB
300 1369 590 (7.2 Branch And Continue) 590 SB
0 0 0 fC
/fm 256 def
589 2 300 1428 B
1 F
n
450 1469 116 (This ) 126 SB
576 1469 208 (program ) 218 SB
794 1469 295 (corresponds ) 305 SB
1099 1469 60 (to ) 70 SB
1169 1469 185 (loading ) 195 SB
1364 1469 41 (a ) 51 SB
1415 1469 208 (program ) 218 SB
1633 1469 103 (into ) 114 SB
1747 1469 203 (memory ) 214 SB
1961 1469 139 (which) 139 SB
375 1569 206 (contains ) 210 SB
585 1569 202 (multiple ) 206 SB
791 1569 220 (branches ) 224 SB
1015 1569 98 (and ) 102 SB
1117 1569 211 (continue ) 215 SB
1332 1569 296 (instructions. ) 301 SB
1633 1569 15 ( ) 20 SB
1653 1569 104 (The ) 109 SB
1762 1569 155 (listing ) 160 SB
1922 1569 178 (appears) 178 SB
375 1669 1112 (in Appendix C along with the simulation results.) 1112 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 1836 1800 (------------------------------------------------------------) 1800 SB
300 1886 570 (-------------------) 570 SB
300 1936 1320 (--  AM2900 Testbench #4: Continue and Branch) 1320 SB
300 1986 1530 (--  corresponds to Exercise #4 from professor Chang) 1530 SB
300 2036 1110 (--  instruction memory is as follows:) 1110 SB
300 2086 1380 (--  0: 1001 0001 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2136 1380 (--  1: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2186 1380 (--  2: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2236 1380 (--  3: 0000 0001 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2286 1380 (--  4: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2336 1380 (--  5: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2386 1380 (--  6: 1010 0001 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2436 1380 (--  7: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2486 1380 (--  8: XXXX XXXX XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2536 1380 (--  9: 0110 0001 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2586 1380 (--  10:XXXX 0010 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2636 1380 (--  11:XXXX 0010 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2686 1380 (--  12:XXXX 0010 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2736 1380 (--  13:XXXX 0010 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2786 1380 (--  14:XXXX 0010 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
300 2836 1380 (--  15:0011 0001 XXXX XXXX XXXX XXXX XXXX XXXX) 1380 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 62 62
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (62) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 1800 (------------------------------------------------------------) 1800 SB
300 317 570 (-------------------) 570 SB
300 417 390 (library work;) 390 SB
300 467 720 (USE work.am2900_pkg.ALL;) 720 SB
300 567 630 (ENTITY am2900_test IS) 630 SB
300 617 480 (END am2900_test;) 480 SB
300 717 1110 (ARCHITECTURE tester OF am2900_test IS) 1110 SB
300 767 480 (COMPONENT am2900) 480 SB
300 817 1680 (  PORT\( inst_mem     : BUFFER bit_16_array\(15 DOWNTO 0\);) 1680 SB
300 867 1620 (        data_in      : IN     bit_vector\(31 DOWNTO 0\);) 1620 SB
300 917 1140 (        address      : IN     integer;) 1140 SB
300 967 1020 (        mem_load     : IN     bit;) 1020 SB
300 1017 1020 (        clock        : IN     bit;) 1020 SB
300 1067 1020 (        run_load     : IN     bit;) 1020 SB
300 1117 1590 (        y            : OUT    bit_vector\(3 DOWNTO 0\);) 1590 SB
300 1167 1650 (        memory       : BUFFER bit_4_array\(15 DOWNTO 0\);) 1650 SB
300 1217 1620 (        pipe_reg     : BUFFER bit_vector\(31 DOWNTO 0\);) 1620 SB
300 1267 1080 (        pc_out       : OUT integer\);) 1080 SB
300 1317 420 (END COMPONENT;) 420 SB
300 1417 1380 (  SIGNAL inst_mem : bit_16_array\(15 DOWNTO 0\);) 1380 SB
300 1467 1290 (  SIGNAL data_in : bit_vector\(31 DOWNTO 0\);) 1290 SB
300 1517 810 (  SIGNAL address : integer;) 810 SB
300 1567 720 (  SIGNAL mem_load : bit;) 720 SB
300 1617 630 (  SIGNAL clock : bit;) 630 SB
300 1667 720 (  SIGNAL run_load : bit;) 720 SB
300 1717 1080 (  SIGNAL y : bit_vector\(3 DOWNTO 0\);) 1080 SB
300 1767 1290 (  SIGNAL memory : bit_4_array\(15 DOWNTO 0\);) 1290 SB
300 1817 1320 (  SIGNAL pipe_reg : bit_vector\(31 DOWNTO 0\);) 1320 SB
300 1867 780 (  SIGNAL pc_out : integer;) 780 SB
300 1967 510 (BEGIN  --  tester) 510 SB
300 2017 360 (  u1: am2900) 360 SB
300 2067 1050 (    PORT MAP\( inst_mem => inst_mem,) 1050 SB
300 2117 990 (              data_in => data_in,) 990 SB
300 2167 990 (              address => address,) 990 SB
300 2217 1050 (              mem_load => mem_load,) 1050 SB
300 2267 870 (              clock => clock,) 870 SB
300 2317 1050 (              run_load => run_load,) 1050 SB
300 2367 630 (              y => y,) 630 SB
300 2417 930 (              memory => memory,) 930 SB
300 2467 1050 (              pipe_reg => pipe_reg,) 1050 SB
300 2517 960 (              pc_out => pc_out\);) 960 SB
300 2617 1800 (------------------------------------------------------------) 1800 SB
300 2667 570 (-------------------) 570 SB
300 2717 1680 (--  We will use a 15.5Mhz clock to drive the circuit, by) 1680 SB
300 2767 390 (using a clock) 390 SB
300 2817 1770 (--  circuit, we give up the single stepping capability, but) 1770 SB
300 2867 240 (since we) 240 SB
300 2917 1770 (--  will get out a sample over time, this is not a problem.) 1770 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 63 63
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (63) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 1800 (------------------------------------------------------------) 1800 SB
300 317 570 (-------------------) 570 SB
300 367 450 (clock_gen_12_5:) 450 SB
300 417 210 (PROCESS) 210 SB
300 467 150 (BEGIN) 150 SB
300 567 630 (        clock <= '0';) 630 SB
300 617 690 (        WAIT FOR 40 ns;) 690 SB
300 667 630 (        clock <= '1';) 630 SB
300 717 690 (        WAIT FOR 40 ns;) 690 SB
300 767 360 (END PROCESS;) 360 SB
300 867 210 (tester:) 210 SB
300 917 210 (PROCESS) 210 SB
300 967 960 (  VARIABLE state : integer := 0;) 960 SB
300 1017 210 (  BEGIN) 210 SB
300 1067 1320 (    WAIT UNTIL \(clock'event AND clock ='1'\);) 1320 SB
300 1117 510 (    CASE state IS) 510 SB
300 1217 1800 (------------------------------------------------------------) 1800 SB
300 1267 570 (-------------------) 570 SB
300 1317 1770 (--  load the memory with the above program specified in the) 1770 SB
300 1367 810 (--  initial comment section) 810 SB
300 1417 1800 (------------------------------------------------------------) 1800 SB
300 1467 570 (-------------------) 570 SB
300 1517 450 (      WHEN 0 =>) 450 SB
300 1567 720 (        mem_load <= '0';) 720 SB
300 1617 630 (        address <= 0;) 630 SB
300 1667 1620 (        data_in <= "10010001000000000000000000000000";) 1620 SB
300 1717 570 (        state := 1;) 570 SB
300 1767 450 (      WHEN 1 =>) 450 SB
300 1817 630 (        address <= 3;) 630 SB
300 1867 1620 (        data_in <= "00000001000000000000000000000000";) 1620 SB
300 1917 570 (        state := 2;) 570 SB
300 1967 450 (      WHEN 2 =>) 450 SB
300 2017 630 (        address <= 6;) 630 SB
300 2067 1620 (        data_in <= "10100001000000000000000000000000";) 1620 SB
300 2117 570 (        state := 3;) 570 SB
300 2167 450 (      WHEN 3 =>) 450 SB
300 2217 630 (        address <= 9;) 630 SB
300 2267 1620 (        data_in <= "01100001000000000000000000000000";) 1620 SB
300 2317 570 (        state := 4;) 570 SB
300 2367 450 (      WHEN 4 =>) 450 SB
300 2417 660 (        address <= 10;) 660 SB
300 2467 1620 (        data_in <= "00000010000000000000000000000000";) 1620 SB
300 2517 570 (        state := 5;) 570 SB
300 2567 450 (      WHEN 5 =>) 450 SB
300 2617 660 (        address <= 11;) 660 SB
300 2667 1620 (        data_in <= "00000010000000000000000000000000";) 1620 SB
300 2717 570 (        state := 6;) 570 SB
300 2767 450 (      WHEN 6 =>) 450 SB
300 2817 660 (        address <= 12;) 660 SB
300 2867 1620 (        data_in <= "00000010000000000000000000000000";) 1620 SB
300 2917 570 (        state := 7;) 570 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 64 64
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (64) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 450 (      WHEN 7 =>) 450 SB
300 317 660 (        address <= 13;) 660 SB
300 367 1620 (        data_in <= "00000010000000000000000000000000";) 1620 SB
300 417 570 (        state := 8;) 570 SB
300 467 450 (      WHEN 8 =>) 450 SB
300 517 660 (        address <= 14;) 660 SB
300 567 1620 (        data_in <= "00000010000000000000000000000000";) 1620 SB
300 617 570 (        state := 9;) 570 SB
300 667 450 (      WHEN 9 =>) 450 SB
300 717 660 (        address <= 15;) 660 SB
300 767 1620 (        data_in <= "00110001000000000000000000000000";) 1620 SB
300 817 600 (        state := 10;) 600 SB
300 867 480 (      WHEN 10 =>) 480 SB
300 917 720 (        mem_load <= '1';) 720 SB
300 967 600 (        state := 11;) 600 SB
300 1017 600 (      WHEN OTHERS =>) 600 SB
300 1067 1500 (    END CASE;                            --  state) 1500 SB
300 1117 420 (  END PROCESS;) 420 SB
300 1167 330 (END tester;) 330 SB
300 1267 1140 (CONFIGURATION config OF am2900_test IS) 1140 SB
300 1317 360 (  FOR tester) 360 SB
300 1367 540 (    FOR u1: am2900) 540 SB
300 1417 1200 (      USE CONFIGURATION work.am2900_con;) 1200 SB
300 1467 360 (    END FOR;) 360 SB
300 1517 300 (  END FOR;) 300 SB
300 1567 330 (END config;) 330 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
713 1650 973 (Listing 47. AM2900 Branch and Continue) 973 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Roman
%%Page: 65 65
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (65) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 870 (CHAPTER 8: AM2900 SYNTHESIS) 870 SB
0 0 0 fC
/fm 256 def
869 2 300 359 B
1 F
n
300 500 880 (8.0 Coding the AM2900 for Synthesis) 880 SB
/fm 256 def
879 2 300 559 B
1 F
n
450 600 240 (Appendix ) 258 SB
708 600 50 (E ) 68 SB
776 600 206 (contains ) 224 SB
1000 600 85 (the ) 103 SB
1103 600 152 (actual ) 170 SB
1273 600 125 (code ) 143 SB
1416 600 154 (which ) 172 SB
1588 600 106 (was ) 125 SB
1713 600 88 (put ) 107 SB
1820 600 191 (through ) 210 SB
2030 600 70 (the) 70 SB
375 700 235 (Synopsys ) 246 SB
621 700 177 (Design ) 188 SB
809 700 228 (Architect ) 239 SB
1048 700 60 (to ) 71 SB
1119 700 201 (produce ) 212 SB
1331 700 85 (the ) 97 SB
1428 700 174 (VHDL ) 186 SB
1614 700 161 (output ) 173 SB
1787 700 147 (found ) 159 SB
1946 700 72 (on ) 84 SB
2030 700 70 (the) 70 SB
375 800 347 (accompanying ) 350 SB
725 800 126 (disk. ) 129 SB
854 800 104 (The ) 107 SB
961 800 161 (output ) 164 SB
1125 800 125 (code ) 128 SB
1253 800 53 (is ) 56 SB
1309 800 88 (not ) 91 SB
1400 800 211 (included ) 215 SB
1615 800 58 (in ) 62 SB
1677 800 177 (printed ) 181 SB
1858 800 139 (form, ) 143 SB
2001 800 64 (as ) 68 SB
2069 800 31 (it) 31 SB
375 900 53 (is ) 54 SB
429 900 102 (228 ) 103 SB
532 900 147 (pages ) 148 SB
680 900 115 (long ) 117 SB
797 900 62 (of ) 64 SB
861 900 231 (structural ) 233 SB
1094 900 189 (VHDL. ) 191 SB
1285 900 15 ( ) 17 SB
1302 900 104 (The ) 106 SB
1408 900 127 (main ) 129 SB
1537 900 269 (differences ) 271 SB
1808 900 208 (between ) 210 SB
2018 900 82 (this) 82 SB
375 1000 125 (code ) 128 SB
503 1000 98 (and ) 101 SB
604 1000 85 (the ) 88 SB
692 1000 212 (previous ) 215 SB
907 1000 224 (AM2900 ) 227 SB
1134 1000 140 (code, ) 143 SB
1277 1000 53 (is ) 56 SB
1333 1000 101 (that ) 104 SB
1437 1000 46 (it ) 49 SB
1486 1000 53 (is ) 57 SB
1543 1000 243 (optimized ) 247 SB
1790 1000 81 (for ) 85 SB
1875 1000 225 (synthesis.) 225 SB
375 1100 116 (This ) 132 SB
507 1100 53 (is ) 69 SB
576 1100 116 (very ) 132 SB
708 1100 236 (important ) 252 SB
960 1100 60 (to ) 77 SB
1037 1100 125 (keep ) 142 SB
1179 1100 111 (gate ) 128 SB
1307 1100 165 (counts ) 182 SB
1489 1100 143 (down ) 160 SB
1649 1100 98 (and ) 115 SB
1764 1100 216 (duplicity ) 233 SB
1997 1100 60 (to ) 77 SB
2074 1100 26 (a) 26 SB
375 1200 798 (minimum.  The major changes are:) 798 SB
300 1400 526 (8.1 Multiple Processes) 526 SB
/fm 256 def
525 2 300 1459 B
1 F
n
450 1500 78 (Thi) 78 SB
528 1500 38 (s ) 44 SB
572 1500 53 (is ) 59 SB
631 1500 330 (accomplished ) 336 SB
967 1500 72 (by ) 78 SB
1045 1500 200 (splitting ) 206 SB
1251 1500 174 (VHDL ) 180 SB
1431 1500 103 (into ) 109 SB
1540 1500 169 (logical ) 175 SB
1715 1500 140 (units, ) 146 SB
1861 1500 239 (processes,) 239 SB
375 1600 154 (which ) 158 SB
533 1600 86 (are ) 91 SB
624 1600 145 (either ) 150 SB
774 1600 140 (clock ) 145 SB
919 1600 160 (driven ) 165 SB
1084 1600 63 (or ) 68 SB
1152 1600 139 (event ) 144 SB
1296 1600 175 (driven. ) 180 SB
1476 1600 86 (All ) 91 SB
1567 1600 139 (event ) 144 SB
1711 1600 160 (driven ) 165 SB
1876 1600 224 (processes) 224 SB
375 1700 1458 (are combinatorial and all clock driven processes are sequential.) 1458 SB
300 1900 520 (8.2 Reduced Duplicity) 520 SB
/fm 256 def
519 2 300 1959 B
1 F
n
450 2000 96 (We ) 108 SB
558 2000 125 (must ) 137 SB
695 2000 169 (reduce ) 181 SB
876 2000 71 (all ) 83 SB
959 2000 166 (blocks ) 179 SB
1138 2000 62 (of ) 75 SB
1213 2000 125 (code ) 138 SB
1351 2000 154 (which ) 167 SB
1518 2000 102 (will ) 115 SB
1633 2000 70 (be ) 83 SB
1716 2000 283 (synthesized ) 296 SB
2012 2000 88 (into) 88 SB
375 2100 202 (multiple ) 208 SB
583 2100 244 (functional ) 250 SB
833 2100 181 (blocks. ) 187 SB
1020 2100 116 (This ) 123 SB
1143 2100 205 (includes ) 212 SB
1355 2100 85 (the ) 92 SB
1447 2100 208 (add_sub ) 215 SB
1662 2100 191 (routine, ) 198 SB
1860 2100 64 (as ) 71 SB
1931 2100 113 (well ) 120 SB
2051 2100 49 (as) 49 SB
375 2200 585 (the arithmetic operations.) 585 SB
300 2400 600 (8.3 Variable Management) 600 SB
/fm 256 def
599 2 300 2459 B
1 F
n
450 2500 236 (Variables ) 249 SB
699 2500 86 (are ) 99 SB
798 2500 41 (a ) 54 SB
852 2500 221 (powerful ) 234 SB
1086 2500 105 (part ) 118 SB
1204 2500 62 (of ) 76 SB
1280 2500 189 (VHDL, ) 203 SB
1483 2500 213 (however ) 227 SB
1710 2500 46 (it ) 60 SB
1770 2500 53 (is ) 67 SB
1837 2500 204 (possible ) 218 SB
2055 2500 45 (to) 45 SB
375 2600 154 (create ) 157 SB
532 2600 228 (segments ) 231 SB
763 2600 62 (of ) 65 SB
828 2600 125 (code ) 128 SB
956 2600 154 (which ) 157 SB
1113 2600 207 (simulate ) 210 SB
1323 2600 224 (properly, ) 227 SB
1550 2600 88 (but ) 91 SB
1641 2600 123 (have ) 127 SB
1768 2600 72 (no ) 76 SB
1844 2600 209 (meaning ) 213 SB
2057 2600 43 (in) 43 SB
375 2700 887 (hardware. An example would be using) 887 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 66 66
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (66) 42 SB
32 0 0 50 50 0 0 0 40 /Courier /font0 ANSIFont font
300 267 1530 (                WHEN "01" =>             --  rotate) 1530 SB
300 317 930 (                  temp := f\(3\);) 930 SB
300 367 930 (                  f\(3\) := f\(2\);) 930 SB
300 417 930 (                  f\(2\) := f\(1\);) 930 SB
300 467 930 (                  f\(1\) := f\(0\);) 930 SB
300 517 930 (                  f\(0\) := temp;) 930 SB
300 567 930 (                  temp := q\(3\);) 930 SB
300 617 930 (                  q\(3\) := q\(2\);) 930 SB
300 667 930 (                  q\(2\) := q\(1\);) 930 SB
300 717 930 (                  q\(1\) := q\(0\);) 930 SB
300 767 930 (                  q\(0\) := temp;) 930 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
450 950 788 (In this code segment, the variable ) 788 SB
32 0 0 58 58 0 0 0 52 /Times-Italic /font31 ANSIFont font
1238 951 143 ( temp ) 143 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1381 950 580 (is used twice in a row. In) 580 SB
375 1050 995 (hardware, this is impossible. A signal wire ) 995 SB
32 0 0 58 58 0 0 0 54 /Times-Bold /font29 ANSIFont font
1370 1049 179 (can not) 179 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
1549 1050 435 ( have two different) 435 SB
375 1150 1585 (values simultaneously.  Synthesis tools may be able to correct such a) 1585 SB
375 1250 1229 (problem, however it is bad coding practice to do this.) 1229 SB
300 1450 339 (8.4 The Result) 339 SB
0 0 0 fC
/fm 256 def
338 2 300 1509 B
1 F
n
450 1550 1639 (The Result can be seen in appendix G, and is functionally equivalent to) 1639 SB
375 1650 1662 (the AM2900 behavioral in all respects.  The test benches and results are) 1662 SB
375 1750 1405 (not duplicated, however all simulation results were the same.) 1405 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Courier
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%Page: 67 67
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (67) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 726 (CHAPTER 9 CONCLUSIONS) 726 SB
0 0 0 fC
/fm 256 def
725 2 300 359 B
1 F
n
450 400 174 (VHDL ) 176 SB
626 400 322 (programming ) 324 SB
950 400 53 (is ) 55 SB
1005 400 41 (a ) 43 SB
1048 400 176 (rapidly ) 178 SB
1226 400 204 (growing ) 206 SB
1432 400 118 (field ) 120 SB
1552 400 58 (in ) 60 SB
1612 400 154 (which ) 156 SB
1768 400 130 (there ) 133 SB
1901 400 53 (is ) 56 SB
1957 400 41 (a ) 44 SB
2001 400 99 (high) 99 SB
375 500 211 (demand. ) 222 SB
597 500 15 ( ) 26 SB
623 500 174 (VHDL ) 185 SB
808 500 53 (is ) 64 SB
872 500 108 (also ) 119 SB
991 500 69 (an ) 81 SB
1072 500 212 (evolving ) 224 SB
1296 500 316 (environment. ) 328 SB
1624 500 15 ( ) 27 SB
1651 500 174 (VHDL ) 186 SB
1837 500 82 ('92 ) 94 SB
1931 500 102 (will ) 114 SB
2045 500 55 (be) 55 SB
375 600 213 (finalized ) 241 SB
616 600 139 (soon, ) 167 SB
783 600 252 (expanding ) 280 SB
1063 600 129 (upon ) 157 SB
1220 600 85 (the ) 113 SB
1333 600 190 (original ) 218 SB
1551 600 174 (VHDL ) 203 SB
1754 600 234 (definition ) 263 SB
2017 600 83 (and) 83 SB
375 700 247 (correcting ) 248 SB
623 700 228 (problems ) 229 SB
852 700 58 (in ) 60 SB
912 700 85 (the ) 87 SB
999 700 235 (language. ) 237 SB
1236 700 15 ( ) 17 SB
1253 700 50 (It ) 52 SB
1305 700 53 (is ) 55 SB
1360 700 41 (a ) 43 SB
1403 700 211 (standard ) 213 SB
1616 700 58 (in ) 60 SB
1676 700 192 (military ) 194 SB
1870 700 230 (hardware,) 230 SB
375 800 88 (but ) 100 SB
475 800 46 (it ) 58 SB
533 800 53 (is ) 65 SB
598 800 98 (fast ) 110 SB
708 800 239 (becoming ) 251 SB
959 800 41 (a ) 54 SB
1013 800 211 (standard ) 224 SB
1237 800 58 (in ) 71 SB
1308 800 283 (commercial ) 296 SB
1604 800 230 (hardware ) 243 SB
1847 800 123 (also. ) 136 SB
1983 800 15 ( ) 28 SB
2011 800 89 (The) 89 SB
375 900 198 (purpose ) 208 SB
583 900 62 (of ) 72 SB
655 900 97 (this ) 107 SB
762 900 144 (paper ) 154 SB
916 900 106 (was ) 116 SB
1032 900 60 (to ) 70 SB
1102 900 231 (introduce ) 241 SB
1343 900 135 (Tufts ) 145 SB
1488 900 204 (students ) 214 SB
1702 900 60 (to ) 71 SB
1773 900 189 (VHDL. ) 200 SB
1973 900 15 ( ) 26 SB
1999 900 101 (This) 101 SB
375 1000 501 (paper should provide ) 502 SB
877 1000 41 (a ) 42 SB
919 1000 131 (basis ) 132 SB
1051 1000 60 (to ) 61 SB
1112 1000 267 (understand ) 268 SB
1380 1000 98 (and ) 99 SB
1479 1000 133 (write ) 134 SB
1613 1000 166 (simple ) 167 SB
1780 1000 189 (VHDL. ) 190 SB
1970 1000 15 ( ) 16 SB
1986 1000 114 (With) 114 SB
375 1100 169 (further ) 184 SB
559 1100 154 (study, ) 169 SB
728 1100 204 (students ) 220 SB
948 1100 167 (should ) 183 SB
1131 1100 70 (be ) 86 SB
1217 1100 111 (able ) 127 SB
1344 1100 60 (to ) 76 SB
1420 1100 167 (handle ) 183 SB
1603 1100 211 (complex ) 227 SB
1830 1100 132 (tasks ) 148 SB
1978 1100 122 (using) 122 SB
375 1200 174 (VHDL.) 174 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Page: 68 68
%%PageResources: (atend)
SS
0 0 25 11 798 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font32 ANSIFont font
0 0 0 fC
1179 3069 42 (68) 42 SB
32 0 0 58 58 0 0 0 53 /Times-Roman /font32 ANSIFont font
300 300 362 (REFERENCES) 362 SB
0 0 0 fC
/fm 256 def
361 2 300 359 B
1 F
n
300 450 67 ([1]) 67 SB
375 450 1111 (IEEE 1076 Language Reference Manual \(LRM\)) 1111 SB
/fm 256 def
1110 2 375 509 B
1 F
n
375 525 614 (IEEE 201-981-1391; 1988) 614 SB
300 675 67 ([2]) 67 SB
375 675 518 (The VHDL Handbook) 518 SB
/fm 256 def
517 2 375 734 B
1 F
n
375 750 303 (Dave Coelho) 303 SB
375 825 818 (Kluwer Academic Publishers; 1989) 818 SB
300 975 67 ([3]) 67 SB
375 975 975 (VHDL: Hardware Description and Design) 975 SB
/fm 256 def
974 2 375 1034 B
1 F
n
375 1050 314 (Carey Ussery) 314 SB
375 1125 818 (Kluwer Academic Publishers; 1989) 818 SB
300 1275 67 ([4]) 67 SB
375 1275 159 (VHDL) 159 SB
/fm 256 def
158 2 375 1334 B
1 F
n
375 1350 330 (Douglas Perry) 330 SB
375 1425 459 (McGraw-Hill; 1990) 459 SB
300 1575 67 ([5]) 67 SB
375 1575 817 (Chip Level Modeling Using VHDL) 817 SB
/fm 256 def
816 2 375 1634 B
1 F
n
375 1650 1238 (Dr. James Armstrong, Virginia Polytechnical Institute) 1238 SB
375 1725 445 (Prentiss-Hall; 1988) 445 SB
300 1875 67 ([6]) 67 SB
375 1875 938 (Applications of VHDL to Circuit Design) 938 SB
/fm 256 def
937 2 375 1934 B
1 F
n
375 1950 907 (Randolph E. Harr, Alec G. Stanculescu) 907 SB
375 2025 818 (Kluwer Academic Publishers; 1991) 818 SB
300 2175 67 ([7]) 67 SB
375 2175 691 (AM2900 Reference Materials) 691 SB
/fm 256 def
690 2 375 2234 B
1 F
n
375 2250 581 (American Micro Devices) 581 SB
1 #C
statusdict begin /manualfeed false store end
EJ RS
%%PageTrailer
%%PageResources: font Times-Roman
%%Trailer
SVDoc restore
end
%%Pages: 68
% TrueType font name key:
%    MSTT31c17a = 459fDTimes New RomanF0000003a000001900000
%    MSTT31c187 = 459fDTimes New RomanF00000032000001900000
%    MSTT31c194 = 459fDTimes New RomanF0000002a000001900000
%    MSTT31c1a1 = 459fDTimes New RomanF00000024000001900000
%    MSTT31c1ae = 459fDTimes New RomanF0000003a000001900001
%    MSTT31c1bb = 459fDTimes New RomanF00000000000001900000
%    MSTT31c1c8 = 459fDTimes New RomanF0000003a000002bc0000
%    MSTT31c1d5 = 459fDSymbolF0000003a000001900000
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font AvantGarde-Demi
%%+ font Courier
%%+ font Courier-Oblique
%%+ font NewCenturySchlbk-Roman
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman

%%EOF
